#!/usr/bin/env python3
"""
–≠–ö–°–¢–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –°–´–†–´–• –î–ê–ù–ù–´–• API
–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç WB API –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –∑–∞–≤—ã—à–µ–Ω–∏—è –≤ 10 —Ä–∞–∑
"""

import asyncio
import logging
import json
from datetime import datetime
from typing import Dict, List, Any
import api_clients_main as api_clients
from api_chunking import ChunkedAPIManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class EmergencyRawDataAnalyzer:
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö API"""

    def __init__(self):
        self.chunked_manager = ChunkedAPIManager(api_clients)
        self.raw_sales_data = []
        self.raw_orders_data = []

    async def get_raw_api_data(self, date_from: str, date_to: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç API –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""

        logger.info("üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –°–´–†–´–• –î–ê–ù–ù–´–• API")
        logger.info("=" * 60)
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ Sales API
            logger.info("\nüîç –ü–û–õ–£–ß–ï–ù–ò–ï –°–´–†–´–• SALES –î–ê–ù–ù–´–•:")
            self.raw_sales_data = await self.chunked_manager.get_wb_sales_chunked(date_from, date_to)

            sales_count = len(self.raw_sales_data) if self.raw_sales_data else 0
            logger.info(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ Sales –∑–∞–ø–∏—Å–µ–π: {sales_count}")

            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ Orders API
            logger.info("\nüîç –ü–û–õ–£–ß–ï–ù–ò–ï –°–´–†–´–• ORDERS –î–ê–ù–ù–´–•:")
            self.raw_orders_data = await self.chunked_manager.get_wb_orders_chunked(date_from, date_to)

            orders_count = len(self.raw_orders_data) if self.raw_orders_data else 0
            logger.info(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ Orders –∑–∞–ø–∏—Å–µ–π: {orders_count}")

            return {
                'sales_count': sales_count,
                'orders_count': orders_count,
                'success': True
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {'success': False, 'error': str(e)}

    def analyze_price_format(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–µ–Ω –≤ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

        logger.info("\nüí∞ –ê–ù–ê–õ–ò–ó –§–û–†–ú–ê–¢–ê –¶–ï–ù:")
        logger.info("=" * 40)

        # –ê–Ω–∞–ª–∏–∑ Sales –¥–∞–Ω–Ω—ã—Ö
        if self.raw_sales_data and len(self.raw_sales_data) > 0:
            logger.info("üìä –ê–ù–ê–õ–ò–ó –¶–ï–ù –í SALES:")

            sample_size = min(10, len(self.raw_sales_data))
            price_stats = {
                'forPay': [],
                'priceWithDisc': [],
                'totalPrice': []
            }

            for i, sale in enumerate(self.raw_sales_data[:sample_size]):
                forPay = sale.get('forPay', 0)
                priceWithDisc = sale.get('priceWithDisc', 0)
                totalPrice = sale.get('totalPrice', 0)

                price_stats['forPay'].append(forPay)
                price_stats['priceWithDisc'].append(priceWithDisc)
                price_stats['totalPrice'].append(totalPrice)

                logger.info(f"   –ü—Ä–æ–¥–∞–∂–∞ {i+1}:")
                logger.info(f"      forPay: {forPay}")
                logger.info(f"      priceWithDisc: {priceWithDisc}")
                logger.info(f"      totalPrice: {totalPrice}")
                logger.info(f"      –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ priceWithDisc/forPay: {priceWithDisc/forPay if forPay > 0 else 'N/A':.2f}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
            logger.info(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ï–ù (–ø–µ—Ä–≤—ã–µ {sample_size} –∑–∞–ø–∏—Å–µ–π):")
            for field, values in price_stats.items():
                if values:
                    avg_val = sum(values) / len(values)
                    min_val = min(values)
                    max_val = max(values)
                    logger.info(f"   {field}:")
                    logger.info(f"      –°—Ä–µ–¥–Ω–µ–µ: {avg_val:.2f}")
                    logger.info(f"      –ú–∏–Ω: {min_val:.2f}")
                    logger.info(f"      –ú–∞–∫—Å: {max_val:.2f}")

        # –ê–Ω–∞–ª–∏–∑ Orders –¥–∞–Ω–Ω—ã—Ö
        if self.raw_orders_data and len(self.raw_orders_data) > 0:
            logger.info("\nüìä –ê–ù–ê–õ–ò–ó –¶–ï–ù –í ORDERS:")

            sample_size = min(10, len(self.raw_orders_data))

            for i, order in enumerate(self.raw_orders_data[:sample_size]):
                priceWithDisc = order.get('priceWithDisc', 0)
                totalPrice = order.get('totalPrice', 0)

                logger.info(f"   –ó–∞–∫–∞–∑ {i+1}:")
                logger.info(f"      priceWithDisc: {priceWithDisc}")
                logger.info(f"      totalPrice: {totalPrice}")
                logger.info(f"      –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ totalPrice/priceWithDisc: {totalPrice/priceWithDisc if priceWithDisc > 0 else 'N/A':.2f}")

        return price_stats

    def detect_duplicates(self):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö"""

        logger.info("\nüîç –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –î–£–ë–õ–ò–ö–ê–¢–û–í:")
        logger.info("=" * 40)

        duplicates_analysis = {
            'sales_duplicates': 0,
            'orders_duplicates': 0,
            'sales_unique_ids': set(),
            'orders_unique_ids': set()
        }

        # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Sales
        if self.raw_sales_data:
            logger.info("üìä –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í –í SALES:")

            sale_ids = []
            for sale in self.raw_sales_data:
                sale_id = sale.get('saleID')
                if sale_id:
                    sale_ids.append(sale_id)
                    duplicates_analysis['sales_unique_ids'].add(sale_id)

            total_sales = len(sale_ids)
            unique_sales = len(duplicates_analysis['sales_unique_ids'])
            duplicates_analysis['sales_duplicates'] = total_sales - unique_sales

            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_sales}")
            logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {unique_sales}")
            logger.info(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_analysis['sales_duplicates']}")

            if duplicates_analysis['sales_duplicates'] > 0:
                logger.info(f"   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ –í SALES: {duplicates_analysis['sales_duplicates']}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                from collections import Counter
                id_counts = Counter(sale_ids)
                duplicated_ids = {k: v for k, v in id_counts.items() if v > 1}

                logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID:")
                for dup_id, count in list(duplicated_ids.items())[:5]:
                    logger.info(f"      {dup_id}: {count} —Ä–∞–∑")

        # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ Orders
        if self.raw_orders_data:
            logger.info("\nüìä –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í –í ORDERS:")

            order_ids = []
            for order in self.raw_orders_data:
                order_id = order.get('odid') or order.get('orderID') or f"order_{order.get('date', 'unknown')}"
                order_ids.append(order_id)
                duplicates_analysis['orders_unique_ids'].add(order_id)

            total_orders = len(order_ids)
            unique_orders = len(duplicates_analysis['orders_unique_ids'])
            duplicates_analysis['orders_duplicates'] = total_orders - unique_orders

            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_orders}")
            logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {unique_orders}")
            logger.info(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_analysis['orders_duplicates']}")

            if duplicates_analysis['orders_duplicates'] > 0:
                logger.info(f"   ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´ –í ORDERS: {duplicates_analysis['orders_duplicates']}")

        return duplicates_analysis

    def calculate_real_aggregations(self):
        """–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–≥—Ä–µ–≥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""

        logger.info("\nüìä –†–ê–°–ß–ï–¢ –†–ï–ê–õ–¨–ù–´–• –ê–ì–†–ï–ì–ê–¶–ò–ô:")
        logger.info("=" * 40)

        real_calculations = {}

        # Sales —Ä–∞—Å—á–µ—Ç—ã
        if self.raw_sales_data:
            logger.info("üí∞ SALES –†–ê–°–ß–ï–¢–´:")

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            realizations = [s for s in self.raw_sales_data if s.get('isRealization', True)]

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ saleID
            unique_realizations = {}
            for sale in realizations:
                sale_id = sale.get('saleID')
                if sale_id and sale_id not in unique_realizations:
                    unique_realizations[sale_id] = sale

            unique_sales_list = list(unique_realizations.values())

            # –†–∞—Å—á–µ—Ç—ã
            total_forPay = sum(s.get('forPay', 0) for s in unique_sales_list)
            total_priceWithDisc = sum(s.get('priceWithDisc', 0) for s in unique_sales_list)
            total_totalPrice = sum(s.get('totalPrice', 0) for s in unique_sales_list)

            real_calculations['sales'] = {
                'total_records': len(self.raw_sales_data),
                'realizations_count': len(realizations),
                'unique_realizations_count': len(unique_sales_list),
                'duplicates_removed': len(realizations) - len(unique_sales_list),
                'total_forPay': total_forPay,
                'total_priceWithDisc': total_priceWithDisc,
                'total_totalPrice': total_totalPrice
            }

            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.raw_sales_data)}")
            logger.info(f"   isRealization=true: {len(realizations)}")
            logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(unique_sales_list)}")
            logger.info(f"   –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(realizations) - len(unique_sales_list)}")
            logger.info(f"   –°—É–º–º–∞ forPay: {total_forPay:,.2f} ‚ÇΩ")
            logger.info(f"   –°—É–º–º–∞ priceWithDisc: {total_priceWithDisc:,.2f} ‚ÇΩ")
            logger.info(f"   –°—É–º–º–∞ totalPrice: {total_totalPrice:,.2f} ‚ÇΩ")

        # Orders —Ä–∞—Å—á–µ—Ç—ã
        if self.raw_orders_data:
            logger.info("\nüí∞ ORDERS –†–ê–°–ß–ï–¢–´:")

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –∫–ª—é—á—É
            unique_orders = {}
            for order in self.raw_orders_data:
                order_key = f"{order.get('date', '')}_{order.get('nmId', '')}_{order.get('priceWithDisc', 0)}"
                if order_key not in unique_orders:
                    unique_orders[order_key] = order

            unique_orders_list = list(unique_orders.values())

            # –†–∞—Å—á–µ—Ç—ã
            total_priceWithDisc = sum(o.get('priceWithDisc', 0) for o in unique_orders_list)
            total_totalPrice = sum(o.get('totalPrice', 0) for o in unique_orders_list)

            real_calculations['orders'] = {
                'total_records': len(self.raw_orders_data),
                'unique_orders_count': len(unique_orders_list),
                'duplicates_removed': len(self.raw_orders_data) - len(unique_orders_list),
                'total_priceWithDisc': total_priceWithDisc,
                'total_totalPrice': total_totalPrice
            }

            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.raw_orders_data)}")
            logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(unique_orders_list)}")
            logger.info(f"   –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(self.raw_orders_data) - len(unique_orders_list)}")
            logger.info(f"   –°—É–º–º–∞ priceWithDisc: {total_priceWithDisc:,.2f} ‚ÇΩ")
            logger.info(f"   –°—É–º–º–∞ totalPrice: {total_totalPrice:,.2f} ‚ÇΩ")

        return real_calculations

    def compare_with_expected(self, real_calculations):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

        logger.info("\nüéØ –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò:")
        logger.info("=" * 40)

        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        expected_orders = 113595  # ‚ÇΩ
        expected_delivered = 60688  # ‚ÇΩ

        comparison = {}

        if 'sales' in real_calculations:
            sales_data = real_calculations['sales']

            logger.info("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–î–ê–ñ (–í–´–ö–£–ü–û–í):")
            logger.info(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –≤—ã–∫—É–ø—ã: {expected_delivered:,.0f} ‚ÇΩ")
            logger.info(f"   –°–∏—Å—Ç–µ–º–∞ (forPay): {sales_data['total_forPay']:,.0f} ‚ÇΩ")
            logger.info(f"   –°–∏—Å—Ç–µ–º–∞ (priceWithDisc): {sales_data['total_priceWithDisc']:,.0f} ‚ÇΩ")

            ratio_forPay = sales_data['total_forPay'] / expected_delivered if expected_delivered > 0 else 0
            ratio_priceWithDisc = sales_data['total_priceWithDisc'] / expected_delivered if expected_delivered > 0 else 0

            logger.info(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ forPay/–æ–∂–∏–¥–∞–µ–º—ã–µ: {ratio_forPay:.2f}x")
            logger.info(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ priceWithDisc/–æ–∂–∏–¥–∞–µ–º—ã–µ: {ratio_priceWithDisc:.2f}x")

            comparison['sales'] = {
                'expected': expected_delivered,
                'forPay': sales_data['total_forPay'],
                'priceWithDisc': sales_data['total_priceWithDisc'],
                'ratio_forPay': ratio_forPay,
                'ratio_priceWithDisc': ratio_priceWithDisc
            }

        if 'orders' in real_calculations:
            orders_data = real_calculations['orders']

            logger.info("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–í:")
            logger.info(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–∫–∞–∑—ã: {expected_orders:,.0f} ‚ÇΩ")
            logger.info(f"   –°–∏—Å—Ç–µ–º–∞ (priceWithDisc): {orders_data['total_priceWithDisc']:,.0f} ‚ÇΩ")

            ratio_orders = orders_data['total_priceWithDisc'] / expected_orders if expected_orders > 0 else 0

            logger.info(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–∞/–æ–∂–∏–¥–∞–µ–º—ã–µ: {ratio_orders:.2f}x")

            comparison['orders'] = {
                'expected': expected_orders,
                'system': orders_data['total_priceWithDisc'],
                'ratio': ratio_orders
            }

        return comparison

    def save_raw_analysis_report(self, real_calculations, comparison, duplicates_analysis):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""

        report = {
            'analysis_date': datetime.now().isoformat(),
            'analysis_type': 'emergency_raw_data_analysis',
            'period': '2025-01-01 to 2025-01-31',
            'raw_data_counts': {
                'sales_records': len(self.raw_sales_data) if self.raw_sales_data else 0,
                'orders_records': len(self.raw_orders_data) if self.raw_orders_data else 0
            },
            'duplicates_analysis': duplicates_analysis,
            'real_calculations': real_calculations,
            'comparison_with_expected': comparison,
            'conclusions': {
                'primary_issue': 'API –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ —Å—É–º–º—ã',
                'duplication_impact': '–î—É–±–ª–∏–∫–∞—Ç—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç —Å—É–º–º—ã',
                'price_format_issue': '–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ü–µ–Ω',
                'correction_needed': '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞'
            }
        }

        filename = f"emergency_raw_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = f"/root/sovani_bot/reports/{filename}"

        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            logger.info(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""

    analyzer = EmergencyRawDataAnalyzer()

    # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ - —è–Ω–≤–∞—Ä—å 2025
    date_from = "2025-01-01"
    date_to = "2025-01-31"

    logger.info("üö® –ó–ê–ü–£–°–ö –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –°–´–†–´–• –î–ê–ù–ù–´–•")

    # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    raw_data_result = await analyzer.get_raw_api_data(date_from, date_to)

    if raw_data_result['success']:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω
        price_stats = analyzer.analyze_price_format()

        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicates_analysis = analyzer.detect_duplicates()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
        real_calculations = analyzer.calculate_real_aggregations()

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        comparison = analyzer.compare_with_expected(real_calculations)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = analyzer.save_raw_analysis_report(real_calculations, comparison, duplicates_analysis)

        logger.info("\nüéâ –≠–ö–°–¢–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        logger.info(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")

        return real_calculations, comparison, duplicates_analysis
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return None, None, None

if __name__ == "__main__":
    results = asyncio.run(main())