#!/usr/bin/env python3
"""–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ò–û–î–û–í
–ü–æ—à–∞–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö, —Å—Ä–µ–¥–Ω–∏—Ö –∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta

from emergency_data_correction import CorrectedFinancialReports

import api_clients_main as api_clients
from api_chunking import ChunkedAPIManager
from real_data_reports import RealDataFinancialReports

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class PeriodDiagnosticSystem:
    """–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""

    def __init__(self):
        self.original_reports = RealDataFinancialReports()
        self.corrected_reports = CorrectedFinancialReports()
        self.chunked_manager = ChunkedAPIManager(api_clients)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_results = {}

    def get_test_periods(self) -> list[tuple[str, str, str, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
        # –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è
        today = datetime(2025, 9, 28)  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞

        periods = [
            # (name, date_from, date_to, days)
            (
                "1_day",
                (today - timedelta(days=1)).strftime("%Y-%m-%d"),
                today.strftime("%Y-%m-%d"),
                1,
            ),
            (
                "7_days",
                (today - timedelta(days=7)).strftime("%Y-%m-%d"),
                today.strftime("%Y-%m-%d"),
                7,
            ),
            (
                "14_days",
                (today - timedelta(days=14)).strftime("%Y-%m-%d"),
                today.strftime("%Y-%m-%d"),
                14,
            ),
            (
                "30_days",
                (today - timedelta(days=30)).strftime("%Y-%m-%d"),
                today.strftime("%Y-%m-%d"),
                30,
            ),
            (
                "60_days",
                (today - timedelta(days=60)).strftime("%Y-%m-%d"),
                today.strftime("%Y-%m-%d"),
                60,
            ),
            (
                "90_days",
                (today - timedelta(days=90)).strftime("%Y-%m-%d"),
                today.strftime("%Y-%m-%d"),
                90,
            ),
        ]

        return periods

    async def test_single_period(self, name: str, date_from: str, date_to: str, days: int) -> dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        logger.info(f"\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ò–û–î–ê: {name}")
        logger.info("=" * 50)
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} - {date_to} ({days} –¥–Ω–µ–π)")

        test_result = {
            "name": name,
            "date_from": date_from,
            "date_to": date_to,
            "days": days,
            "timestamp": datetime.now().isoformat(),
            "success": False,
            "original_data": None,
            "corrected_data": None,
            "chunking_info": None,
            "api_calls": 0,
            "errors": [],
        }

        try:
            # 1. –ê–Ω–∞–ª–∏–∑ chunking —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            chunking_info = await self.analyze_chunking_strategy(date_from, date_to)
            test_result["chunking_info"] = chunking_info

            # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            try:
                original_data = await self.original_reports.get_real_wb_data(date_from, date_to)
                test_result["original_data"] = original_data
                logger.info(
                    f"   ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {original_data.get('revenue', 0):,.0f} ‚ÇΩ"
                )
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}"
                test_result["errors"].append(error_msg)
                logger.error(f"   ‚ùå {error_msg}")

            # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            try:
                corrected_data = await self.corrected_reports.get_corrected_wb_data(
                    date_from, date_to
                )
                test_result["corrected_data"] = corrected_data
                logger.info(
                    f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {corrected_data.get('revenue', 0):,.0f} ‚ÇΩ"
                )
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}"
                test_result["errors"].append(error_msg)
                logger.error(f"   ‚ùå {error_msg}")

            # 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if original_data and corrected_data:
                analysis = self.analyze_period_results(original_data, corrected_data, days)
                test_result.update(analysis)
                test_result["success"] = True

                logger.info(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–ï–†–ò–û–î–ê {name}:")
                logger.info(
                    f"   üîÑ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª/–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π: {analysis.get('correction_ratio', 0):.2f}x"
                )
                logger.info(
                    f"   üìà –í—ã—Ä—É—á–∫–∞ –≤ –¥–µ–Ω—å (–æ—Ä–∏–≥–∏–Ω–∞–ª): {analysis.get('daily_revenue_original', 0):,.0f} ‚ÇΩ"
                )
                logger.info(
                    f"   üìà –í—ã—Ä—É—á–∫–∞ –≤ –¥–µ–Ω—å (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è): {analysis.get('daily_revenue_corrected', 0):,.0f} ‚ÇΩ"
                )

            return test_result

        except Exception as e:
            error_msg = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ {name}: {e}"
            test_result["errors"].append(error_msg)
            logger.error(f"‚ùå {error_msg}")
            return test_result

    async def analyze_chunking_strategy(self, date_from: str, date_to: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ chunking –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ chunking —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        start_date = datetime.strptime(date_from, "%Y-%m-%d")
        end_date = datetime.strptime(date_to, "%Y-%m-%d")
        days_diff = (end_date - start_date).days

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é chunking (–ª–æ–≥–∏–∫–∞ –∏–∑ api_chunking.py)
        if days_diff <= 30:
            strategy = "short_period"
            delay = 1.5
            expected_chunks = 1
        elif days_diff <= 90:
            strategy = "medium_period"
            delay = 2.0
            expected_chunks = max(1, days_diff // 45)
        else:
            strategy = "long_period"
            delay = 3.0
            expected_chunks = max(1, days_diff // 45)

        chunking_info = {
            "days": days_diff,
            "strategy": strategy,
            "delay_between_requests": delay,
            "expected_chunks": expected_chunks,
            "max_api_calls": expected_chunks * 2,  # Sales + Orders –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
        }

        logger.info(f"   üìä –î–Ω–µ–π: {days_diff}")
        logger.info(f"   üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")
        logger.info(f"   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay}s")
        logger.info(f"   üì¶ –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∞–Ω–∫–æ–≤: {expected_chunks}")
        logger.info(f"   üåê –ú–∞–∫—Å. API –≤—ã–∑–æ–≤–æ–≤: {chunking_info['max_api_calls']}")

        return chunking_info

    def analyze_period_results(self, original_data: dict, corrected_data: dict, days: int) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        original_revenue = original_data.get("revenue", 0)
        corrected_revenue = corrected_data.get("revenue", 0)

        analysis = {
            "original_revenue": original_revenue,
            "corrected_revenue": corrected_revenue,
            "correction_ratio": (
                original_revenue / corrected_revenue if corrected_revenue > 0 else 0
            ),
            "daily_revenue_original": original_revenue / days if days > 0 else 0,
            "daily_revenue_corrected": corrected_revenue / days if days > 0 else 0,
            "revenue_difference": original_revenue - corrected_revenue,
            "revenue_difference_pct": (
                ((original_revenue - corrected_revenue) / corrected_revenue * 100)
                if corrected_revenue > 0
                else 0
            ),
        }

        return analysis

    async def run_progressive_testing(self) -> dict:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫ –¥–ª–∏–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º"""
        logger.info("üö® –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ï–°–°–ò–í–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–ï–†–ò–û–î–û–í")
        logger.info("=" * 60)

        periods = self.get_test_periods()
        results = {}

        for name, date_from, date_to, days in periods:
            logger.info(f"\n{'='*20} –ü–ï–†–ò–û–î {name.upper()} {'='*20}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥
            test_result = await self.test_single_period(name, date_from, date_to, days)
            results[name] = test_result

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if test_result["success"]:
                logger.info(f"‚úÖ –ü–µ—Ä–∏–æ–¥ {name} –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                if self.is_period_data_reliable(test_result):
                    logger.info(f"üéØ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {name} –ù–ê–î–ï–ñ–ù–´")
                else:
                    logger.info(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {name} –ù–ï–ù–ê–î–ï–ñ–ù–´ - –û–°–¢–ê–ù–û–í–ö–ê")
                    break
            else:
                logger.error(f"‚ùå –ü–µ—Ä–∏–æ–¥ {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏:")
                for error in test_result["errors"]:
                    logger.error(f"   ‚Ä¢ {error}")
                logger.error("üõë –û–°–¢–ê–ù–û–í–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
                break

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            logger.info("‚è±Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
            await asyncio.sleep(5)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_diagnostic_results(results)

        return results

    def is_period_data_reliable(self, test_result: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        if not test_result.get("success"):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        correction_ratio = test_result.get("correction_ratio", 0)

        # –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º –Ω–∞–¥–µ–∂–Ω—ã–º–∏, –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (5-15x)
        if 5 <= correction_ratio <= 15:
            return True

        # –ï—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∞—è - –¥–∞–Ω–Ω—ã–µ –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã
        return False

    def save_diagnostic_results(self, results: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        filename = f"period_diagnostic_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = f"/root/sovani_bot/reports/{filename}"

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            logger.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    def print_summary(self, results: dict):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–ï–†–ò–û–î–û–í")
        logger.info("=" * 60)

        for period_name, result in results.items():
            if result.get("success"):
                status = "‚úÖ –£–°–ü–ï–•"
                revenue_orig = result.get("original_revenue", 0)
                revenue_corr = result.get("corrected_revenue", 0)
                ratio = result.get("correction_ratio", 0)

                logger.info(
                    f"{period_name:>10}: {status} | {revenue_orig:>10,.0f} ‚Üí {revenue_corr:>8,.0f} ‚ÇΩ ({ratio:.1f}x)"
                )
            else:
                status = "‚ùå –û–®–ò–ë–ö–ê"
                logger.info(f"{period_name:>10}: {status}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    diagnostic = PeriodDiagnosticSystem()

    logger.info("üö® –°–¢–ê–†–¢ –≠–ö–°–¢–†–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–ï–†–ò–û–î–û–í")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = await diagnostic.run_progressive_testing()

    # –ü–µ—á–∞—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    diagnostic.print_summary(results)

    logger.info("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")

    return results


if __name__ == "__main__":
    results = asyncio.run(main())
