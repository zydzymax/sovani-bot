#!/usr/bin/env python3
"""–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ WB –∑–∞ 2025 –≥–æ–¥
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã get_real_wb_data –±–µ–∑ parallel_processor
"""

import asyncio
import json
import logging
from datetime import datetime

from real_data_reports import RealDataFinancialReports

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class DirectMonthlyAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã"""

    def __init__(self):
        self.real_reports = RealDataFinancialReports()
        self.monthly_data = {}

    async def analyze_months_direct(self):
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Å—è—Ü–µ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã get_real_wb_data"""
        logger.info("üîç –ü–†–Ø–ú–û–ô –ü–û–ú–ï–°–Ø–ß–ù–´–ô –ê–ù–ê–õ–ò–ó WB –ó–ê 2025 –ì–û–î")
        logger.info("=" * 60)

        # –ú–µ—Å—è—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        months = [
            ("2025-01-01", "2025-01-31", "–Ø–Ω–≤–∞—Ä—å"),
            ("2025-02-01", "2025-02-28", "–§–µ–≤—Ä–∞–ª—å"),
            ("2025-03-01", "2025-03-31", "–ú–∞—Ä—Ç"),
            ("2025-04-01", "2025-04-30", "–ê–ø—Ä–µ–ª—å"),
            ("2025-05-01", "2025-05-31", "–ú–∞–π"),
            ("2025-06-01", "2025-06-30", "–ò—é–Ω—å"),
            ("2025-07-01", "2025-07-31", "–ò—é–ª—å"),
            ("2025-08-01", "2025-08-31", "–ê–≤–≥—É—Å—Ç"),
            ("2025-09-01", "2025-09-26", "–°–µ–Ω—Ç—è–±—Ä—å (–¥–æ 26.09)"),
        ]

        total_revenue = 0
        total_units = 0
        monthly_results = []

        for date_from, date_to, month_name in months:
            logger.info(f"\nüìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {month_name} ({date_from} - {date_to})")

            try:
                # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ get_real_wb_data
                wb_data = await self.real_reports.get_real_wb_data(date_from, date_to)

                month_revenue = wb_data.get("revenue", 0)
                month_units = wb_data.get("units", 0)
                month_commission = wb_data.get("commission", 0)
                month_cogs = wb_data.get("cogs", 0)
                month_profit = wb_data.get("profit", 0)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                orders_stats = wb_data.get("orders_stats", {})
                sales_stats = wb_data.get("sales_stats", {})

                monthly_result = {
                    "month": month_name,
                    "date_from": date_from,
                    "date_to": date_to,
                    "revenue": month_revenue,
                    "units": month_units,
                    "commission": month_commission,
                    "cogs": month_cogs,
                    "profit": month_profit,
                    "orders_count": orders_stats.get("count", 0),
                    "orders_revenue": orders_stats.get("price_with_disc", 0),
                    "sales_count": sales_stats.get("count", 0),
                    "sales_revenue": sales_stats.get("price_with_disc", 0),
                    "buyout_rate": (
                        (sales_stats.get("count", 0) / orders_stats.get("count", 1)) * 100
                        if orders_stats.get("count", 0) > 0
                        else 0
                    ),
                }

                monthly_results.append(monthly_result)

                total_revenue += month_revenue
                total_units += month_units

                logger.info(f"‚úÖ {month_name}:")
                logger.info(f"   üí∞ –í—ã—Ä—É—á–∫–∞: {month_revenue:,.0f} ‚ÇΩ")
                logger.info(f"   üì¶ –ï–¥–∏–Ω–∏—Ü: {month_units:,.0f} —à—Ç")
                logger.info(f"   üõí –ó–∞–∫–∞–∑–æ–≤: {orders_stats.get('count', 0):,.0f}")
                logger.info(f"   ‚úÖ –ü—Ä–æ–¥–∞–∂: {sales_stats.get('count', 0):,.0f}")
                if orders_stats.get("count", 0) > 0:
                    buyout_rate = (sales_stats.get("count", 0) / orders_stats.get("count", 0)) * 100
                    logger.info(f"   üìà –í—ã–∫—É–ø: {buyout_rate:.1f}%")
                logger.info(f"   üí≥ –ö–æ–º–∏—Å—Å–∏—è: {month_commission:,.0f} ‚ÇΩ")
                logger.info(f"   üí≤ –ü—Ä–∏–±—ã–ª—å: {month_profit:,.0f} ‚ÇΩ")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {month_name}: {e}")
                monthly_result = {
                    "month": month_name,
                    "date_from": date_from,
                    "date_to": date_to,
                    "error": str(e),
                    "revenue": 0,
                    "units": 0,
                }
                monthly_results.append(monthly_result)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.monthly_data = {
            "analysis_date": datetime.now().isoformat(),
            "total_period": "2025-01-01 –¥–æ 2025-09-26",
            "total_revenue": total_revenue,
            "total_units": total_units,
            "expected_revenue": 530000,  # –û–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "discrepancy_ratio": total_revenue / 530000 if total_revenue > 0 else 0,
            "monthly_breakdown": monthly_results,
            "analysis_method": "direct_wb_calls",
        }

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê 2025 –ì–û–î:")
        logger.info(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ WB: {total_revenue:,.0f} ‚ÇΩ")
        logger.info(f"üì¶ –û–±—â–∏–µ –µ–¥–∏–Ω–∏—Ü—ã: {total_units:,.0f} —à—Ç")
        logger.info("üéØ –û–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 530,000 ‚ÇΩ")
        logger.info(f"üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {total_revenue/530000:.1f}x")
        logger.info(f"üìâ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {total_revenue - 530000:,.0f} ‚ÇΩ")

        return self.monthly_data

    def analyze_discrepancies_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π"""
        logger.info("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")
        logger.info("=" * 50)

        if not self.monthly_data:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        total_revenue = self.monthly_data["total_revenue"]
        expected = self.monthly_data["expected_revenue"]
        ratio = self.monthly_data["discrepancy_ratio"]

        logger.info(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ")
        logger.info(f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {expected:,.0f} ‚ÇΩ")
        logger.info(f"üìà –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤ {ratio:.1f} —Ä–∞–∑–∞")

        # –ü–æ–º–µ—Å—è—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        monthly_breakdown = self.monthly_data["monthly_breakdown"]
        expected_monthly = expected / 9  # –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –≤ –º–µ—Å—è—Ü

        logger.info("\nüìÖ –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê:")
        for month_data in monthly_breakdown:
            if "error" not in month_data:
                month_revenue = month_data["revenue"]
                month_ratio = month_revenue / expected_monthly if expected_monthly > 0 else 0
                percentage_of_total = (
                    (month_revenue / total_revenue) * 100 if total_revenue > 0 else 0
                )

                logger.info(
                    f"   {month_data['month']:15} | {month_revenue:>8,.0f} ‚ÇΩ | {month_ratio:>4.1f}x –æ–∂–∏–¥. | {percentage_of_total:>4.1f}% –æ—Ç –æ–±—â–µ–π"
                )

        # –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ vs –ø—Ä–æ–¥–∞–∂
        total_orders = sum(m.get("orders_count", 0) for m in monthly_breakdown if "error" not in m)
        total_sales = sum(m.get("sales_count", 0) for m in monthly_breakdown if "error" not in m)
        total_orders_revenue = sum(
            m.get("orders_revenue", 0) for m in monthly_breakdown if "error" not in m
        )
        total_sales_revenue = sum(
            m.get("sales_revenue", 0) for m in monthly_breakdown if "error" not in m
        )

        logger.info("\nüìä –ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–û–í vs –ü–†–û–î–ê–ñ:")
        logger.info(f"   üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders:,.0f} —à—Ç –Ω–∞ {total_orders_revenue:,.0f} ‚ÇΩ")
        logger.info(f"   ‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {total_sales:,.0f} —à—Ç –Ω–∞ {total_sales_revenue:,.0f} ‚ÇΩ")
        if total_orders > 0:
            overall_buyout = (total_sales / total_orders) * 100
            logger.info(f"   üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞: {overall_buyout:.1f}%")

        # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        logger.info("\nüåç –°–ï–ó–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        q1_revenue = sum(m["revenue"] for m in monthly_breakdown[:3] if "error" not in m)  # –Ø–Ω–≤-–ú–∞—Ä
        q2_revenue = sum(
            m["revenue"] for m in monthly_breakdown[3:6] if "error" not in m
        )  # –ê–ø—Ä-–ò—é–Ω
        q3_revenue = sum(
            m["revenue"] for m in monthly_breakdown[6:9] if "error" not in m
        )  # –ò—é–ª-–°–µ–Ω

        logger.info(f"   Q1 (–Ø–Ω–≤-–ú–∞—Ä): {q1_revenue:,.0f} ‚ÇΩ ({(q1_revenue/total_revenue)*100:.1f}%)")
        logger.info(f"   Q2 (–ê–ø—Ä-–ò—é–Ω): {q2_revenue:,.0f} ‚ÇΩ ({(q2_revenue/total_revenue)*100:.1f}%)")
        logger.info(f"   Q3 (–ò—é–ª-–°–µ–Ω): {q3_revenue:,.0f} ‚ÇΩ ({(q3_revenue/total_revenue)*100:.1f}%)")

        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_monthly_revenue = total_revenue / 9
        avg_monthly_units = self.monthly_data["total_units"] / 9

        logger.info("\nüìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        logger.info(f"   üí∞ –°—Ä–µ–¥–Ω—è—è –≤—ã—Ä—É—á–∫–∞ –≤ –º–µ—Å—è—Ü: {avg_monthly_revenue:,.0f} ‚ÇΩ")
        logger.info(f"   üì¶ –°—Ä–µ–¥–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –≤ –º–µ—Å—è—Ü: {avg_monthly_units:,.0f} —à—Ç")

        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
        logger.info("\nü§î –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")
        logger.info("1Ô∏è‚É£ –ú–ï–¢–û–î–ò–ö–ê –ü–û–î–°–ß–ï–¢–ê:")
        logger.info("   ‚úÖ –°–∏—Å—Ç–µ–º–∞: priceWithDisc (—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏)")
        logger.info("   ‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫: Sales API (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∫—É–ø—ã)")
        logger.info("   ‚úÖ –§–∏–ª—å—Ç—Ä: isRealization = true")

        logger.info("2Ô∏è‚É£ –ü–ï–†–ò–û–î –ê–ù–ê–õ–ò–ó–ê:")
        logger.info("   üìÖ –°–∏—Å—Ç–µ–º–Ω—ã–π: 01.01.2025 - 26.09.2025 (268 –¥–Ω–µ–π)")
        logger.info("   üí≠ –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?")

        logger.info("3Ô∏è‚É£ –ü–õ–ê–¢–§–û–†–ú–´:")
        logger.info("   üü£ –°–∏—Å—Ç–µ–º–∞: —Ç–æ–ª—å–∫–æ Wildberries")
        logger.info("   üí≠ –í–æ–∑–º–æ–∂–Ω–æ –æ–∂–∏–¥–∞–ª—Å—è WB + Ozon?")

        logger.info("4Ô∏è‚É£ –¢–ò–ü –î–ê–ù–ù–´–•:")
        logger.info(f"   üìä –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {total_revenue:,.0f} ‚ÇΩ —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏")
        logger.info("   üí≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª: 530,000 ‚ÇΩ")
        logger.info(f"   üìà –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤ {ratio:.1f} —Ä–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")

        return {
            "total_revenue": total_revenue,
            "expected_revenue": expected,
            "discrepancy_ratio": ratio,
            "total_orders": total_orders,
            "total_sales": total_sales,
            "overall_buyout_rate": (total_sales / total_orders) * 100 if total_orders > 0 else 0,
            "q1_revenue": q1_revenue,
            "q2_revenue": q2_revenue,
            "q3_revenue": q3_revenue,
        }

    def save_detailed_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        filename = f"monthly_analysis_direct_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = f"/root/sovani_bot/reports/{filename}"

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(self.monthly_data, f, ensure_ascii=False, indent=2)

            logger.info(f"üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = DirectMonthlyAnalyzer()

    # –ü—Ä–æ–≤–æ–¥–∏–º –ø—Ä—è–º–æ–π –ø–æ–º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    results = await analyzer.analyze_months_direct()

    # –ü—Ä–æ–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    discrepancy_analysis = analyzer.analyze_discrepancies_detailed()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = analyzer.save_detailed_report()

    logger.info("\nüéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    logger.info(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")

    return results, discrepancy_analysis


if __name__ == "__main__":
    results, analysis = asyncio.run(main())
