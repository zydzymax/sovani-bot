"""–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤"""

import asyncio
import logging
import time
from collections import defaultdict
from dataclasses import dataclass

logger = logging.getLogger(__name__)


@dataclass
class RateLimitConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è API"""

    requests_per_minute: int
    min_interval_ms: int  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    burst_limit: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ "burst" —Ä–µ–∂–∏–º–µ
    retry_delay_base: int = 60  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ
    retry_delay_multiplier: int = 30  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫


class RateLimiter:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –ª–∏–º–∏—Ç–∞–º–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤"""

    # –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ü–ï–†–ï–°–ú–û–¢–†–ï–ù–ù–´–ï –õ–ò–ú–ò–¢–´ –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    CONFIGS = {
        "wb_general": RateLimitConfig(
            requests_per_minute=45,  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 45 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            min_interval_ms=1500,  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: 1.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            burst_limit=4,  # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º burst –¥–æ 4
            retry_delay_base=120,  # –ö–†–ò–¢–ò–ß–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ 429
            retry_delay_multiplier=60,  # –ö–†–ò–¢–ò–ß–ù–û: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö 429
        ),
        "wb_advertising": RateLimitConfig(
            requests_per_minute=5,  # –ö–†–ò–¢–ò–ß–ù–û: –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –ª–∏–º–∏—Ç (–Ω–∞–π–¥–µ–Ω–æ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏)
            min_interval_ms=60000,  # –ö–†–ò–¢–ò–ß–ù–û: 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏!
            burst_limit=1,  # –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–ª—å–∫–æ 1 –∑–∞–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑
            retry_delay_base=300,  # –ö–†–ò–¢–ò–ß–ù–û: 5 –º–∏–Ω—É—Ç –±–∞–∑–æ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ 429
            retry_delay_multiplier=180,  # –ö–†–ò–¢–ò–ß–ù–û: 3 –º–∏–Ω—É—Ç—ã –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É
        ),
        "ozon_general": RateLimitConfig(
            requests_per_minute=120,  # –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∏–∂–µ–Ω —Å 300 –¥–æ 120 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            min_interval_ms=500,  # –ö–†–ò–¢–ò–ß–ù–û: 0.5 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è Ozon
            burst_limit=5,  # –ö–†–ò–¢–ò–ß–ù–û: –£–º–µ—Ä–µ–Ω–Ω—ã–π burst –ª–∏–º–∏—Ç
            retry_delay_base=90,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ 429
            retry_delay_multiplier=30,  # –£–º–µ—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–∞—Ö
        ),
        "ozon_performance": RateLimitConfig(
            requests_per_minute=120,  # –ö–†–ò–¢–ò–ß–ù–û: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ozon_general
            min_interval_ms=500,
            burst_limit=5,
        ),
    }

    def __init__(self):
        self.last_request_times: dict[str, float] = {}
        self.request_counts: dict[str, list] = defaultdict(list)
        self.burst_tokens: dict[str, int] = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è burst —Ç–æ–∫–µ–Ω–æ–≤
        for api_name, config in self.CONFIGS.items():
            self.burst_tokens[api_name] = config.burst_limit

    async def wait_for_rate_limit(self, api_name: str) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ API

        Args:
            api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API ('wb_general', 'wb_advertising', 'ozon_general', etc.)

        """
        if api_name not in self.CONFIGS:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π API: {api_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ª–∏–º–∏—Ç—ã")
            api_name = "wb_general"

        config = self.CONFIGS[api_name]
        current_time = time.time()

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        minute_ago = current_time - 60
        self.request_counts[api_name] = [t for t in self.request_counts[api_name] if t > minute_ago]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        if len(self.request_counts[api_name]) >= config.requests_per_minute:
            wait_time = 60 - (current_time - self.request_counts[api_name][0])
            if wait_time > 0:
                logger.info(
                    f"{api_name}: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {config.requests_per_minute} req/min, –∂–¥–µ–º {wait_time:.1f}—Å"
                )
                await asyncio.sleep(wait_time)
                current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if api_name in self.last_request_times:
            time_since_last = (current_time - self.last_request_times[api_name]) * 1000
            min_interval = config.min_interval_ms

            if time_since_last < min_interval:
                wait_time = (min_interval - time_since_last) / 1000
                logger.debug(f"{api_name}: –ñ–¥–µ–º {wait_time:.2f}—Å (min interval {min_interval}ms)")
                await asyncio.sleep(wait_time)
                current_time = time.time()

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ burst —Ç–æ–∫–µ–Ω–∞–º–∏
        if self.burst_tokens[api_name] <= 0:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º burst —Ç–æ–∫–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –∞ –Ω–µ –æ–∂–∏–¥–∞–Ω–∏–µ–º
            time_since_last = current_time - self.last_request_times.get(api_name, 0)

            if time_since_last >= (config.min_interval_ms / 1000):
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ—à–µ–¥—à–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
                tokens_to_restore = min(
                    config.burst_limit, int(time_since_last / (config.min_interval_ms / 1000))
                )
                self.burst_tokens[api_name] = min(config.burst_limit, tokens_to_restore)
                logger.debug(f"{api_name}: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {tokens_to_restore} burst —Ç–æ–∫–µ–Ω–æ–≤")
            else:
                # –ñ–¥–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
                wait_time = (config.min_interval_ms / 1000) - time_since_last
                logger.debug(f"{api_name}: –ñ–¥–µ–º {wait_time:.2f}—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è burst —Ç–æ–∫–µ–Ω–æ–≤")
                await asyncio.sleep(wait_time)
                self.burst_tokens[api_name] = 1

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        self.last_request_times[api_name] = current_time
        self.request_counts[api_name].append(current_time)
        self.burst_tokens[api_name] -= 1

        logger.debug(f"{api_name}: –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω. Burst —Ç–æ–∫–µ–Ω–æ–≤: {self.burst_tokens[api_name]}")

    async def handle_429_error(self, api_name: str, attempt: int = 0) -> None:
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ 429 –æ—à–∏–±–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏ –∞–≤—Ç–æ–ø–∞—É–∑–æ–π

        Args:
            api_name: –ù–∞–∑–≤–∞–Ω–∏–µ API
            attempt: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ (0-based)

        """
        config = self.CONFIGS.get(api_name, self.CONFIGS["wb_general"])

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º burst —Ç–æ–∫–µ–Ω—ã
        self.burst_tokens[api_name] = 0

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤
        self.request_counts[api_name] = []

        # –ö–†–ò–¢–ò–ß–ù–û: –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2^attempt
        base_wait = config.retry_delay_base
        exponential_multiplier = min(2**attempt, 8)  # –ú–∞–∫—Å–∏–º—É–º 8x
        wait_time = base_wait * exponential_multiplier + (attempt * config.retry_delay_multiplier)

        # –ö–†–ò–¢–ò–ß–ù–û: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 20 –º–∏–Ω—É—Ç
        wait_time = min(wait_time, 1200)

        logger.error(
            f"üö® {api_name}: 429 Too Many Requests, —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ {wait_time}—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}, –º–Ω–æ–∂–∏—Ç–µ–ª—å {exponential_multiplier}x)"
        )

        # –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
        if attempt >= 3:
            extra_wait = 300  # +5 –º–∏–Ω—É—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 3+ –ø–æ–ø—ã—Ç–∫–∏
            logger.error(f"‚ö†Ô∏è {api_name}: –ß–∞—Å—Ç—ã–µ 429 –æ—à–∏–±–∫–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ {extra_wait}—Å")
            wait_time += extra_wait

        await asyncio.sleep(wait_time)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º burst —Ç–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        self.burst_tokens[api_name] = config.burst_limit

    def get_api_stats(self, api_name: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        current_time = time.time()
        minute_ago = current_time - 60

        recent_requests = [t for t in self.request_counts[api_name] if t > minute_ago]

        config = self.CONFIGS.get(api_name, self.CONFIGS["wb_general"])

        return {
            "api_name": api_name,
            "requests_last_minute": len(recent_requests),
            "requests_per_minute_limit": config.requests_per_minute,
            "burst_tokens_remaining": self.burst_tokens.get(api_name, 0),
            "burst_limit": config.burst_limit,
            "last_request_time": self.last_request_times.get(api_name),
            "min_interval_ms": config.min_interval_ms,
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä rate limiter
rate_limiter = RateLimiter()


async def with_rate_limit(api_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è rate limiting –∫ API –∑–∞–ø—Ä–æ—Å–∞–º

    Usage:
        await with_rate_limit('wb_advertising')
        # –≤–∞—à API –∑–∞–ø—Ä–æ—Å –∑–¥–µ—Å—å
    """
    await rate_limiter.wait_for_rate_limit(api_name)


def get_rate_limit_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º API"""
    return {
        api_name: rate_limiter.get_api_stats(api_name) for api_name in rate_limiter.CONFIGS.keys()
    }
