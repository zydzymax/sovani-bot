"""Tests for review classifier."""

from __future__ import annotations

from app.domain.reviews.classifier import classify_review


def test_typical_positive_empty_text():
    """5-star review with no text ‚Üí typical_positive."""
    result = classify_review(rating=5, text="", has_media=False)
    assert result == "typical_positive"


def test_typical_positive_short_stamp():
    """5-star review with '—Å—É–ø–µ—Ä' ‚Üí typical_positive."""
    result = classify_review(rating=5, text="–°—É–ø–µ—Ä!", has_media=False)
    assert result == "typical_positive"


def test_typical_negative_short_stamp():
    """1-star review with '–º–∞–ª–æ–º–µ—Ä–∏—Ç' ‚Üí typical_negative."""
    result = classify_review(rating=1, text="–ú–∞–ª–æ–º–µ—Ä–∏—Ç", has_media=False)
    assert result == "typical_negative"


def test_typical_neutral():
    """3-star review with short text ‚Üí typical_neutral."""
    result = classify_review(rating=3, text="–ù–æ—Ä–º–∞–ª—å–Ω–æ", has_media=False)
    assert result == "typical_neutral"


def test_atypical_has_media():
    """Any review with media ‚Üí atypical."""
    result = classify_review(rating=5, text="–°—É–ø–µ—Ä", has_media=True)
    assert result == "atypical"


def test_atypical_long_text():
    """Long text (>40 chars) ‚Üí atypical."""
    result = classify_review(
        rating=4,
        text="–û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∫–∞—á–µ—Å—Ç–≤–æ —Ç–∫–∞–Ω–∏ –∏ –±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        has_media=False,
    )
    assert result == "atypical"


def test_typical_positive_4stars():
    """4-star with short text ‚Üí typical_positive."""
    result = classify_review(rating=4, text="–•–æ—Ä–æ—à–æ", has_media=False)
    assert result == "typical_positive"


def test_typical_negative_2stars():
    """2-star with short negative ‚Üí typical_negative."""
    result = classify_review(rating=2, text="–ü–ª–æ—Ö–æ", has_media=False)
    assert result == "typical_negative"


def test_atypical_mixed_signals():
    """Short positive text with low rating ‚Üí might be atypical."""
    # With only 1-2 words, should still be typical_negative based on rating
    result = classify_review(rating=1, text="–°—É–ø–µ—Ä", has_media=False)
    # This is edge case - positive word with negative rating
    # Based on our logic, short text + rating=1 ‚Üí typical_negative
    assert result in {"typical_negative", "atypical"}


def test_empty_text_neutral_rating():
    """Empty text with 3 stars ‚Üí typical_neutral."""
    result = classify_review(rating=3, text="", has_media=False)
    assert result == "typical_neutral"


def test_emoji_only():
    """Emoji-only review ‚Üí typical based on rating."""
    result = classify_review(rating=5, text="üëç", has_media=False)
    assert result == "typical_positive"


def test_multiple_short_words():
    """4 words, positive rating ‚Üí typical_positive."""
    result = classify_review(rating=5, text="–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ —Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ", has_media=False)
    # "–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ —Å–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ" = 4 words, should be typical
    assert result == "typical_positive"
