"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
–°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤, –≤–æ–ø—Ä–æ—Å–æ–≤, —à–∞–±–ª–æ–Ω–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import sqlite3
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
import json

logger = logging.getLogger(__name__)

DB_PATH = 'sovani_bot.db'


def get_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∞–º
    return conn


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reviews (
                id TEXT PRIMARY KEY,
                sku TEXT NOT NULL,
                text TEXT,
                rating INTEGER NOT NULL,
                has_media BOOLEAN DEFAULT FALSE,
                answer TEXT,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                answered BOOLEAN DEFAULT FALSE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS questions (
                id TEXT PRIMARY KEY,
                sku TEXT NOT NULL,
                text TEXT NOT NULL,
                answer TEXT,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                answered BOOLEAN DEFAULT FALSE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS templates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                stars INTEGER NOT NULL,
                has_text BOOLEAN DEFAULT FALSE,
                has_media BOOLEAN DEFAULT FALSE,
                template_text TEXT NOT NULL,
                description TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ P&L –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pnl (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                period_date DATE NOT NULL,
                date_from DATE NOT NULL,
                date_to DATE NOT NULL,
                sku TEXT,  -- NULL –¥–ª—è –æ–±—â–∏—Ö –∏—Ç–æ–≥–æ–≤, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π SKU –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
                platform TEXT NOT NULL,  -- 'WB', 'OZON', 'TOTAL'
                revenue REAL DEFAULT 0,  -- –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞ (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è Ozon)
                units_sold INTEGER DEFAULT 0,
                cogs REAL DEFAULT 0,
                profit REAL DEFAULT 0,
                ad_costs REAL DEFAULT 0,
                -- –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Ozon
                orders_revenue REAL DEFAULT 0,  -- –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤
                orders_units INTEGER DEFAULT 0,  -- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
                commission REAL DEFAULT 0,      -- –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                promo_costs REAL DEFAULT 0,     -- –ü—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
                returns_cost REAL DEFAULT 0,    -- –í–æ–∑–≤—Ä–∞—Ç—ã
                logistics_costs REAL DEFAULT 0, -- –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∞
                other_costs REAL DEFAULT 0,     -- –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
                transaction_count INTEGER DEFAULT 0,  -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                operation_breakdown TEXT,       -- JSON —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS replenishment (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                sku TEXT NOT NULL,
                platform TEXT NOT NULL,  -- 'WB', 'OZON'
                warehouse TEXT,  -- –¥–ª—è Ozon —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∫–ª–∞–¥
                size TEXT,  -- –¥–ª—è WB —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä
                current_stock INTEGER DEFAULT 0,
                daily_sales REAL DEFAULT 0,
                cover_days REAL DEFAULT 0,
                recommended_qty INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        _populate_default_templates(cursor, conn)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()


def _populate_default_templates(cursor, conn):
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
    cursor.execute('SELECT COUNT(*) FROM templates')
    if cursor.fetchone()[0] > 0:
        return  # –®–∞–±–ª–æ–Ω—ã —É–∂–µ –µ—Å—Ç—å
    
    default_templates = [
        # 5 –∑–≤–µ–∑–¥ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        (5, False, False, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É! üåü –û—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç–æ–≤–∞—Ä –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è! –ö–æ–º–∞–Ω–¥–∞ SoVAni –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚ù§Ô∏è"),
        # 5 –∑–≤–µ–∑–¥ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Å —Ñ–æ—Ç–æ
        (5, False, True, "–í–∞—É! –°–ø–∞—Å–∏–±–æ –∑–∞ 5 –∑–≤–µ–∑–¥ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Ñ–æ—Ç–æ! üì∏‚ú® –í—ã –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! –ö–æ–º–∞–Ω–¥–∞ SoVAni –æ—Ç –≤—Å–µ–π –¥—É—à–∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –≤–∞—Å! ü•∞"),
        # 4 –∑–≤–µ–∑–¥—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞  
        (4, False, False, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ö–æ—Ä–æ—à—É—é –æ—Ü–µ–Ω–∫—É! üòä –†–∞–¥—ã, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è. –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ! –ö–æ–º–∞–Ω–¥–∞ SoVAni üíô"),
        # 4 –∑–≤–µ–∑–¥—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Å —Ñ–æ—Ç–æ
        (4, False, True, "–°–ø–∞—Å–∏–±–æ –∑–∞ 4 –∑–≤–µ–∑–¥—ã –∏ –æ—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! üì∑ –í—ã–≥–ª—è–¥–∏—Ç –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ö–æ–º–∞–Ω–¥–∞ SoVAni —Ü–µ–Ω–∏—Ç –≤–∞—à –≤—ã–±–æ—Ä! ‚≠ê"),
        # 3 –∑–≤–µ–∑–¥—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        (3, False, False, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å–ª—É–∂–∏—Ç –≤–∞–º —Ö–æ—Ä–æ—à–æ. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! –ö–æ–º–∞–Ω–¥–∞ SoVAni ü§ù"),
        # 2 –∑–≤–µ–∑–¥—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        (2, False, False, "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É. –ñ–∞–ª—å, —á—Ç–æ –Ω–µ –≤—Å–µ –∏–¥–µ–∞–ª—å–Ω–æ. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - –ø–∏—à–∏—Ç–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º! –ö–æ–º–∞–Ω–¥–∞ SoVAni —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É üí™"),
        # 1 –∑–≤–µ–∑–¥–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        (1, False, False, "–û—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω—ã, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª –æ–∂–∏–¥–∞–Ω–∏–π üòî –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ - —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –∏ –ø–æ–º–æ–∂–µ–º! –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –≤–∞–∂–µ–Ω –¥–ª—è SoVAni üôè"),
    ]
    
    cursor.executemany(
        'INSERT INTO templates (stars, has_text, has_media, template_text) VALUES (?, ?, ?, ?)',
        default_templates
    )
    conn.commit()
    logger.info("–ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏
def save_review(review_data: Dict[str, Any]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO reviews 
            (id, sku, text, rating, has_media, answer, date, answered)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            review_data['id'],
            review_data['sku'],
            review_data['text'],
            review_data['rating'],
            review_data['has_media'],
            review_data['answer'],
            review_data['date'],
            review_data['answered']
        ))
        conn.commit()
        logger.info(f"–û—Ç–∑—ã–≤ {review_data['id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return False
    finally:
        conn.close()


def get_review(review_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ ID"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM reviews WHERE id = ?', (review_id,))
        row = cursor.fetchone()
        return dict(row) if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return None
    finally:
        conn.close()


def mark_review_answered(review_id: str) -> bool:
    """–û—Ç–º–µ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('UPDATE reviews SET answered = TRUE WHERE id = ?', (review_id,))
        conn.commit()
        logger.info(f"–û—Ç–∑—ã–≤ {review_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return False
    finally:
        conn.close()


def review_exists(review_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM reviews WHERE id = ?', (review_id,))
        return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")
        return False
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
def save_question(question_data: Dict[str, Any]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO questions 
            (id, sku, text, answer, date, answered)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            question_data['id'],
            question_data['sku'],
            question_data['text'],
            question_data['answer'],
            question_data['date'],
            question_data['answered']
        ))
        conn.commit()
        logger.info(f"–í–æ–ø—Ä–æ—Å {question_data['id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return False
    finally:
        conn.close()


def get_question(question_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ ID"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM questions WHERE id = ?', (question_id,))
        row = cursor.fetchone()
        return dict(row) if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return None
    finally:
        conn.close()


def mark_question_answered(question_id: str) -> bool:
    """–û—Ç–º–µ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–≥–æ"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('UPDATE questions SET answered = TRUE WHERE id = ?', (question_id,))
        conn.commit()
        logger.info(f"–í–æ–ø—Ä–æ—Å {question_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return False
    finally:
        conn.close()


def question_exists(question_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM questions WHERE id = ?', (question_id,))
        return cursor.fetchone() is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return False
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
def get_template(stars: int, has_text: bool, has_media: bool) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT template_text FROM templates 
            WHERE stars = ? AND has_text = ? AND has_media = ?
            LIMIT 1
        ''', (stars, has_text, has_media))
        row = cursor.fetchone()
        return row['template_text'] if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        return None
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å P&L –¥–∞–Ω–Ω—ã–º–∏
def save_pnl_data(pnl_data: List[Dict[str, Any]], date_from: str = None, date_to: str = None) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö P&L –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º"""
    conn = get_connection()
    try:
        cursor = conn.cursor()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        today = datetime.now().date()
        period_date_from = datetime.strptime(date_from, '%Y-%m-%d').date() if date_from else today
        period_date_to = datetime.strptime(date_to, '%Y-%m-%d').date() if date_to else today

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        cursor.execute('DELETE FROM pnl WHERE date_from = ? AND date_to = ?',
                      (period_date_from, period_date_to))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        for data in pnl_data:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º operation_breakdown –≤ JSON
            operation_breakdown_json = json.dumps(data.get('operation_breakdown', {})) if data.get('operation_breakdown') else None

            cursor.execute('''
                INSERT INTO pnl
                (period_date, date_from, date_to, sku, platform, revenue, units_sold, cogs, profit,
                 ad_costs, orders_revenue, orders_units, commission, promo_costs, returns_cost,
                 logistics_costs, other_costs, transaction_count, operation_breakdown)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                today,  # –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                period_date_from,  # –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
                period_date_to,    # –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
                data.get('sku'),
                data['platform'],
                data['revenue'],
                data['units_sold'],
                data['cogs'],
                data['profit'],
                data.get('ad_costs', 0),
                data.get('orders_revenue', 0),
                data.get('orders_units', 0),
                data.get('commission', 0),
                data.get('promo_costs', 0),
                data.get('returns_cost', 0),
                data.get('logistics_costs', 0),
                data.get('other_costs', 0),
                data.get('transaction_count', 0),
                operation_breakdown_json
            ))

        conn.commit()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(pnl_data)} –∑–∞–ø–∏—Å–µ–π P&L –∑–∞ –ø–µ—Ä–∏–æ–¥ {period_date_from} - {period_date_to}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è P&L: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
def save_replenishment_data(replenishment_data: List[Dict[str, Any]]) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        cursor.execute('DELETE FROM replenishment')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for data in replenishment_data:
            cursor.execute('''
                INSERT INTO replenishment 
                (sku, platform, warehouse, size, current_stock, daily_sales, 
                 cover_days, recommended_qty)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                data['sku'],
                data['platform'],
                data.get('warehouse'),
                data.get('size'),
                data['current_stock'],
                data['daily_sales'],
                data['cover_days'],
                data['recommended_qty']
            ))
        
        conn.commit()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(replenishment_data)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()


def get_latest_pnl() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö P&L –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM pnl
            WHERE period_date = (SELECT MAX(period_date) FROM pnl)
            ORDER BY platform, sku
        ''')
        rows = cursor.fetchall()
        return [dict(row) for row in rows]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è P&L: {e}")
        return []
    finally:
        conn.close()


def get_cumulative_pnl(days: int = 30) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞ P&L –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    conn = get_connection()
    try:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
        cursor.execute('''
            SELECT platform,
                   SUM(revenue) as total_revenue,
                   SUM(units_sold) as total_units,
                   SUM(cogs) as total_cogs,
                   SUM(profit) as total_profit,
                   SUM(ad_costs) as total_ad_costs,
                   SUM(orders_revenue) as total_orders_revenue,
                   SUM(orders_units) as total_orders_units,
                   SUM(commission) as total_commission,
                   SUM(promo_costs) as total_promo_costs,
                   SUM(returns_cost) as total_returns_cost,
                   SUM(logistics_costs) as total_logistics_costs,
                   SUM(other_costs) as total_other_costs,
                   COUNT(*) as records_count,
                   MIN(date_from) as earliest_date,
                   MAX(date_to) as latest_date
            FROM pnl
            WHERE date_from >= date('now', '-{} days')
              AND sku IS NULL  -- —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –∏—Ç–æ–≥–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            GROUP BY platform
            ORDER BY platform
        '''.format(days))

        rows = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        result = {
            'period_days': days,
            'platforms': {},
            'total': {
                'revenue': 0, 'units': 0, 'cogs': 0, 'profit': 0,
                'ad_costs': 0, 'orders_revenue': 0, 'orders_units': 0,
                'commission': 0, 'promo_costs': 0, 'returns_cost': 0,
                'logistics_costs': 0, 'other_costs': 0, 'records_count': 0
            }
        }

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        for row in rows:
            platform = row['platform']
            platform_data = dict(row)

            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞ –¥–ª—è Ozon
            if platform == 'OZON' and platform_data['total_orders_revenue'] > 0:
                buyout_rate = (platform_data['total_revenue'] / platform_data['total_orders_revenue']) * 100
                platform_data['buyout_rate'] = buyout_rate
            else:
                platform_data['buyout_rate'] = 0

            result['platforms'][platform] = platform_data

            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É –∏—Ç–æ–≥—É
            result['total']['revenue'] += platform_data['total_revenue']
            result['total']['units'] += platform_data['total_units']
            result['total']['cogs'] += platform_data['total_cogs']
            result['total']['profit'] += platform_data['total_profit']
            result['total']['ad_costs'] += platform_data['total_ad_costs']
            result['total']['orders_revenue'] += platform_data['total_orders_revenue']
            result['total']['orders_units'] += platform_data['total_orders_units']
            result['total']['commission'] += platform_data['total_commission']
            result['total']['promo_costs'] += platform_data['total_promo_costs']
            result['total']['returns_cost'] += platform_data['total_returns_cost']
            result['total']['logistics_costs'] += platform_data['total_logistics_costs']
            result['total']['other_costs'] += platform_data['total_other_costs']
            result['total']['records_count'] += platform_data['records_count']

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        if rows:
            cursor.execute('''
                SELECT MIN(date_from) as earliest_date, MAX(date_to) as latest_date
                FROM pnl
                WHERE date_from >= date('now', '-{} days')
            '''.format(days))

            period_info = cursor.fetchone()
            result['period_from'] = period_info['earliest_date']
            result['period_to'] = period_info['latest_date']

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥ P&L –∑–∞ {days} –¥–Ω–µ–π")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞ P&L: {e}")
        return {'platforms': {}, 'total': {}, 'period_days': days}
    finally:
        conn.close()


def get_pnl_history(days: int = 7) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ P&L –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT date_from, date_to, platform,
                   revenue, units_sold, profit, ad_costs,
                   orders_revenue, orders_units, commission,
                   promo_costs, returns_cost, logistics_costs
            FROM pnl
            WHERE date_from >= date('now', '-{} days')
              AND sku IS NULL  -- —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
            ORDER BY date_from DESC, platform
        '''.format(days))

        rows = cursor.fetchall()
        return [dict(row) for row in rows]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ P&L: {e}")
        return []
    finally:
        conn.close()


def get_replenishment_recommendations() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM replenishment 
            WHERE recommended_qty > 0
            ORDER BY platform, sku, size, warehouse
        ''')
        rows = cursor.fetchall()
        return [dict(row) for row in rows]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return []
    finally:
        conn.close()


# –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_latest_reviews(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT * FROM reviews 
            ORDER BY date DESC 
            LIMIT ?
        ''', (limit,))
        rows = cursor.fetchall()
        return [dict(row) for row in rows]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {e}")
        return []
    finally:
        conn.close()


def cleanup_old_data(days: int = 30):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
    conn = get_connection()
    try:
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã
        cursor.execute('''
            DELETE FROM reviews 
            WHERE answered = TRUE AND date < datetime('now', '-{} days')
        '''.format(days))
        
        cursor.execute('''
            DELETE FROM questions 
            WHERE answered = TRUE AND date < datetime('now', '-{} days')
        '''.format(days))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ P&L –¥–∞–Ω–Ω—ã–µ
        cursor.execute('''
            DELETE FROM pnl 
            WHERE period_date < date('now', '-{} days')
        '''.format(days))
        
        conn.commit()
        logger.info(f"–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()