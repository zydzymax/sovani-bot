#!/usr/bin/env python3
"""–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (–≥–æ–¥) —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –≤ Telegram
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —á–∞–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–∏–º–∏—Ç–∞–º API
"""

import asyncio
import logging
from datetime import datetime
from typing import Any

from aiogram import types
from real_data_reports import RealDataFinancialReports

from api_chunking import APIChunker

logger = logging.getLogger(__name__)


class LongPeriodProcessor:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""

    def __init__(self):
        self.reports = RealDataFinancialReports()

    async def process_year_with_progress(
        self,
        date_from: str,
        date_to: str,
        progress_message: types.Message,
        max_delays: dict[str, float] = None,
    ) -> dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Telegram

        Args:
            date_from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            date_to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            progress_message: –°–æ–æ–±—â–µ–Ω–∏–µ Telegram –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            max_delays: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ç–∏–ø–∞–º API

        Returns:
            –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥

        """
        try:
            start_date = datetime.strptime(date_from, "%Y-%m-%d")
            end_date = datetime.strptime(date_to, "%Y-%m-%d")
            period_days = (end_date - start_date).days

            logger.info(
                f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ë–û–õ–¨–®–û–ì–û –ø–µ—Ä–∏–æ–¥–∞: {period_days} –¥–Ω–µ–π ({date_from} - {date_to})"
            )

            await self._update_progress(
                progress_message,
                f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_days} –¥–Ω–µ–π\\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Üí {date_to}\\n\\n"
                f"‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ä–∞–∑–±–∏–≤–∫—É –ø–µ—Ä–∏–æ–¥–∞...",
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–±–∏–≤–∫–∏
            chunks_wb = APIChunker.chunk_date_range(date_from, date_to, "wb_sales")
            chunks_ozon = APIChunker.chunk_date_range(date_from, date_to, "ozon_fbo")

            total_chunks = len(chunks_wb) + len(chunks_ozon)

            await self._update_progress(
                progress_message,
                f"üìä –ü–ª–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏:\\n"
                f"‚Ä¢ WB –¥–∞–Ω–Ω—ã–µ: {len(chunks_wb)} –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ ~90 –¥–Ω–µ–π\\n"
                f"‚Ä¢ Ozon –¥–∞–Ω–Ω—ã–µ: {len(chunks_ozon)} –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ ~30 –¥–Ω–µ–π\\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {total_chunks}\\n\\n"
                f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...",
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WB –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞–Ω–∫–∞–º
            wb_aggregated = await self._process_wb_chunks(chunks_wb, progress_message, total_chunks)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Ozon –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞–Ω–∫–∞–º
            ozon_aggregated = await self._process_ozon_chunks(
                chunks_ozon, progress_message, total_chunks, len(chunks_wb)
            )

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
            await self._update_progress(
                progress_message,
                f"üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\\n"
                f"‚úÖ WB: {wb_aggregated.get('orders_stats', {}).get('count', 0)} –∑–∞–∫–∞–∑–æ–≤, {wb_aggregated.get('sales_stats', {}).get('count', 0)} –ø—Ä–æ–¥–∞–∂\\n"
                f"‚úÖ Ozon: {ozon_aggregated.get('units', 0)} –æ–ø–µ—Ä–∞—Ü–∏–π\\n\\n"
                f"‚ö° –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –∏—Ç–æ–≥–∏...",
            )

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            final_result = self._aggregate_results(
                wb_aggregated, ozon_aggregated, date_from, date_to
            )

            await self._update_progress(
                progress_message,
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\\n\\n"
                f"üìä **–ò–¢–û–ì–ò –∑–∞ {period_days} –¥–Ω–µ–π:**\\n"
                f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {final_result.get('total_revenue', 0):,.0f} ‚ÇΩ\\n"
                f"üì¶ –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: {final_result.get('total_units', 0):,}\\n"
                f"üéØ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {final_result.get('net_profit', 0):,.0f} ‚ÇΩ\\n\\n"
                f"üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...",
            )

            return final_result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
            await self._update_progress(progress_message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}...")
            raise

    async def _process_wb_chunks(
        self, chunks: list[tuple], progress_message: types.Message, total_chunks: int
    ) -> dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WB –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞–Ω–∫–∞–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        wb_orders_all = []
        wb_sales_all = []
        processed = 0

        for i, (chunk_from, chunk_to) in enumerate(chunks, 1):
            try:
                await self._update_progress(
                    progress_message,
                    f"üîÑ WB –¥–∞–Ω–Ω—ã–µ {i}/{len(chunks)}\\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {chunk_from} ‚Üí {chunk_to}\\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {int(processed/total_chunks*100)}%\\n\\n"
                    f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–æ–¥–∞–∂–∏...",
                )

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
                wb_data = await self.reports.get_real_wb_data(chunk_from, chunk_to)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                orders_stats = wb_data.get("orders_stats", {})
                sales_stats = wb_data.get("sales_stats", {})

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∞–Ω–∫–∞
                logger.info(
                    f"WB —á–∞–Ω–∫ {i}: –∑–∞–∫–∞–∑–æ–≤ {orders_stats.get('count', 0)}, –ø—Ä–æ–¥–∞–∂ {sales_stats.get('count', 0)}"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
                if orders_stats.get("count", 0) > 0:
                    wb_orders_all.extend([orders_stats])
                if sales_stats.get("count", 0) > 0:
                    wb_sales_all.extend([sales_stats])

                processed += 1

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                if i < len(chunks):
                    await asyncio.sleep(10.0)  # 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –±–æ–ª—å—à–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ WB

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ WB —á–∞–Ω–∫–µ {i} ({chunk_from}-{chunk_to}): {e}")
                processed += 1
                continue

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º WB –¥–∞–Ω–Ω—ã–µ
        return self._aggregate_wb_data(wb_orders_all, wb_sales_all)

    async def _process_ozon_chunks(
        self,
        chunks: list[tuple],
        progress_message: types.Message,
        total_chunks: int,
        wb_chunks_processed: int,
    ) -> dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Ozon –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞–Ω–∫–∞–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        ozon_data_all = []
        processed = wb_chunks_processed

        for i, (chunk_from, chunk_to) in enumerate(chunks, 1):
            try:
                await self._update_progress(
                    progress_message,
                    f"üîÑ Ozon –¥–∞–Ω–Ω—ã–µ {i}/{len(chunks)}\\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {chunk_from} ‚Üí {chunk_to}\\n"
                    f"üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {int(processed/total_chunks*100)}%\\n\\n"
                    f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...",
                )

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
                ozon_data = await self.reports.get_real_ozon_sales(chunk_from, chunk_to)

                logger.info(
                    f"Ozon —á–∞–Ω–∫ {i}: –µ–¥–∏–Ω–∏—Ü {ozon_data.get('units', 0)}, –≤—ã—Ä—É—á–∫–∞ {ozon_data.get('revenue', 0)}"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
                if ozon_data.get("units", 0) > 0:
                    ozon_data_all.append(ozon_data)

                processed += 1

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                if i < len(chunks):
                    await asyncio.sleep(5.0)  # 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏ Ozon

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ Ozon —á–∞–Ω–∫–µ {i} ({chunk_from}-{chunk_to}): {e}")
                processed += 1
                continue

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º Ozon –¥–∞–Ω–Ω—ã–µ
        return self._aggregate_ozon_data(ozon_data_all)

    def _aggregate_wb_data(self, orders_list: list[dict], sales_list: list[dict]) -> dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è WB –¥–∞–Ω–Ω—ã—Ö"""
        total_orders_count = sum(o.get("count", 0) for o in orders_list)
        total_orders_revenue = sum(o.get("price_with_disc", 0) for o in orders_list)

        total_sales_count = sum(s.get("count", 0) for s in sales_list)
        total_sales_revenue = sum(s.get("for_pay", 0) for s in sales_list)

        return {
            "orders_stats": {"count": total_orders_count, "price_with_disc": total_orders_revenue},
            "sales_stats": {"count": total_sales_count, "for_pay": total_sales_revenue},
            "buyout_rate": (
                (total_sales_count / total_orders_count * 100) if total_orders_count > 0 else 0
            ),
        }

    def _aggregate_ozon_data(self, ozon_list: list[dict]) -> dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è Ozon –¥–∞–Ω–Ω—ã—Ö"""
        total_revenue = sum(data.get("revenue", 0) for data in ozon_list)
        total_units = sum(data.get("units", 0) for data in ozon_list)
        total_commission = sum(data.get("commission", 0) for data in ozon_list)

        return {"revenue": total_revenue, "units": total_units, "commission": total_commission}

    def _aggregate_results(
        self, wb_data: dict, ozon_data: dict, date_from: str, date_to: str
    ) -> dict[str, Any]:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        wb_revenue = wb_data.get("sales_stats", {}).get("for_pay", 0)
        ozon_revenue = ozon_data.get("revenue", 0)

        wb_units = wb_data.get("sales_stats", {}).get("count", 0)
        ozon_units = ozon_data.get("units", 0)

        total_revenue = wb_revenue + ozon_revenue
        total_units = wb_units + ozon_units

        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
        total_costs = total_revenue * 0.3  # –ü—Ä–∏–º–µ—Ä–Ω–æ 30% —Ä–∞—Å—Ö–æ–¥–æ–≤
        net_profit = total_revenue - total_costs

        return {
            "period": f"{date_from} - {date_to}",
            "total_revenue": total_revenue,
            "total_units": total_units,
            "net_profit": net_profit,
            "wb_data": wb_data,
            "ozon_data": ozon_data,
        }

    async def _update_progress(self, message: types.Message, text: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Telegram"""
        try:
            await message.edit_text(text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
long_processor = LongPeriodProcessor()
