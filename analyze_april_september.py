#!/usr/bin/env python3
"""–ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ó–ê –ê–ü–†–ï–õ–¨-–°–ï–ù–¢–Ø–ë–†–¨ 2025
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ WB
"""

import asyncio
import logging

from real_data_reports import RealDataFinancialReports

import api_clients_main as api_clients
from api_chunking import ChunkedAPIManager

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def analyze_april_september_data():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –∞–ø—Ä–µ–ª—å-—Å–µ–Ω—Ç—è–±—Ä—å 2025"""
    logger.info("üîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ó–ê –ê–ü–†–ï–õ–¨-–°–ï–ù–¢–Ø–ë–†–¨ 2025")
    logger.info("=" * 60)

    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    REAL_DELIVERED = 413586  # ‚ÇΩ –≤—ã–∫—É–ø—ã
    REAL_ORDERS = 723738  # ‚ÇΩ –∑–∞–∫–∞–∑—ã

    logger.info("üìä –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï WB –ó–ê –ê–ü–†–ï–õ–¨-–°–ï–ù–¢–Ø–ë–†–¨:")
    logger.info(f"   –í—ã–∫—É–ø—ã: {REAL_DELIVERED:,} ‚ÇΩ")
    logger.info(f"   –ó–∞–∫–∞–∑—ã: {REAL_ORDERS:,} ‚ÇΩ")
    logger.info("")

    reports = RealDataFinancialReports()
    chunked_api = ChunkedAPIManager(api_clients)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –∞–ø—Ä–µ–ª—å-—Å–µ–Ω—Ç—è–±—Ä—å
    date_from = "2025-04-01"
    date_to = "2025-09-30"

    logger.info(f"üîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ü–ï–†–ò–û–î: {date_from} ‚Üí {date_to}")
    logger.info("")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger.info("üì• –ü–û–õ–£–ß–ï–ù–ò–ï –°–´–†–´–• –î–ê–ù–ù–´–•:")
        sales_data = await chunked_api.get_wb_sales_chunked(date_from, date_to)
        orders_data = await chunked_api.get_wb_orders_chunked(date_from, date_to)

        logger.info(f"   Sales –∑–∞–ø–∏—Å–µ–π: {len(sales_data) if sales_data else 0}")
        logger.info(f"   Orders –∑–∞–ø–∏—Å–µ–π: {len(orders_data) if orders_data else 0}")
        logger.info("")

        if not sales_data:
            logger.error("‚ùå –ù–µ—Ç Sales –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìÖ –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –î–ê–ù–ù–´–•:")
        all_sales_dates = []
        for record in sales_data:
            raw_date = record.get("date", "")
            if "T" in raw_date:
                parsed_date = raw_date.split("T")[0]
            else:
                parsed_date = raw_date[:10]
            if parsed_date:
                all_sales_dates.append(parsed_date)

        if all_sales_dates:
            min_date = min(all_sales_dates)
            max_date = max(all_sales_dates)
            logger.info(f"   –î–∏–∞–ø–∞–∑–æ–Ω Sales –¥–∞–Ω–Ω—ã—Ö: {min_date} ‚Üí {max_date}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –Ω–∞—à –ø–µ—Ä–∏–æ–¥
            in_period = sum(1 for d in all_sales_dates if date_from <= d <= date_to)
            out_period = len(all_sales_dates) - in_period
            logger.info(f"   –í –ø–µ—Ä–∏–æ–¥–µ {date_from}-{date_to}: {in_period} –∑–∞–ø–∏—Å–µ–π")
            logger.info(f"   –í–Ω–µ –ø–µ—Ä–∏–æ–¥–∞: {out_period} –∑–∞–ø–∏—Å–µ–π")
        logger.info("")

        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Sales –¥–∞–Ω–Ω—ã—Ö
        logger.info("üí∞ –ê–ù–ê–õ–ò–ó SALES –î–ê–ù–ù–´–• (–í–´–ö–£–ü–´):")

        total_sales_price_with_disc = 0
        total_sales_for_pay = 0
        delivered_count = 0

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_sales = {}

        for record in sales_data:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
            raw_date = record.get("date", "")
            if "T" in raw_date:
                parsed_date = raw_date.split("T")[0]
            else:
                parsed_date = raw_date[:10]

            if not (date_from <= parsed_date <= date_to):
                continue

            is_realization = record.get("isRealization", False)
            if not is_realization:
                continue

            price_with_disc = record.get("priceWithDisc", 0) or 0
            for_pay = record.get("forPay", 0) or 0

            total_sales_price_with_disc += price_with_disc
            total_sales_for_pay += for_pay
            delivered_count += 1

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            month_key = parsed_date[:7]  # YYYY-MM
            if month_key not in monthly_sales:
                monthly_sales[month_key] = {"count": 0, "price_with_disc": 0, "for_pay": 0}

            monthly_sales[month_key]["count"] += 1
            monthly_sales[month_key]["price_with_disc"] += price_with_disc
            monthly_sales[month_key]["for_pay"] += for_pay

        logger.info(f"   –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂ (priceWithDisc): {total_sales_price_with_disc:,.0f} ‚ÇΩ")
        logger.info(f"   –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é (forPay): {total_sales_for_pay:,.0f} ‚ÇΩ")
        logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–æ–≤: {delivered_count}")
        logger.info("")

        # –ü–æ–º–µ—Å—è—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
        logger.info("üìà –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê SALES:")
        for month in sorted(monthly_sales.keys()):
            data = monthly_sales[month]
            logger.info(
                f"   {month}: {data['count']} —à—Ç, {data['price_with_disc']:,.0f} ‚ÇΩ (priceWithDisc)"
            )

        logger.info("")

        # –ê–Ω–∞–ª–∏–∑ Orders –¥–∞–Ω–Ω—ã—Ö
        logger.info("üõí –ê–ù–ê–õ–ò–ó ORDERS –î–ê–ù–ù–´–• (–ó–ê–ö–ê–ó–´):")

        total_orders_price_with_disc = 0
        total_orders_total_price = 0
        orders_count = 0

        monthly_orders = {}

        for record in orders_data:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–µ—Ä–∏–æ–¥—É
            raw_date = record.get("date", "")
            if "T" in raw_date:
                parsed_date = raw_date.split("T")[0]
            else:
                parsed_date = raw_date[:10]

            if not (date_from <= parsed_date <= date_to):
                continue

            price_with_disc = record.get("priceWithDisc", 0) or 0
            total_price = record.get("totalPrice", 0) or 0

            total_orders_price_with_disc += price_with_disc
            total_orders_total_price += total_price
            orders_count += 1

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            month_key = parsed_date[:7]
            if month_key not in monthly_orders:
                monthly_orders[month_key] = {"count": 0, "price_with_disc": 0, "total_price": 0}

            monthly_orders[month_key]["count"] += 1
            monthly_orders[month_key]["price_with_disc"] += price_with_disc
            monthly_orders[month_key]["total_price"] += total_price

        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (priceWithDisc): {total_orders_price_with_disc:,.0f} ‚ÇΩ")
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ (totalPrice): {total_orders_total_price:,.0f} ‚ÇΩ")
        logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}")
        logger.info("")

        # –ü–æ–º–µ—Å—è—á–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        logger.info("üìà –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê ORDERS:")
        for month in sorted(monthly_orders.keys()):
            data = monthly_orders[month]
            logger.info(
                f"   {month}: {data['count']} —à—Ç, {data['price_with_disc']:,.0f} ‚ÇΩ (priceWithDisc)"
            )

        logger.info("")

        # –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
        logger.info("üéØ –°–†–ê–í–ù–ï–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò:")
        logger.info("")

        # –í—ã–∫—É–ø—ã
        sales_ratio = total_sales_price_with_disc / REAL_DELIVERED if REAL_DELIVERED > 0 else 0
        sales_diff = total_sales_price_with_disc - REAL_DELIVERED

        logger.info("–í–´–ö–£–ü–´:")
        logger.info(f"   –°–∏—Å—Ç–µ–º–∞ (priceWithDisc): {total_sales_price_with_disc:,.0f} ‚ÇΩ")
        logger.info(f"   –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WB: {REAL_DELIVERED:,.0f} ‚ÇΩ")
        logger.info(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {sales_ratio:.2f}x")
        logger.info(f"   –†–∞–∑–Ω–∏—Ü–∞: {sales_diff:,.0f} ‚ÇΩ")

        if abs(sales_ratio - 1.0) < 0.1:
            logger.info("   ‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ (¬±10%)")
        elif sales_ratio > 1.2:
            logger.info(f"   ‚ùå –ó–ê–í–´–®–ï–ù–ò–ï –Ω–∞ {((sales_ratio - 1) * 100):.0f}%")
        else:
            logger.info(f"   ‚ö†Ô∏è  –ó–ê–ù–ò–ñ–ï–ù–ò–ï –Ω–∞ {((1 - sales_ratio) * 100):.0f}%")

        logger.info("")

        # –ó–∞–∫–∞–∑—ã
        orders_ratio = total_orders_price_with_disc / REAL_ORDERS if REAL_ORDERS > 0 else 0
        orders_diff = total_orders_price_with_disc - REAL_ORDERS

        logger.info("–ó–ê–ö–ê–ó–´:")
        logger.info(f"   –°–∏—Å—Ç–µ–º–∞ (priceWithDisc): {total_orders_price_with_disc:,.0f} ‚ÇΩ")
        logger.info(f"   –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WB: {REAL_ORDERS:,.0f} ‚ÇΩ")
        logger.info(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {orders_ratio:.2f}x")
        logger.info(f"   –†–∞–∑–Ω–∏—Ü–∞: {orders_diff:,.0f} ‚ÇΩ")

        if abs(orders_ratio - 1.0) < 0.1:
            logger.info("   ‚úÖ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ (¬±10%)")
        elif orders_ratio > 1.2:
            logger.info(f"   ‚ùå –ó–ê–í–´–®–ï–ù–ò–ï –Ω–∞ {((orders_ratio - 1) * 100):.0f}%")
        else:
            logger.info(f"   ‚ö†Ô∏è  –ó–ê–ù–ò–ñ–ï–ù–ò–ï –Ω–∞ {((1 - orders_ratio) * 100):.0f}%")

        logger.info("")

        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–û–ó–ú–û–ñ–ù–´–• –ü–†–ò–ß–ò–ù
        logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–û–ó–ú–û–ñ–ù–´–• –ü–†–ò–ß–ò–ù –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø:")

        if sales_ratio > 1.1 or orders_ratio > 1.1:
            logger.warning("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–û –ó–ê–í–´–®–ï–ù–ò–ï - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.warning("   1. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ API")
            logger.warning("   2. –í–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∫–∞–∫ –ø—Ä–æ–¥–∞–∂")
            logger.warning("   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è isRealization")
            logger.warning("   4. –†–∞–∑–ª–∏—á–∏–µ –≤ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ WB")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            logger.info("")
            logger.info("üîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í:")

            sale_ids = []
            for record in sales_data:
                raw_date = record.get("date", "")
                if "T" in raw_date:
                    parsed_date = raw_date.split("T")[0]
                else:
                    parsed_date = raw_date[:10]

                if date_from <= parsed_date <= date_to:
                    sale_id = record.get("saleID", "")
                    if sale_id:
                        sale_ids.append(sale_id)

            unique_sale_ids = set(sale_ids)
            duplicates_count = len(sale_ids) - len(unique_sale_ids)

            logger.info(f"   –í—Å–µ–≥–æ saleID: {len(sale_ids)}")
            logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö saleID: {len(unique_sale_ids)}")
            logger.info(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}")

            if duplicates_count > 0:
                logger.warning("   ‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–ö–ê–¢–´! –≠—Ç–æ –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω—è—Ç—å –∑–∞–≤—ã—à–µ–Ω–∏–µ")
            else:
                logger.info("   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return {
            "system_sales": total_sales_price_with_disc,
            "system_orders": total_orders_price_with_disc,
            "real_sales": REAL_DELIVERED,
            "real_orders": REAL_ORDERS,
            "sales_ratio": sales_ratio,
            "orders_ratio": orders_ratio,
            "delivered_count": delivered_count,
            "orders_count": orders_count,
            "duplicates_found": duplicates_count if "duplicates_count" in locals() else 0,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None


if __name__ == "__main__":
    result = asyncio.run(analyze_april_september_data())
