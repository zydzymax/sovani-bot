#!/usr/bin/env python3
"""–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–û–†–ú–ê–¢–ê –î–ê–¢ –í WB API
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω—É–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
"""

import asyncio
import logging

import api_clients_main as api_clients
from api_chunking import ChunkedAPIManager

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def diagnose_date_formats():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç –≤ WB API"""
    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–û–†–ú–ê–¢–û–í –î–ê–¢ –í WB API")
    logger.info("=" * 60)

    chunked_api = ChunkedAPIManager(api_clients)

    # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —è–Ω–≤–∞—Ä—å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    date_from = "2025-01-01"
    date_to = "2025-01-31"

    logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥: {date_from} ‚Üí {date_to}")
    logger.info("")

    try:
        # –ü–æ–ª—É—á–∞–µ–º Sales –¥–∞–Ω–Ω—ã–µ
        logger.info("üìä –ê–ù–ê–õ–ò–ó SALES API:")
        sales_data = await chunked_api.get_wb_sales_chunked(date_from, date_to)

        if sales_data:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(sales_data)} –∑–∞–ø–∏—Å–µ–π Sales")
            logger.info("")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            logger.info("üóìÔ∏è –ê–ù–ê–õ–ò–ó –î–ê–¢ –í SALES:")
            for i, record in enumerate(sales_data[:10]):
                raw_date = record.get("date", "")

                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ
                if "T" in raw_date:
                    parsed_date = raw_date.split("T")[0]
                else:
                    parsed_date = raw_date[:10]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
                in_range = date_from <= parsed_date <= date_to

                logger.info(
                    f"  –ó–∞–ø–∏—Å—å {i+1}: '{raw_date}' ‚Üí '{parsed_date}' (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {in_range})"
                )

                if i >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                    break

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
            logger.info("")
            logger.info("üìà –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –î–ê–¢–ê–ú:")
            date_groups = {}
            in_range_count = 0
            out_range_count = 0

            for record in sales_data:
                raw_date = record.get("date", "")
                if "T" in raw_date:
                    parsed_date = raw_date.split("T")[0]
                else:
                    parsed_date = raw_date[:10]

                if parsed_date:
                    if parsed_date not in date_groups:
                        date_groups[parsed_date] = 0
                    date_groups[parsed_date] += 1

                    # –°—á–∏—Ç–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ/–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                    if date_from <= parsed_date <= date_to:
                        in_range_count += 1
                    else:
                        out_range_count += 1

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–∞–º
            sorted_dates = sorted(date_groups.keys())
            for date_key in sorted_dates[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –¥–∞—Ç
                count = date_groups[date_key]
                in_range = date_from <= date_key <= date_to
                status = "‚úÖ –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ" if in_range else "‚ùå –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
                logger.info(f"    {date_key}: {count} –∑–∞–ø–∏—Å–µ–π ({status})")

            logger.info("")
            logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(sales_data)}")
            logger.info(f"    –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {in_range_count}")
            logger.info(f"    –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {out_range_count}")
            logger.info(f"    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {min(sorted_dates) if sorted_dates else 'N/A'}")
            logger.info(f"    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {max(sorted_dates) if sorted_dates else 'N/A'}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º priceWithDisc –¥–ª—è –∑–∞–ø–∏—Å–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            logger.info("")
            logger.info("üí∞ –ê–ù–ê–õ–ò–ó –°–£–ú–ú –î–õ–Ø –ó–ê–ü–ò–°–ï–ô –í –î–ò–ê–ü–ê–ó–û–ù–ï:")
            total_in_range = 0
            total_out_range = 0

            for record in sales_data:
                raw_date = record.get("date", "")
                if "T" in raw_date:
                    parsed_date = raw_date.split("T")[0]
                else:
                    parsed_date = raw_date[:10]

                price = record.get("priceWithDisc", 0) or 0

                if date_from <= parsed_date <= date_to:
                    total_in_range += price
                else:
                    total_out_range += price

            logger.info(f"    –°—É–º–º–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {total_in_range:,.0f} ‚ÇΩ")
            logger.info(f"    –°—É–º–º–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {total_out_range:,.0f} ‚ÇΩ")
            logger.info(f"    –û–±—â–∞—è —Å—É–º–º–∞: {total_in_range + total_out_range:,.0f} ‚ÇΩ")

        else:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Sales")

        logger.info("")
        logger.info("=" * 60)

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è Orders
        logger.info("üìä –ê–ù–ê–õ–ò–ó ORDERS API:")
        orders_data = await chunked_api.get_wb_orders_chunked(date_from, date_to)

        if orders_data:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(orders_data)} –∑–∞–ø–∏—Å–µ–π Orders")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã Orders
            orders_date_groups = {}
            orders_in_range = 0
            orders_out_range = 0

            for record in orders_data:
                raw_date = record.get("date", "")
                if "T" in raw_date:
                    parsed_date = raw_date.split("T")[0]
                else:
                    parsed_date = raw_date[:10]

                if parsed_date:
                    if parsed_date not in orders_date_groups:
                        orders_date_groups[parsed_date] = 0
                    orders_date_groups[parsed_date] += 1

                    if date_from <= parsed_date <= date_to:
                        orders_in_range += 1
                    else:
                        orders_out_range += 1

            logger.info(f"    –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {orders_in_range}")
            logger.info(f"    –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {orders_out_range}")

            if orders_date_groups:
                sorted_orders_dates = sorted(orders_date_groups.keys())
                logger.info(f"    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {min(sorted_orders_dates)}")
                logger.info(f"    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {max(sorted_orders_dates)}")

        else:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Orders")

        logger.info("")
        logger.info("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if in_range_count == 0 and sales_data:
            logger.warning("‚ùå –ù–ò –û–î–ù–û–ô –∑–∞–ø–∏—Å–∏ Sales –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω!")
            logger.warning("    –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ - —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∞—è")
            logger.warning("    –ù—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
        elif in_range_count > 0:
            logger.info("‚úÖ –ß–∞—Å—Ç—å –∑–∞–ø–∏—Å–µ–π –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω")
            logger.info(f"    –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {total_in_range:,.0f} ‚ÇΩ")

        return {
            "sales_total": len(sales_data) if sales_data else 0,
            "sales_in_range": in_range_count,
            "sales_out_range": out_range_count,
            "sum_in_range": total_in_range if "total_in_range" in locals() else 0,
            "sum_out_range": total_out_range if "total_out_range" in locals() else 0,
            "date_range_issue": in_range_count == 0 and sales_data is not None,
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return None


if __name__ == "__main__":
    result = asyncio.run(diagnose_date_formats())
