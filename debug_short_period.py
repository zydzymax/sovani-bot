#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
"""

import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def debug_short_period():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥"""
    try:
        from real_data_reports import RealDataFinancialReports

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        date_from = "2025-09-15"
        date_to = "2025-09-21"

        logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥: {date_from} - {date_to}")

        reports = RealDataFinancialReports()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º WB –¥–∞–Ω–Ω—ã–µ
        logger.info("\nüìä WB –¥–∞–Ω–Ω—ã–µ...")
        wb_data = await reports.get_real_wb_sales(date_from, date_to)

        logger.info(f"WB —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"  –í—ã—Ä—É—á–∫–∞: {wb_data.get('revenue', 0):,.2f} ‚ÇΩ")
        logger.info(f"  –ï–¥–∏–Ω–∏—Ü –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {wb_data.get('units', 0)}")
        logger.info(f"  –ó–∞–∫–∞–∑–æ–≤ –µ–¥–∏–Ω–∏—Ü: {wb_data.get('orders_units', 0)}")
        logger.info(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞: {wb_data.get('buyout_rate', 0):.1f}%")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏
        if 'sales_data' in wb_data and wb_data['sales_data']:
            sales_data = wb_data['sales_data']
            logger.info(f"\nüîç –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π WB ({len(sales_data)} –≤—Å–µ–≥–æ):")

            for i, sale in enumerate(sales_data[:5]):
                logger.info(f"  {i+1}. –î–∞—Ç–∞: {sale.get('date', '')[:19]}")
                logger.info(f"     –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: {sale.get('isRealization')}")
                logger.info(f"     –ü–æ—Å—Ç–∞–≤–∫–∞: {sale.get('isSupply')}")
                logger.info(f"     –¶–µ–Ω–∞: {sale.get('totalPrice', 0)} ‚Üí {sale.get('priceWithDisc', 0)} ‚ÇΩ")
                logger.info(f"     –ö –¥–æ–ø–ª–∞—Ç–µ: {sale.get('forPay', 0)} ‚ÇΩ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ozon –¥–∞–Ω–Ω—ã–µ
        logger.info("\nüìä Ozon –¥–∞–Ω–Ω—ã–µ...")
        ozon_data = await reports.get_real_ozon_sales(date_from, date_to)

        logger.info(f"Ozon —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"  –í—ã—Ä—É—á–∫–∞: {ozon_data.get('revenue', 0):,.2f} ‚ÇΩ")
        logger.info(f"  –ï–¥–∏–Ω–∏—Ü: {ozon_data.get('units', 0)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã
        logger.info("\nüîÑ –ü—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã...")

        from api_chunking import ChunkedAPIManager
        import api_clients_main as api_clients

        chunked_api = ChunkedAPIManager(api_clients)

        # WB Sales –ø—Ä—è–º–æ
        try:
            wb_sales = await chunked_api.get_wb_sales_chunked(date_from, date_to)
            logger.info(f"WB Sales API: {len(wb_sales)} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"WB Sales API –æ—à–∏–±–∫–∞: {e}")

        # Ozon –ø—Ä—è–º–æ
        try:
            ozon_fbo = await chunked_api.get_ozon_fbo_chunked(date_from, date_to)
            logger.info(f"Ozon FBO API: {len(ozon_fbo or [])} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"Ozon FBO API –æ—à–∏–±–∫–∞: {e}")

        try:
            ozon_fbs = await chunked_api.get_ozon_fbs_chunked(date_from, date_to)
            logger.info(f"Ozon FBS API: {len(ozon_fbs or [])} –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            logger.error(f"Ozon FBS API –æ—à–∏–±–∫–∞: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        logger.info("\nüìÅ –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ WB...")
        try:
            wb_reports = await api_clients.download_wb_reports()
            if wb_reports and wb_reports.get('sales'):
                with open(wb_reports['sales'], 'r', encoding='utf-8') as f:
                    import json
                    old_sales = json.load(f)

                logger.info(f"–°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª WB: {len(old_sales)} –∑–∞–ø–∏—Å–µ–π")

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
                filtered_sales = []
                for sale in old_sales:
                    sale_date = sale.get('date', '')[:10]
                    if date_from <= sale_date <= date_to:
                        filtered_sales.append(sale)

                logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ {date_from}-{date_to}: {len(filtered_sales)} –∑–∞–ø–∏—Å–µ–π")

                if filtered_sales:
                    logger.info("–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:")
                    example = filtered_sales[0]
                    logger.info(f"  –î–∞—Ç–∞: {example.get('date')}")
                    logger.info(f"  –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: {example.get('isRealization')}")
                    logger.info(f"  –¶–µ–Ω–∞: {example.get('priceWithDisc')} ‚ÇΩ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")

        logger.info("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_short_period())