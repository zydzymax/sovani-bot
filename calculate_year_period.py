#!/usr/bin/env python3
"""–†–ê–°–ß–ï–¢ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –ü–ï–†–ò–û–î–ê –ù–ê –ì–û–î
–ê–Ω–∞–ª–∏–∑ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–¥–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
"""

import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


def calculate_year_processing():
    """–†–∞—Å—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–¥–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    logger.info("üìä –†–ê–°–ß–ï–¢ –û–ë–†–ê–ë–û–¢–ö–ò –ì–û–î–û–í–û–ì–û –ü–ï–†–ò–û–î–ê")
    logger.info("=" * 60)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã
    CHUNK_SIZE_DAYS = 45  # –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è WB API
    DELAY_BETWEEN_REQUESTS = 3  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    APIS_PER_CHUNK = 2  # Sales + Orders API

    # –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    periods = [
        (365, "–ü–æ–ª–Ω—ã–π –≥–æ–¥"),
        (270, "9 –º–µ—Å—è—Ü–µ–≤"),
        (180, "6 –º–µ—Å—è—Ü–µ–≤"),
        (90, "3 –º–µ—Å—è—Ü–∞ (–∫–≤–∞—Ä—Ç–∞–ª)"),
        (45, "1.5 –º–µ—Å—è—Ü–∞"),
        (30, "1 –º–µ—Å—è—Ü"),
    ]

    logger.info("üî¢ –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –†–ê–°–ß–ï–¢–´:")
    logger.info("")

    results = []

    for days, description in periods:
        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞–Ω–∫–æ–≤
        chunks_needed = (days + CHUNK_SIZE_DAYS - 1) // CHUNK_SIZE_DAYS

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        total_requests = chunks_needed * APIS_PER_CHUNK
        processing_time_seconds = total_requests * DELAY_BETWEEN_REQUESTS
        processing_time_minutes = processing_time_seconds / 60
        processing_time_hours = processing_time_minutes / 60

        # –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if chunks_needed <= 2:
            complexity = "–ü–†–û–°–¢–ê–Ø"
        elif chunks_needed <= 5:
            complexity = "–°–†–ï–î–ù–Ø–Ø"
        elif chunks_needed <= 10:
            complexity = "–°–õ–û–ñ–ù–ê–Ø"
        else:
            complexity = "–û–ß–ï–ù–¨ –°–õ–û–ñ–ù–ê–Ø"

        results.append(
            {
                "days": days,
                "description": description,
                "chunks": chunks_needed,
                "requests": total_requests,
                "time_minutes": processing_time_minutes,
                "time_hours": processing_time_hours,
                "complexity": complexity,
            }
        )

        logger.info(f"üìÖ {description:20s} ({days:3d} –¥–Ω–µ–π):")
        logger.info(f"   –ß–∞–Ω–∫–æ–≤: {chunks_needed:2d}")
        logger.info(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {total_requests:2d}")
        logger.info(
            f"   –í—Ä–µ–º—è: {processing_time_minutes:5.1f} –º–∏–Ω ({processing_time_hours:4.1f} —á)"
        )
        logger.info(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}")
        logger.info("")

    # –ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    logger.info("‚ö†Ô∏è  –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:")
    logger.info("")

    # Rate Limiting
    logger.info("üö¶ RATE LIMITING:")
    max_requests_per_hour = 3600 / DELAY_BETWEEN_REQUESTS  # 1200 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å
    year_result = next(r for r in results if r["days"] == 365)

    logger.info(f"   –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç: {max_requests_per_hour:.0f} –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å")
    logger.info(f"   –î–ª—è –≥–æ–¥–∞ –Ω—É–∂–Ω–æ: {year_result['requests']} –∑–∞–ø—Ä–æ—Å–æ–≤")
    logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {year_result['time_hours']:.1f} —á–∞—Å–∞")
    logger.info("")

    # API Stability
    logger.info("üîß –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ API:")
    failure_rate = 0.05  # 5% –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–≥—É—Ç —É–ø–∞—Å—Ç—å
    year_expected_failures = year_result["requests"] * failure_rate
    retry_overhead = year_expected_failures * 2  # –ö–∞–∂–¥—ã–π retry —É–¥–≤–∞–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è

    logger.info(f"   –û–∂–∏–¥–∞–µ–º—ã—Ö —Å–±–æ–µ–≤ (5%): {year_expected_failures:.0f}")
    logger.info(
        f"   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ retry: {retry_overhead * DELAY_BETWEEN_REQUESTS / 60:.1f} –º–∏–Ω"
    )
    logger.info("")

    # Memory and Storage
    logger.info("üíæ –ü–ê–ú–Ø–¢–¨ –ò –•–†–ê–ù–ï–ù–ò–ï:")
    avg_records_per_chunk = 1000  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —á–∞–Ω–∫
    year_total_records = year_result["chunks"] * avg_records_per_chunk
    memory_per_record = 1024  # bytes
    total_memory_mb = (year_total_records * memory_per_record) / (1024 * 1024)

    logger.info(f"   –û–∂–∏–¥–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π: {year_total_records:,}")
    logger.info(f"   –¢—Ä–µ–±—É–µ–º–∞—è –ø–∞–º—è—Ç—å: ~{total_memory_mb:.0f} MB")
    logger.info("")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–ï–†–ò–û–î–ê–ú:")
    logger.info("")

    for result in results:
        if result["complexity"] == "–ü–†–û–°–¢–ê–Ø":
            status = "‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø"
        elif result["complexity"] == "–°–†–ï–î–ù–Ø–Ø":
            status = "üî∂ –î–û–ü–£–°–¢–ò–ú–û"
        elif result["complexity"] == "–°–õ–û–ñ–ù–ê–Ø":
            status = "‚ö†Ô∏è  –û–°–¢–û–†–û–ñ–ù–û"
        else:
            status = "‚ùå –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø"

        logger.info(f"   {result['description']:20s}: {status}")

    logger.info("")

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    logger.info("üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –î–õ–Ø –ì–û–î–ê:")
    logger.info("")
    logger.info("   1Ô∏è‚É£  –ü–û–≠–¢–ê–ü–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:")
    logger.info("      ‚Ä¢ –†–∞–∑–±–∏—Ç—å –≥–æ–¥ –Ω–∞ 4 –∫–≤–∞—Ä—Ç–∞–ª–∞ (90 –¥–Ω–µ–π –∫–∞–∂–¥—ã–π)")
    logger.info("      ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ –∫–≤–∞—Ä—Ç–∞–ª—É —Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏")
    logger.info("      ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: 4 √ó 6 –º–∏–Ω = 24 –º–∏–Ω—É—Ç—ã")
    logger.info("")
    logger.info("   2Ô∏è‚É£  –ú–ï–°–Ø–ß–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê:")
    logger.info("      ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ –º–µ—Å—è—Ü—É (30 –¥–Ω–µ–π)")
    logger.info("      ‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ √ó 2 –º–∏–Ω—É—Ç—ã = 24 –º–∏–Ω—É—Ç—ã")
    logger.info("      ‚Ä¢ –ú–µ–Ω—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API")
    logger.info("")
    logger.info("   3Ô∏è‚É£  –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î:")
    logger.info("      ‚Ä¢ API –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3-6 –º–µ—Å—è—Ü–µ–≤")
    logger.info("      ‚Ä¢ –†—É—á–Ω—ã–µ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    logger.info("      ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    logger.info("")

    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info("‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    logger.info("")
    logger.info("   üìÖ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ë–ï–ó–û–ü–ê–°–ù–´–ô –ü–ï–†–ò–û–î: 180 –¥–Ω–µ–π (6 –º–µ—Å—è—Ü–µ–≤)")
    logger.info(f"      ‚Ä¢ {results[2]['chunks']} —á–∞–Ω–∫–æ–≤")
    logger.info(f"      ‚Ä¢ ~{results[2]['time_minutes']:.0f} –º–∏–Ω—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    logger.info("      ‚Ä¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ —Å–±–æ–µ–≤")
    logger.info("")
    logger.info("   üìÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –ü–ï–†–ò–û–î: 90 –¥–Ω–µ–π (3 –º–µ—Å—è—Ü–∞)")
    logger.info(f"      ‚Ä¢ {results[3]['chunks']} —á–∞–Ω–∫–æ–≤")
    logger.info(f"      ‚Ä¢ ~{results[3]['time_minutes']:.0f} –º–∏–Ω—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    logger.info("      ‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–∞–Ω–Ω—ã—Ö/–≤—Ä–µ–º–µ–Ω–∏")
    logger.info("")
    logger.info("   üìÖ –î–õ–Ø –ì–û–î–û–í–´–• –û–¢–ß–ï–¢–û–í:")
    logger.info("      ‚Ä¢ 4 –∑–∞–ø—Ä–æ—Å–∞ –ø–æ 90 –¥–Ω–µ–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º")
    logger.info("      ‚Ä¢ –ò–ª–∏ API + —Ä—É—á–Ω—ã–µ –≤—ã–≥—Ä—É–∑–∫–∏")
    logger.info("      ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: ~30-40 –º–∏–Ω—É—Ç")

    return results


if __name__ == "__main__":
    calculate_year_processing()
