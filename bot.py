#!/usr/bin/env python3
"""SoVAni Bot - Telegram-–±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ Wildberries –∏ Ozon

–û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å ChatGPT
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (P&L, –≤—ã—Ä—É—á–∫–∞, ROI)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ Excel —à–∞–±–ª–æ–Ω—ã
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
- API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WB (6 —Ç–æ–∫–µ–Ω–æ–≤) –∏ Ozon (2 —Ç–æ–∫–µ–Ω–∞)

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
- Framework: aiogram 2.25.1 (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram Bot)
- Database: SQLite (sovani_bot.db)
- APIs: Wildberries API + Ozon API + OpenAI ChatGPT
- Authentication: JWT –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è WB API
- Scheduler: APScheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á

–ê–í–¢–û–†: SoVAni Team
–í–ï–†–°–ò–Ø: 2.0 (–°–µ–Ω—Ç—è–±—Ä—å 2025)
"""

import asyncio
import logging
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import (
    BotCommand,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils import executor
from aiogram.utils.callback_data import CallbackData
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import http_async
from ai_reply import generate_question_reply, generate_review_reply
from api_clients_main import (
    get_new_questions,
    get_new_reviews,
    post_answer_feedback,
    post_answer_question,
)
from api_monitor import api_monitor
from auto_reviews_processor import auto_processor
from config import Config
from cost_template_generator import CostTemplateGenerator
from db import (
    get_question,
    get_review,
    init_db,
    mark_question_answered,
    mark_review_answered,
    save_question,
    save_review,
)

# Excel –æ—Ç—á–µ—Ç—ã –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é
from excel_bot_integration import (
    generate_cost_summary_for_bot,
    generate_enhanced_cumulative_report,
    generate_enhanced_financial_report,
    handle_cost_file_upload,
    handle_cost_template_upload,
    handle_dds_excel_export,
    handle_pnl_excel_export,
)
from handlers.api_client import range_preset, split_long
from handlers.inventory import repl_recommendations, stock_snapshot
from handlers.reports import dds_text, pnl_text, romi_text
from handlers.reviews import reviews_new_last24

# –ó–ê–ú–ï–ù–ï–ù–û –ù–ê –†–ï–ê–õ–¨–ù–£–Æ –°–ò–°–¢–ï–ú–£ –û–¢–ß–ï–¢–ù–û–°–¢–ò –ë–ï–ó –§–ï–ô–ö–û–í!
from real_data_reports import generate_cumulative_financial_report, generate_real_financial_report

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å ChatGPT
from reviews_bot_handlers import setup_reviews_handlers
from wb_excel_processor import wb_excel_processor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("sovani_bot.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=Config.TELEGRAM_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()

# Callback data –¥–ª—è –∫–Ω–æ–ø–æ–∫
answer_callback = CallbackData("answer", "type", "id")

# Memory storage for user last report type
user_last = {}  # {user_id: 'pnl'|'dds'|'romi'}


# –ü—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
def get_financial_report_menu():
    """–ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data="fin_report:7"),
        InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data="fin_report:30"),
    )
    kb.add(
        InlineKeyboardButton("üìÖ –í—á–µ—Ä–∞", callback_data="fin_report:yesterday"),
        InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="fin_report:today"),
    )
    return kb


# –ú–µ–Ω—é –¥–ª—è –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞
def get_cumulative_report_menu():
    """–ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞"""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìä 7 –¥–Ω–µ–π", callback_data="cumulative:7"),
        InlineKeyboardButton("üìä 30 –¥–Ω–µ–π", callback_data="cumulative:30"),
    )
    kb.add(
        InlineKeyboardButton("üìä 60 –¥–Ω–µ–π", callback_data="cumulative:60"),
        InlineKeyboardButton("üìä 90 –¥–Ω–µ–π", callback_data="cumulative:90"),
    )
    return kb


def split_message(text):
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram

    Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (4096 —Å–∏–º–≤–æ–ª–æ–≤).
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤,
    —Å—Ç–∞—Ä–∞—è—Å—å –¥–µ–ª–∏—Ç—å –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è

    """
    parts = []
    limit = 3500  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç —Å –∑–∞–ø–∞—Å–æ–º –¥–æ 4096
    while len(text) > limit:
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –¥–æ –ª–∏–º–∏—Ç–∞
        cut = text.rfind("\n", 0, limit)
        cut = cut if cut != -1 else limit  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞, —Ä–µ–∂–µ–º –ø–æ –ª–∏–º–∏—Ç—É
        parts.append(text[:cut])
        text = text[cut:]
    parts.append(text)
    return parts


# ===============================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø
# ===============================


def get_main_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é Telegram –±–æ—Ç–∞

    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:
    - –û—Ç—á–µ—Ç—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º (WB/Ozon —Ä–∞–∑–¥–µ–ª—å–Ω–æ)
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (–∑–∞–≥—Ä—É–∑–∫–∞ WB, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)
    - –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ChatGPT)
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (API —Å—Ç–∞—Ç—É—Å)

    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    """
    print("[DEBUG] get_main_menu() –≤—ã–∑–≤–∞–Ω–∞! –°–æ–∑–¥–∞—é –ù–û–í–û–ï –º–µ–Ω—é —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º WB/Ozon")
    logging.info("get_main_menu() called - creating NEW menu with WB/Ozon separation")

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # –†–∞–∑–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è WB –∏ Ozon (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    keyboard.add(
        KeyboardButton("üü£ –û—Ç—á–µ—Ç—ã WB"),  # Wildberries —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
        KeyboardButton("üü† –û—Ç—á–µ—Ç—ã Ozon"),  # Ozon —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
    )

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    keyboard.add(
        KeyboardButton("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö WB"),  # Excel –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è WB
        KeyboardButton("üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"),  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ COGS —á–µ—Ä–µ–∑ Excel
    )

    # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    keyboard.add(
        KeyboardButton("‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏"),  # ChatGPT –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
        KeyboardButton("üîç API —Å—Ç–∞—Ç—É—Å"),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
    )

    # –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    keyboard.add(KeyboardButton("üìã –ü–æ–º–æ—â—å"))
    return keyboard


# –ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ WB
def get_wb_reports_menu():
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ Wildberries"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="wb_financial"),
        InlineKeyboardButton("üìà –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥", callback_data="wb_cumulative"),
    )
    keyboard.add(
        InlineKeyboardButton("üìã –¢–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏", callback_data="wb_stock"),
        InlineKeyboardButton("üéØ –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤", callback_data="wb_top_sku"),
    )
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard


# –ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ Ozon
def get_ozon_reports_menu():
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ Ozon"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="ozon_financial"),
        InlineKeyboardButton("üìà –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥", callback_data="ozon_cumulative"),
    )
    keyboard.add(
        InlineKeyboardButton("üìã –¢–æ–≤–∞—Ä–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏", callback_data="ozon_stock"),
        InlineKeyboardButton("üéØ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂", callback_data="ozon_analytics"),
    )
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard


# –ú–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö WB
def get_wb_upload_menu():
    """–ú–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö WB"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö", callback_data="wb_upload_sales"),
        InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –æ –∑–∞–∫–∞–∑–∞—Ö", callback_data="wb_upload_orders"),
        InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="wb_upload_finance"),
    )
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard


# –ú–µ–Ω—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
def get_cost_menu():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìã –®–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="cost_template"),
        InlineKeyboardButton("üìä –°–≤–æ–¥–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data="cost_summary"),
    )
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return keyboard


# –ö–æ–º–∞–Ω–¥—ã –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
@dp.message_handler(commands=["reports"])
async def reports_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await financial_report_handler(message)


@dp.message_handler(commands=["api_status"])
async def api_status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API"""
    await api_status_handler(message)


@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    await help_handler(message)


# === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ===


@dp.message_handler(text="üü£ –û—Ç—á–µ—Ç—ã WB")
async def wb_reports_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ Wildberries"""
    await message.answer(
        "üü£ <b>–û—Ç—á–µ—Ç—ã Wildberries</b>\n\n" "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_wb_reports_menu(),
        parse_mode="HTML",
    )


@dp.message_handler(text="üü† –û—Ç—á–µ—Ç—ã Ozon")
async def ozon_reports_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ Ozon"""
    await message.answer(
        "üü† <b>–û—Ç—á–µ—Ç—ã Ozon</b>\n\n" "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=get_ozon_reports_menu(),
        parse_mode="HTML",
    )


@dp.message_handler(text="üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö WB")
async def wb_upload_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö WB"""
    await message.answer(
        "üìã <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö Wildberries</b>\n\n"
        "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏ WB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤:\n\n"
        "üí° <i>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –æ—Ç—á–µ—Ç—ã, —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Å –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ WB, "
        "–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ —Å—Ç–∞—Ä—à–µ 176 –¥–Ω–µ–π</i>",
        reply_markup=get_wb_upload_menu(),
        parse_mode="HTML",
    )


@dp.message_handler(text="üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def cost_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é"""
    await message.answer(
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é</b>\n\n" "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_cost_menu(),
        parse_mode="HTML",
    )


@dp.message_handler(text="üí∞ –®–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
async def cost_template_handler(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    status_msg = await message.answer("üí∞ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —à–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏...")

    try:
        generator = CostTemplateGenerator()
        template_path = await generator.generate_cost_template()

        await status_msg.edit_text("üí∞ –®–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")

        await message.answer_document(
            types.InputFile(
                template_path,
                filename=f"cost_template_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            ),
            caption="üí∞ <b>–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n"
            "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            "1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU\n"
            "2. –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–∑–∞ –µ–¥–∏–Ω–∏—Ü—É)\n"
            "3. –í–Ω–µ—Å–∏—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–≤ –º–µ—Å—è—Ü)\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç\n\n"
            "üìä –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É",
            parse_mode="HTML",
        )

        await status_msg.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)[:100]}")


@dp.message_handler(text="üîç API —Å—Ç–∞—Ç—É—Å")
async def api_status_handler(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API"""
    status_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å API...")

    try:
        report = await api_monitor.generate_status_report()
        await status_msg.edit_text(report, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")


@dp.message_handler(text="‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏")
async def reviews_management_handler(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã", callback_data="reviews_new"),
        InlineKeyboardButton("üìã –í–°–ï –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data="reviews_all"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∑—ã–≤–æ–≤", callback_data="reviews_settings"),
    )

    await message.answer(
        "‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏</b>\n\n"
        "üÜï <b>–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã</b> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ –æ—Ç–∑—ã–≤—ã\n"
        "üìã <b>–í–°–ï –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ</b> - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=keyboard,
    )


@dp.callback_query_handler(lambda c: c.data == "reviews_new")
async def handle_reviews_new_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    from reviews_bot_handlers import ReviewsBotHandlers

    await callback_query.message.delete()
    await ReviewsBotHandlers.handle_reviews_command(callback_query.message)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "reviews_all")
async def handle_reviews_all_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    from reviews_bot_handlers import ReviewsBotHandlers

    await callback_query.message.delete()
    await ReviewsBotHandlers.handle_all_unanswered_reviews_command(callback_query.message)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "reviews_settings")
async def handle_reviews_settings_callback(callback_query: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    await callback_query.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
        "üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (9:00, 18:00)\n"
        "‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤—ã 4-5‚≠ê\n"
        "‚ö†Ô∏è –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ 1-3‚≠ê\n"
        "ü§ñ ChatGPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reviews –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /all_reviews –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö",
        parse_mode="HTML",
    )
    await callback_query.answer()


@dp.message_handler(text="üìã –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = """
üìã <b>–ü–æ–º–æ—â—å SoVAni Bot</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üìä <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b> - –ø–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
üìà <b>–ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥</b> - –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥
üí∞ <b>–®–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –¥–ª—è —É—á–µ—Ç–∞ –∑–∞—Ç—Ä–∞—Ç
‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏</b> - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å ChatGPT
üîç <b>API —Å—Ç–∞—Ç—É—Å</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
üìã <b>–ü–æ–º–æ—â—å</b> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/reports - –±—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç
/reviews - –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
/all_reviews - –í–°–ï –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
/api_status - —Å—Ç–∞—Ç—É—Å API

üí° <i>–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ WB –∏ Ozon API</i>
    """
    await message.answer(help_text, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("cumulative:"))
async def cumulative_callback_handler(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞"""
    period = call.data.split(":")[1]

    await bot.answer_callback_query(call.id)
    await bot.send_message(call.from_user.id, f"üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥ –∑–∞ {period}...")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –æ—Ç—á–µ—Ç–æ–≤
        from_date, to_date = range_preset(period)
        report = await pnl_text(from_date, to_date, "day")

        for part in split_long(report):
            await bot.send_message(call.from_user.id, part, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞: {e}")
        await bot.send_message(call.from_user.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")


# === NEW REAL HANDLERS ===


def presets_kb():
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="rng:today"),
        InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="rng:yesterday"),
        InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="rng:7d"),
        InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="rng:30d"),
    )
    return kb


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    print(f"[DEBUG] /start –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logging.info(f"START command received from user {message.from_user.id}")
    welcome_text = """
üéÜ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SoVAni Bot!</b>

üìä –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –∏–∑ WB –∏ Ozon
üîç –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–æ–¥–∞–∂

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
    """
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=get_main_menu())


@dp.message_handler(commands=["api_status", "status"])
async def cmd_api_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π...")

    try:
        report = await api_monitor.generate_status_report()

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        for part in split_long(report):
            await message.answer(part, parse_mode="HTML")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        summary = api_monitor.get_status_summary()

        await message.answer(
            f"üìã <b>–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:</b>\n"
            f"{summary['message']}\n\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {summary['last_check'].strftime('%H:%M:%S')}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤
@dp.callback_query_handler(text="report_full")
async def full_report_callback(callback_query: types.CallbackQuery):
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
    await callback_query.answer()
    await callback_query.message.edit_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...")

    try:
        # –†–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–ß–ï–¢–ù–û–°–¢–ò –ë–ï–ó –§–ï–ô–ö–û–í!
        report = await generate_real_financial_report()
        await callback_query.message.edit_text(report, parse_mode="HTML")
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}")


@dp.callback_query_handler(text="report_cumulative")
async def cumulative_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞ P&L"""
    await callback_query.answer()

    status_msg = await callback_query.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥...")

    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="cumulative_7"),
            InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="cumulative_30"),
        )
        keyboard.add(
            InlineKeyboardButton("60 –¥–Ω–µ–π", callback_data="cumulative_60"),
            InlineKeyboardButton("90 –¥–Ω–µ–π", callback_data="cumulative_90"),
        )
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reports_menu"))

        await status_msg.edit_text(
            "üìä <b>–ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥ P&L</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            parse_mode="HTML",
            reply_markup=keyboard,
        )
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞: {e}")


@dp.callback_query_handler(lambda c: c.data.startswith("cumulative_"))
async def cumulative_period_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞"""
    await callback_query.answer()

    days = int(callback_query.data.split("_")[1])
    status_msg = await callback_query.message.edit_text(
        f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥ –∑–∞ {days} –¥–Ω–µ–π..."
    )

    try:
        report = await generate_cumulative_financial_report(days)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="report_cumulative")
        )
        keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"cumulative_{days}"))

        await status_msg.edit_text(report, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –∏—Ç–æ–≥–∞ –∑–∞ {days} –¥–Ω–µ–π: {e}")


@dp.callback_query_handler(text="report_wb_extended")
async def wb_extended_report_callback(callback_query: types.CallbackQuery):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç Wildberries —á–µ—Ä–µ–∑ async API"""
    await callback_query.answer("üì¢ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WB...")
    await callback_query.message.edit_text("üì¢ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç Wildberries...")

    try:
        from datetime import date, timedelta

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —á–µ—Ä–µ–∑ async API
        date_to = date.today()
        date_from = date_to - timedelta(days=7)

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        pnl_task = http_async.get_json(
            "/finance/pnl",
            params={
                "platform": "wb",
                "date_from": date_from.isoformat(),
                "date_to": date_to.isoformat(),
            },
        )

        ads_task = http_async.get_json(
            "/ads/overview",
            params={
                "platform": "wb",
                "date_from": date_from.isoformat(),
                "date_to": date_to.isoformat(),
            },
        )

        inventory_task = http_async.get_json("/inventory/stock_snapshot", params={"platform": "wb"})

        # –û–∂–∏–¥–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        pnl_data, ads_data, inventory_data = await asyncio.gather(
            pnl_task, ads_task, inventory_task, return_exceptions=True
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report_parts = ["üì¢ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç Wildberries</b>\n"]
        missing_parts = []

        # P&L –¥–∞–Ω–Ω—ã–µ
        if isinstance(pnl_data, dict) and pnl_data.get("platforms", {}).get("wb"):
            wb_data = pnl_data["platforms"]["wb"]
            report_parts.append(f"üí∞ <b>–í—ã—Ä—É—á–∫–∞:</b> {wb_data.get('revenue', '‚Äî')} ‚ÇΩ")
            report_parts.append(f"üè™ <b>–ö–æ–º–∏—Å—Å–∏—è –ú–ü:</b> {wb_data.get('mp_commission', '‚Äî')} ‚ÇΩ")
            report_parts.append(f"üöö <b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞:</b> {wb_data.get('logistics', '‚Äî')} ‚ÇΩ")
        else:
            missing_parts.append("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        # –†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if isinstance(ads_data, dict) and ads_data.get("platforms", {}).get("wb"):
            wb_ads = ads_data["platforms"]["wb"]
            report_parts.append(f"üìà <b>–†–µ–∫–ª–∞–º–∞:</b> {wb_ads.get('ads_cost', '‚Äî')} ‚ÇΩ")
        else:
            missing_parts.append("–†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        # –û—Å—Ç–∞—Ç–∫–∏
        if isinstance(inventory_data, dict) and inventory_data.get("platforms", {}).get("wb"):
            wb_stock = inventory_data["platforms"]["wb"]
            report_parts.append(f"üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏:</b> {wb_stock.get('total_quantity', '‚Äî')} –µ–¥.")
        else:
            missing_parts.append("–î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        if missing_parts:
            report_parts.append("\n‚ö†Ô∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b>")
            for part in missing_parts:
                report_parts.append(f"‚Ä¢ {part}")

        report_parts.append(f"\nüìÖ <i>–ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}</i>")

        report = "\n".join(report_parts)
        await callback_query.message.edit_text(report, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ WB –æ—Ç—á–µ—Ç–∞: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)[:200]}", parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query_handler(text="settings_tokens")
async def tokens_settings_callback(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö"""
    await callback_query.answer()
    text = f"""üîë <b>API –¢–æ–∫–µ–Ω—ã</b>

üü£ <b>Wildberries:</b>
‚Ä¢ –û—Ç–∑—ã–≤—ã: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if Config.WB_API_TOKEN else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
‚Ä¢ –û—Ç—á–µ—Ç—ã: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if Config.WB_REPORTS_TOKEN else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

üîµ <b>Ozon:</b>
‚Ä¢ Client-ID: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if Config.OZON_CLIENT_ID else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
‚Ä¢ API-Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if Config.OZON_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

ü§ñ <b>OpenAI:</b>
‚Ä¢ API-Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if Config.OPENAI_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

‚ÑπÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""

    back_button = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_settings")
    )
    await callback_query.message.edit_text(text, reply_markup=back_button)


@dp.callback_query_handler(text="back_settings")
async def back_to_settings(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback_query.answer()
    await settings_handler(callback_query.message)


# Date range callback handler
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("rng:"))
async def cb_range(call: types.CallbackQuery):
    preset = call.data.split(":", 1)[1]
    uid = call.from_user.id
    last = user_last.get(uid, "pnl")
    f, t = preset_range(preset)
    await bot.answer_callback_query(call.id)
    await bot.send_message(
        uid, f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {f}‚Äì{t}. –°–æ–±–∏—Ä–∞—é {last.upper()}‚Ä¶", parse_mode="HTML"
    )
    try:
        if last == "pnl":
            text = report_pnl(f, t, "day")
        elif last == "dds":
            text = report_dds(f, t)
        else:
            text = report_romi(f, t)
        for part in split_message(text):
            await bot.send_message(uid, part, parse_mode="HTML")
    except Exception as e:
        await bot.send_message(uid, f"‚ùå –û—à–∏–±–∫–∞: {e}", parse_mode="HTML")


@dp.callback_query_handler(answer_callback.filter())
async def handle_answer_callback(callback_query: types.CallbackQuery, callback_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å'"""
    await callback_query.answer()

    answer_type = callback_data["type"]  # 'review' –∏–ª–∏ 'question'
    item_id = callback_data["id"]

    logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω callback: type={answer_type}, id={item_id}")

    try:
        if answer_type == "review":
            logger.info(f"üìù –ò—â–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ: {item_id}")
            review = get_review(item_id)

            if not review:
                logger.error(f"‚ùå –û—Ç–∑—ã–≤ {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await callback_query.message.edit_reply_markup(reply_markup=None)
                await callback_query.message.reply("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            logger.info(f"‚úÖ –û—Ç–∑—ã–≤ –Ω–∞–π–¥–µ–Ω: {review['id']}, –æ—Ç–≤–µ—Ç: {review['answer'][:50]}...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API Wildberries
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API...")
            success = await post_answer_feedback(review["id"], review["answer"])

            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {success}")

            if success:
                mark_review_answered(review["id"])
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –≤ –∫–æ–Ω—Ü–µ
                original_text = callback_query.message.text
                updated_text = original_text + "\n\n(‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω)"

                await callback_query.message.edit_text(
                    text=updated_text, parse_mode="HTML", reply_markup=None
                )
                logger.info("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –æ—Ç–≤–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ {item_id}")
                await callback_query.message.reply(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç (–æ—à–∏–±–∫–∞ API). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        elif answer_type == "question":
            question = get_question(item_id)
            if not question:
                await callback_query.message.edit_reply_markup(reply_markup=None)
                await callback_query.message.reply("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API Wildberries
            success = await post_answer_question(question["id"], question["answer"])

            if success:
                mark_question_answered(question["id"])
                new_markup = InlineKeyboardMarkup().add(
                    InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data="sent")
                )
                await callback_query.message.edit_reply_markup(reply_markup=new_markup)
                await callback_query.message.reply("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await callback_query.message.reply(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback_query.message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e!s}")


async def check_new_reviews_and_questions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)"""
    logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
        new_reviews = await get_new_reviews()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_reviews)} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

        for review in new_reviews:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤
            reply = await generate_review_reply(review)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_review(
                {
                    "id": review["id"],
                    "sku": review.get("sku", "N/A"),
                    "text": review.get("text", ""),
                    "rating": review.get("rating", 0),
                    "has_media": review.get("has_media", False),
                    "answer": reply,
                    "date": review.get("date", datetime.now()),
                    "answered": False,
                }
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            stars = "‚≠ê" * review.get("rating", 0)
            media_info = " [üì∑ –§–æ—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞]" if review.get("has_media") else ""
            review_text = review.get("text") or "–æ—Ç–∑—ã–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
            product_name = review.get("product_name", review.get("sku", "N/A"))

            # –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –û–¢–ó–´–í–´ - –ë–ï–ó –î–ï–ú–û –†–ï–ñ–ò–ú–ê!

            message_text = f"""üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ —Ç–æ–≤–∞—Ä <b>{product_name}</b> ‚Äì {stars}{media_info}:
"<i>{review_text}</i>"
<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {reply}"""

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    "–û—Ç–≤–µ—Ç–∏—Ç—å ‚úÖ", callback_data=answer_callback.new(type="review", id=review["id"])
                )
            )

            try:
                logger.info(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ {review['id']} –≤ —á–∞—Ç {Config.MANAGER_CHAT_ID}"
                )
                await bot.send_message(
                    Config.MANAGER_CHAT_ID, message_text, reply_markup=keyboard, parse_mode="HTML"
                )
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ {review['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as send_error:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–µ {review['id']}: {send_error}"
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        new_questions = await get_new_questions()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_questions)} –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")

        for question in new_questions:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
            reply = await generate_question_reply(question)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            save_question(
                {
                    "id": question["id"],
                    "sku": question.get("sku", "N/A"),
                    "text": question.get("text", ""),
                    "answer": reply,
                    "date": question.get("date", datetime.now()),
                    "answered": False,
                }
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            message_text = f"""‚ùì <b>–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ {question.get('sku', 'N/A')}:</b>
"<i>{question.get('text', 'N/A')}</i>"

<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:</b> {reply}"""

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    "–û—Ç–≤–µ—Ç–∏—Ç—å ‚úÖ",
                    callback_data=answer_callback.new(type="question", id=question["id"]),
                )
            )

            await bot.send_message(
                Config.MANAGER_CHAT_ID, message_text, reply_markup=keyboard, parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await bot.send_message(
            Config.MANAGER_CHAT_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e!s}"
        )


async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ SoVAni Bot...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
    await http_async.init_http_client()
    logger.info("HTTP –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞
    # –ù–æ–≤–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    commands = [
        BotCommand("start", "üéÜ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("reports", "üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"),
        BotCommand("reviews", "‚≠ê –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã"),
        BotCommand("all_reviews", "üìã –í–°–ï –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã"),
        BotCommand("api_status", "üîç API —Å—Ç–∞—Ç—É—Å"),
        BotCommand("help", "üìã –ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤
    await setup_reviews_handlers(dp)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
    auto_processor.bot = bot
    auto_processor.set_admin_chat_id(Config.MANAGER_CHAT_ID)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    scheduler.add_job(
        check_new_reviews_and_questions,
        "cron",
        hour=6,  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00
        minute=0,
        timezone="Europe/Moscow",
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞)
    scheduler.add_job(
        auto_processor._process_reviews_cycle,
        "cron",
        hour="6,10,14,18,22",  # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞: 06:00, 10:00, 14:00, 18:00, 22:00
        minute=0,
        timezone="Europe/Moscow",
    )

    scheduler.start()
    logger.info(
        "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞: 6:00, 10:00, 14:00, 18:00, 22:00)"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    try:
        await bot.send_message(
            Config.MANAGER_CHAT_ID,
            "ü§ñ <b>SoVAni Bot –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00)\n"
            "ü§ñ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å ChatGPT (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞: 6:00, 10:00, 14:00, 18:00, 22:00)\n"
            "‚≠ê –ö–æ–º–∞–Ω–¥–∞ /reviews –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏\n"
            "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–Ω–∞\n"
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω\n"
            "üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–≤–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –í–°–ï–• –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...",
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await auto_processor.process_all_unanswered_reviews()
        logger.info("–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")


async def on_shutdown(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ SoVAni Bot...")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
    await http_async.close_http_client()
    logger.info("HTTP –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")

    try:
        scheduler.shutdown()
    except:
        pass


# == STRICT REALITY MODE ==
from handlers.rca import ads as _rca_ads
from handlers.rca import finance as _rca_finance
from handlers.rca import inventory as _rca_inventory
from handlers.rca import reviews as _rca_reviews


def _fmt_missing(miss: list):
    if not miss:
        return ""
    return "\n".join([f"‚Ä¢ {m}" for m in miss])


@dp.message_handler(commands=["pnl_strict"])
async def pnl_real(message: types.Message):
    f, t = range_preset("7d")
    try:
        st = await _rca_finance(f, t)
        miss = st.get("missing", [])
        if miss:
            txt = (
                "<b>–û—Ç—á—ë—Ç P&L –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω.</b>\n<b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
                + _fmt_missing(miss)
                + "\n\n<b>–î–µ–π—Å—Ç–≤–∏—è:</b> –æ—Ç–∫—Ä–æ–π—Ç–µ https://justbusiness.lol/finance –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ/–≤–∫–ª—é—á–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ."
            )
            for part in split_long(txt):
                await message.answer(part, parse_mode="HTML")
            return
        txt = await pnl_text(f, t, "day")
        for part in split_long(txt):
            await message.answer(part, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ P&L: {e}", parse_mode="HTML")


@dp.message_handler(commands=["dds_strict"])
async def dds_real(message: types.Message):
    f, t = range_preset("7d")
    try:
        st = await _rca_finance(f, t)
        miss = st.get("missing", [])
        if miss:
            txt = (
                "<b>DDS –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω.</b>\n<b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
                + _fmt_missing(miss)
                + "\n\n<b>–î–µ–π—Å—Ç–≤–∏—è:</b> –∑–∞–≥—Ä—É–∑–∏—Ç–µ Cashflow CSV –∏ COGS/OPEX –Ω–∞ https://justbusiness.lol/finance."
            )
            for part in split_long(txt):
                await message.answer(part, parse_mode="HTML")
            return
        txt = dds_text(f, t)
        for part in split_long(txt):
            await message.answer(part, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ DDS: {e}", parse_mode="HTML")


@dp.message_handler(commands=["romi_strict"])
async def romi_real(message: types.Message):
    f, t = range_preset("7d")
    try:
        st = await _rca_ads(f, t)
        miss = st.get("missing", [])
        if miss:
            txt = (
                "<b>ROMI –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω.</b>\n<b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
                + _fmt_missing(miss)
                + "\n\n<b>–î–µ–π—Å—Ç–≤–∏—è:</b> –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∫–ª–∞–º—ã –Ω–∞ https://justbusiness.lol/ads."
            )
            for part in split_long(txt):
                await message.answer(part, parse_mode="HTML")
            return
        txt = romi_text(f, t)
        for part in split_long(txt):
            await message.answer(part, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ ROMI: {e}", parse_mode="HTML")


@dp.message_handler(commands=["stock_strict"])
async def stock_real(message: types.Message):
    try:
        st = await _rca_inventory()
        miss = st.get("missing", [])
        if miss:
            txt = (
                "<b>–û—Å—Ç–∞—Ç–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.</b>\n<b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
                + _fmt_missing(miss)
                + "\n\n<b>–î–µ–π—Å—Ç–≤–∏—è:</b> –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–Ω–µ–ø—à–æ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—Ç–∞–≤–æ–∫ –Ω–∞ https://justbusiness.lol/inventory."
            )
            for part in split_long(txt):
                await message.answer(part, parse_mode="HTML")
            return
        txt = await stock_snapshot()
        for part in split_long(txt):
            await message.answer(part, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –û—Å—Ç–∞—Ç–∫–æ–≤: {e}", parse_mode="HTML")


@dp.message_handler(commands=["repl_strict"])
async def repl_real(message: types.Message):
    try:
        st = await _rca_inventory()
        miss = st.get("missing", [])
        if miss:
            txt = (
                "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã.</b>\n<b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
                + _fmt_missing(miss)
                + "\n\n<b>–î–µ–π—Å—Ç–≤–∏—è:</b> –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—Ç–∞–≤–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂ –Ω–∞ https://justbusiness.lol/inventory."
            )
            for part in split_long(txt):
                await message.answer(part, parse_mode="HTML")
            return
        txt = await repl_recommendations()
        for part in split_long(txt):
            await message.answer(part, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}", parse_mode="HTML")


@dp.message_handler(commands=["reviews_strict"])
async def reviews_real(message: types.Message):
    try:
        st = await _rca_reviews()
        miss = st.get("missing", [])
        if miss:
            txt = (
                "<b>–û—Ç–∑—ã–≤—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</b>\n<b>–ü—Ä–∏—á–∏–Ω—ã:</b>\n"
                + _fmt_missing(miss)
                + "\n\n<b>–î–µ–π—Å—Ç–≤–∏—è:</b> –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç–∑—ã–≤—ã CSV –∏ –¥–æ–±–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ https://justbusiness.lol/reviews."
            )
            for part in split_long(txt):
                await message.answer(part, parse_mode="HTML")
            return
        txt = reviews_new_last24()
        for part in split_long(txt):
            await message.answer(part, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –û—Ç–∑—ã–≤–æ–≤: {e}", parse_mode="HTML")


@dp.message_handler(commands=["diag_bot"])
async def diag_bot_handler(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (BOT-ASYNC-FIX)"""
    try:
        await message.answer("üîß –í—ã–ø–æ–ª–Ω—è—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –±–æ—Ç–∞...", parse_mode="HTML")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        import os
        from datetime import date, timedelta

        bot_token_ok = bool(os.getenv("BOT_TOKEN"))
        backend_url = http_async.get_backend_base_url()
        service_token_ok = bool(http_async.get_service_token())

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints
        health_results = await http_async.health_check()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤–æ–≥–æ P&L –∑–∞–ø—Ä–æ—Å–∞
        date_to = date.today()
        date_from = date_to - timedelta(days=7)
        sample_pnl = await http_async.get_json(
            "/finance/pnl",
            params={
                "platform": "all",
                "date_from": date_from.isoformat(),
                "date_to": date_to.isoformat(),
            },
        )

        # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫–æ–¥–µ
        import glob

        problematic_patterns = 0
        try:
            for py_file in glob.glob("/root/sovani_bot/*.py"):
                with open(py_file) as f:
                    content = f.read()
                    if (
                        "asyncio.run(" in content
                        or "run_until_complete(" in content
                        or "nest_asyncio" in content
                    ):
                        problematic_patterns += 1
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = f"""üîß <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SoVAni Bot</b>

<b>ü§ñ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ Bot Token: {'‚úÖ' if bot_token_ok else '‚ùå'} {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if bot_token_ok else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
‚Ä¢ Backend URL: <code>{backend_url}</code>
‚Ä¢ X-Service-Token: {'‚úÖ' if service_token_ok else '‚ùå'} {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω' if service_token_ok else '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

<b>üåê –ë—ç–∫–µ–Ω–¥:</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if health_results['backend_reachable'] else '‚ùå'} {'–¥–æ—Å—Ç—É–ø–µ–Ω' if health_results['backend_reachable'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
‚Ä¢ Health —Å—Ç–∞—Ç—É—Å: {health_results.get('health_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ Ops Health: {health_results.get('ops_health_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

<b>üîÑ Async —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:</b>
‚Ä¢ HTTP Client: httpx.AsyncClient
‚Ä¢ Event Loop Nested Calls: {problematic_patterns} –Ω–∞–π–¥–µ–Ω–æ
‚Ä¢ Bot Async OK: {'yes' if problematic_patterns == 0 else 'no'}

<b>üìä –¢–µ—Å—Ç–æ–≤—ã–π API –≤—ã–∑–æ–≤:</b>
‚Ä¢ Sample PnL: {'OK' if sample_pnl else 'error'}
{f"  Data: {len(sample_pnl)} –ø–æ–ª–µ–π" if sample_pnl else "  Error: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏"}

<b>üéØ –°—Ç–∞—Ç—É—Å:</b>
{'‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!' if (bot_token_ok and service_token_ok and health_results['backend_reachable'] and problematic_patterns == 0) else '‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è'}"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç
        parts = split_message(report)
        for part in parts:
            await message.answer(part, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}", parse_mode="HTML")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ diag_bot: {e}")


@dp.message_handler(commands=["debug_backend"])
async def debug_backend_handler(message: types.Message):
    """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥ endpoints"""
    from datetime import date, timedelta

    await message.answer("üîß –¢–µ—Å—Ç–∏—Ä—É—é –±—ç–∫–µ–Ω–¥ endpoints...", parse_mode="HTML")

    # –ó–∞–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    today = date.today()
    date_from = (today - timedelta(days=3)).isoformat()
    date_to = today.isoformat()

    # –°–ø–∏—Å–æ–∫ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    endpoints = [
        ("/health", {}),
        ("/live/finance/pnl_v2", {"platform": "wb", "date_from": date_from, "date_to": date_to}),
        ("/live/inventory/stock", {"platform": "wb"}),
        ("/live/ads/overview", {"platform": "wb", "date_from": date_from, "date_to": date_to}),
    ]

    results = []

    for endpoint, params in endpoints:
        try:
            import time

            start_time = time.time()

            result = await http_async.get_json(endpoint, params=params)

            duration = int((time.time() - start_time) * 1000)
            status = "‚úÖ 200" if result else "‚ùå No data"
            response_preview = str(result)[:200] if result else "Empty response"

            results.append(
                {
                    "endpoint": endpoint,
                    "status": status,
                    "duration": duration,
                    "preview": response_preview,
                }
            )

        except Exception as e:
            import time

            duration = int((time.time() - start_time) * 1000)
            error_msg = http_async.format_error_message(e)

            results.append(
                {
                    "endpoint": endpoint,
                    "status": f"‚ùå {error_msg}",
                    "duration": duration,
                    "preview": str(e)[:100],
                }
            )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = ["üîß <b>Backend Endpoints Test</b>\n"]

    for r in results:
        report.append(f"<b>{r['endpoint']}</b>")
        report.append(f"Status: {r['status']}")
        report.append(f"Duration: {r['duration']}ms")
        report.append(f"Preview: <code>{r['preview']}</code>\n")

    report_text = "\n".join(report)
    parts = split_message(report_text)

    for part in parts:
        await message.answer(part, parse_mode="HTML")


@dp.message_handler(commands=["diag_loop"])
async def diag_loop_handler(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö async –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –±–æ—Ç–µ"""
    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é async –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–æ–¥–µ...", parse_mode="HTML")

    import glob

    # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    banned_patterns = [
        "asyncio.run(",
        "run_until_complete(",
        "nest_asyncio",
        "requests.get(",
        "requests.post(",
    ]

    violations = []

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
        for py_file in glob.glob("/root/sovani_bot/*.py") + glob.glob(
            "/root/sovani_bot/**/*.py", recursive=True
        ):
            if ".bak" in py_file or "__pycache__" in py_file:
                continue

            try:
                with open(py_file, encoding="utf-8") as f:
                    lines = f.readlines()

                for line_num, line in enumerate(lines, 1):
                    for pattern in banned_patterns:
                        if pattern in line and not line.strip().startswith("#"):
                            violations.append(
                                {
                                    "file": py_file.replace("/root/sovani_bot/", ""),
                                    "line": line_num,
                                    "pattern": pattern,
                                    "code": line.strip()[:80],
                                }
                            )
            except Exception:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ —á—Ç–µ–Ω–∏—è

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", parse_mode="HTML")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if not violations:
        report = """‚úÖ <b>Bot Async OK: yes</b>

üîç <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b>
‚Ä¢ asyncio.run() - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
‚Ä¢ run_until_complete() - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
‚Ä¢ nest_asyncio - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
‚Ä¢ requests.get() - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
‚Ä¢ requests.post() - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

‚ú® –í—Å–µ async –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!"""
    else:
        report = ["‚ùå <b>Bot Async OK: no</b>"]
        report.append(f"<b>–ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π:</b> {len(violations)}\n")

        for v in violations[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            report.append(f"<b>{v['file']}:{v['line']}</b>")
            report.append(f"Pattern: <code>{v['pattern']}</code>")
            report.append(f"Code: <code>{v['code']}</code>\n")

        if len(violations) > 10:
            report.append(f"... –∏ –µ—â—ë {len(violations) - 10} –Ω–∞—Ä—É—à–µ–Ω–∏–π")

    report_text = "\n".join(report) if isinstance(report, list) else report
    parts = split_message(report_text)

    for part in parts:
        await message.answer(part, parse_mode="HTML")


# ====== UNIFIED REPORTING COMMANDS (PROMPT-BOT-REPORT-V2) ======


def get_period_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="period:today"),
        InlineKeyboardButton("üìÖ –í—á–µ—Ä–∞", callback_data="period:yesterday"),
    )
    kb.add(
        InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data="period:7d"),
        InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data="period:30d"),
    )
    return kb


def get_platform_keyboard(command):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üü£ Wildberries", callback_data=f"{command}:wb"),
        InlineKeyboardButton("üîµ Ozon", callback_data=f"{command}:ozon"),
    )
    kb.add(InlineKeyboardButton("üìä –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data=f"{command}:all"))
    return kb


async def format_currency(amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ API"""
    if amount is None or amount == 0:
        return "‚Äî"
    try:
        return f"{amount:,.0f} ‚ÇΩ".replace(",", " ")
    except:
        return "‚Äî"


async def format_percentage(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
    if value is None:
        return "‚Äî"
    try:
        return f"{value:.1f}%"
    except:
        return "‚Äî"


@dp.message_handler(commands=["pnl"])
async def pnl_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ P&L - –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏"""
    await message.answer(
        "üí∞ <b>P&L - –ü—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_platform_keyboard("pnl"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("pnl:"))
async def pnl_platform_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è P&L"""
    platform = callback.data.split(":")[1]

    await callback.message.edit_text(
        "üí∞ <b>P&L - –ü—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏</b>\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{'Wildberries' if platform == 'wb' else 'Ozon' if platform == 'ozon' else '–í—Å–µ'}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard(),
        parse_mode="HTML",
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    user_data = dp.current_state(user=callback.from_user.id)
    await user_data.set_data({"command": "pnl", "platform": platform})


@dp.message_handler(commands=["romi"])
async def romi_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ ROMI - –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    await message.answer(
        "üìà <b>ROMI - –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_platform_keyboard("romi"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("romi:"))
async def romi_platform_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è ROMI"""
    platform = callback.data.split(":")[1]

    await callback.message.edit_text(
        "üìà <b>ROMI - –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{'Wildberries' if platform == 'wb' else 'Ozon' if platform == 'ozon' else '–í—Å–µ'}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard(),
        parse_mode="HTML",
    )

    user_data = dp.current_state(user=callback.from_user.id)
    await user_data.set_data({"command": "romi", "platform": platform})


@dp.message_handler(commands=["dds"])
async def dds_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ DDS - –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º"""
    await message.answer(
        "üìä <b>DDS - Daily Detailed Sales</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_platform_keyboard("dds"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("dds:"))
async def dds_platform_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è DDS"""
    platform = callback.data.split(":")[1]

    await callback.message.edit_text(
        "üìä <b>DDS - Daily Detailed Sales</b>\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{'Wildberries' if platform == 'wb' else 'Ozon' if platform == 'ozon' else '–í—Å–µ'}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard(),
        parse_mode="HTML",
    )

    user_data = dp.current_state(user=callback.from_user.id)
    await user_data.set_data({"command": "dds", "platform": platform})


@dp.message_handler(commands=["stock"])
async def stock_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö"""
    await message.answer(
        "üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_platform_keyboard("stock"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("stock:"))
async def stock_platform_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    platform = callback.data.split(":")[1]

    # –î–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await callback.message.edit_text("üì¶ <b>–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...</b>", parse_mode="HTML")

    await show_stock_report(callback.message, platform)


@dp.message_handler(commands=["reviews"])
async def reviews_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    await message.answer(
        "‚≠ê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_platform_keyboard("reviews"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("reviews:"))
async def reviews_platform_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"""
    platform = callback.data.split(":")[1]

    await callback.message.edit_text(
        "‚≠ê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{'Wildberries' if platform == 'wb' else 'Ozon' if platform == 'ozon' else '–í—Å–µ'}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard(),
        parse_mode="HTML",
    )

    user_data = dp.current_state(user=callback.from_user.id)
    await user_data.set_data({"command": "reviews", "platform": platform})


@dp.callback_query_handler(lambda c: c.data.startswith("period:"))
async def period_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    from date_picker import DatePicker, date_range_manager, get_calendar_for_date_selection

    period = callback.data.split(":")[1]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if period == "custom":
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        selection = date_range_manager.get_selection(user_id)
        context = selection.get("context") if selection else None

        await callback.message.edit_text(
            "üìÖ <b>–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=get_calendar_for_date_selection(selection_type="from", context=context),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    try:
        date_from_str, date_to_str = DatePicker.parse_predefined_period(period)
        period_description = DatePicker.format_period_description(date_from_str, date_to_str)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selection = date_range_manager.get_selection(callback.from_user.id)
        if not selection:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ—Ç–µ—Ä—è–Ω")
            return

        context = selection.get("context", "financial_report")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
        await generate_report_for_period(
            callback.message, context, date_from_str, date_to_str, period_description
        )

        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        date_range_manager.clear_selection(callback.from_user.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ {period}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–∏–æ–¥–∞")
        return

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query_handler(lambda c: c.data.startswith("calendar:"))
async def calendar_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    from datetime import datetime

    from date_picker import DatePicker, date_range_manager, get_calendar_for_date_selection

    data_parts = callback.data.split(":")
    action = data_parts[1]

    if action == "ignore":
        await callback.answer()
        return

    elif action == "cancel":
        date_range_manager.clear_selection(callback.from_user.id)
        await callback.message.edit_text("‚ùå –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω")
        await callback.answer()
        return

    elif action == "quick":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –±—ã—Å—Ç—Ä—ã–º –ø–µ—Ä–∏–æ–¥–∞–º
        from date_picker import get_enhanced_period_menu

        await callback.message.edit_text(
            "üìä <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n\n" "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=get_enhanced_period_menu(),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    elif action in ["from", "to"]:
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        year, month = int(data_parts[2]), int(data_parts[3])
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        selection = date_range_manager.get_selection(user_id)
        context = selection.get("context") if selection else None

        await callback.message.edit_reply_markup(
            reply_markup=get_calendar_for_date_selection(year, month, action, context)
        )
        await callback.answer()
        return

    elif action == "select":
        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        selection_type = data_parts[2]  # from –∏–ª–∏ to
        year, month, day = int(data_parts[3]), int(data_parts[4]), int(data_parts[5])
        selected_date = f"{year:04d}-{month:02d}-{day:02d}"

        user_id = callback.from_user.id
        selection = date_range_manager.get_selection(user_id)

        if not selection:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞")
            return

        if selection_type == "from":
            # –í—ã–±—Ä–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            date_range_manager.set_date_from(user_id, selected_date)

            formatted_date = datetime.strptime(selected_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
            selection = date_range_manager.get_selection(user_id)
            context = selection.get("context") if selection else None

            await callback.message.edit_text(
                f"üìÖ <b>–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞</b>\n\n"
                f"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {formatted_date}\n"
                f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=get_calendar_for_date_selection(selection_type="to", context=context),
                parse_mode="HTML",
            )

        elif selection_type == "to":
            # –í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            date_range_manager.set_date_to(user_id, selected_date)

            selection = date_range_manager.get_selection(user_id)
            date_from = selection["date_from"]
            date_to = selected_date
            context = selection.get("context", "financial_report")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            is_valid, error_msg = DatePicker.validate_date_range(date_from, date_to, context)
            if not is_valid:
                await callback.message.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç</b>\n\n" f"{error_msg}\n\n" f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    reply_markup=get_calendar_for_date_selection(
                        selection_type="from", context=context
                    ),
                    parse_mode="HTML",
                )
                await callback.answer()
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            period_description = DatePicker.format_period_description(date_from, date_to)
            context = selection.get("context", "financial_report")

            await generate_report_for_period(
                callback.message, context, date_from, date_to, period_description
            )
            date_range_manager.clear_selection(user_id)

        await callback.answer()


async def generate_report_for_period(
    message, context: str, date_from: str, date_to: str, period_description: str
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await message.edit_text(
        f"üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...</b>\n\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_description}\n"
        f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
        parse_mode="HTML",
    )

    try:
        if context == "financial_report":
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            report, markup = await generate_enhanced_financial_report(date_from, date_to, message)

        elif context == "cumulative_report":
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            from datetime import datetime

            days = (
                datetime.strptime(date_to, "%Y-%m-%d") - datetime.strptime(date_from, "%Y-%m-%d")
            ).days + 1
            report, markup = await generate_enhanced_cumulative_report(days)

        elif context == "wb_financial":
            # WB —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç
            from excel_bot_integration import generate_wb_financial_report

            report, markup = await generate_wb_financial_report(date_from, date_to, message)

        elif context == "ozon_financial":
            # Ozon —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç
            from excel_bot_integration import generate_ozon_financial_report

            report, markup = await generate_ozon_financial_report(date_from, date_to, message)

        else:
            report = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: {context}"
            markup = None

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = split_message(report)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.edit_text(
            parts[0],
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=markup if len(parts) == 1 else None,
        )

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, part in enumerate(parts[1:]):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
            part_markup = markup if i == len(parts) - 2 else None
            await message.answer(
                part, parse_mode="HTML", disable_web_page_preview=True, reply_markup=part_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {context}: {e}")
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_description}\n"
            f"‚ùó {str(e)[:200]}",
            parse_mode="HTML",
        )


async def show_pnl_report(message, platform, date_from, date_to, period_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç P&L —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ API endpoint
        from real_data_reports import RealDataFinancialReports

        real_reports = RealDataFinancialReports()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º platform –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if platform == "all":
            platform_filter = "both"
        elif platform == "wb":
            platform_filter = "wb"
        elif platform == "ozon":
            platform_filter = "ozon"
        else:
            platform_filter = "both"

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        pnl_data = await real_reports.calculate_real_pnl(
            date_from.strftime("%Y-%m-%d"),
            date_to.strftime("%Y-%m-%d"),
            platform_filter=platform_filter,
        )

        if not pnl_data:
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö P&L</b>\n\n"
                "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                parse_mode="HTML",
            )
            return

        # –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º format_real_pnl_report –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        base_report = real_reports.format_real_pnl_report(pnl_data)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        platform_name = {"wb": "üü£ Wildberries", "ozon": "üîµ Ozon", "both": "üìä –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"}.get(
            platform_filter, "üìä –í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        processing_time = pnl_data.get("processing_time", 0)
        parallelized = pnl_data.get("parallelized", False)
        chunked = pnl_data.get("chunked", False)

        performance_info = f"\n\n‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞: {processing_time:.1f}—Å"
        if parallelized:
            performance_info += " (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
            if chunked:
                performance_info += ", chunked"
            performance_info += ")"

        report = f"üí∞ <b>P&L - –ü—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–∏</b>\n{platform_name}\nüìÖ <b>{period_name}</b>\n\n{base_report}{performance_info}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(
                "üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data=f"export_pnl:{platform}:{date_from}:{date_to}"
            ),
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_pnl:{platform}:{date_from}:{date_to}"
            ),
        )

        await message.edit_text(report, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ P&L</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ P&L: {e}")


async def show_romi_report(message, platform, date_from, date_to, period_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç ROMI"""
    try:
        # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö ROMI
        romi_data = await http_async.get_json(
            "/ads/overview",
            params={
                "platform": platform,
                "date_from": date_from.isoformat(),
                "date_to": date_to.isoformat(),
            },
        )

        if not romi_data:
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ROMI</b>\n\n"
                "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                parse_mode="HTML",
            )
            return

        platform_emoji = {"wb": "üü£", "ozon": "üîµ", "all": "üìä"}[platform]
        platform_name = {"wb": "Wildberries", "ozon": "Ozon", "all": "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"}[platform]

        ads_spend = romi_data.get("ads_spend", 0)
        ads_revenue = romi_data.get("ads_revenue", 0)
        romi_percent = romi_data.get("romi_percent", 0)
        clicks = romi_data.get("clicks", 0)
        impressions = romi_data.get("impressions", 0)
        ctr = romi_data.get("ctr", 0)

        report = f"""üìà <b>ROMI - –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>

{platform_emoji} <b>{platform_name}</b>
üìÖ <b>{period_name}</b>

üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:</b> {await format_currency(ads_spend)}
üíµ <b>–í—ã—Ä—É—á–∫–∞ –æ—Ç —Ä–µ–∫–ª–∞–º—ã:</b> {await format_currency(ads_revenue)}
üìà <b>ROMI:</b> {await format_percentage(romi_percent)}

üëÄ <b>–ü–æ–∫–∞–∑—ã:</b> {impressions:,}
üëÜ <b>–ö–ª–∏–∫–∏:</b> {clicks:,}
üí° <b>CTR:</b> {await format_percentage(ctr)}

<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.now().strftime('%H:%M')}</i>"""

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_romi:{platform}:{date_from}:{date_to}"
            )
        )

        await message.edit_text(report, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ROMI</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ ROMI: {e}")


async def show_dds_report(message, platform, date_from, date_to, period_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç DDS"""
    try:
        dds_data = await http_async.get_json(
            "/finance/dds",
            params={
                "platform": platform,
                "date_from": date_from.isoformat(),
                "date_to": date_to.isoformat(),
            },
        )

        if not dds_data or not dds_data.get("daily_sales"):
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö DDS</b>\n\n"
                "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥",
                parse_mode="HTML",
            )
            return

        platform_emoji = {"wb": "üü£", "ozon": "üîµ", "all": "üìä"}[platform]
        platform_name = {"wb": "Wildberries", "ozon": "Ozon", "all": "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"}[platform]

        daily_sales = dds_data["daily_sales"]
        total_revenue = sum(day.get("revenue", 0) for day in daily_sales)
        total_orders = sum(day.get("orders", 0) for day in daily_sales)

        report = f"""üìä <b>DDS - Daily Detailed Sales</b>

{platform_emoji} <b>{platform_name}</b>
üìÖ <b>{period_name}</b>

üí∞ <b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {await format_currency(total_revenue)}
üõí <b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {total_orders:,}

üìà <b>–ü–æ –¥–Ω—è–º:</b>\n"""

        for day in daily_sales[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π
            day_date = day.get("date", "")
            day_revenue = day.get("revenue", 0)
            day_orders = day.get("orders", 0)

            report += f"‚Ä¢ {day_date}: {await format_currency(day_revenue)} ({day_orders} –∑–∞–∫.)\n"

        if len(daily_sales) > 10:
            report += f"\n<i>... –∏ –µ—â—ë {len(daily_sales) - 10} –¥–Ω–µ–π</i>\n"

        report += f"\n<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.now().strftime('%H:%M')}</i>"

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_dds:{platform}:{date_from}:{date_to}"
            )
        )

        await message.edit_text(report, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DDS</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ DDS: {e}")


async def show_stock_report(message, platform):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π live endpoint
        stock_data = await http_async.get_json(
            "/live/inventory/stock", params={"platform": platform}
        )

        if not stock_data:
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤</b>\n\n" "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                parse_mode="HTML",
            )
            return

        platform_emoji = {"wb": "üü£", "ozon": "üîµ", "all": "üìä"}[platform]
        platform_name = {"wb": "Wildberries", "ozon": "Ozon", "all": "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"}[platform]

        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç live endpoint
        if platform == "all":
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            wb_stocks = stock_data.get("wb", [])
            ozon_stocks = stock_data.get("ozon", [])
            total_items = len(wb_stocks) + len(ozon_stocks)

            text = "üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö</b>\n\n"

            # Wildberries —Å–µ–∫—Ü–∏—è
            if wb_stocks:
                text += "üü£ <b>Wildberries</b>\n"
                wb_total_qty = sum(item.get("quantity", 0) for item in wb_stocks)
                text += f"üìä –¢–æ–≤–∞—Ä–æ–≤: {len(wb_stocks)}\n"
                text += f"üì¶ –û–±—â–µ–µ –∫–æ–ª-–≤–æ: {wb_total_qty:,}\n\n"
            else:
                text += "üü£ <b>Wildberries</b>\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

            # Ozon —Å–µ–∫—Ü–∏—è
            if ozon_stocks:
                text += "üîµ <b>Ozon</b>\n"
                ozon_total_qty = sum(item.get("quantity", 0) for item in ozon_stocks)
                text += f"üìä –¢–æ–≤–∞—Ä–æ–≤: {len(ozon_stocks)}\n"
                text += f"üì¶ –û–±—â–µ–µ –∫–æ–ª-–≤–æ: {ozon_total_qty:,}\n\n"
            else:
                text += "üîµ <b>Ozon</b>\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

            text += "üìä <b>–ò–¢–û–ì–û</b>\n"
            text += f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}\n"
            text += f"üì¶ –û–±—â–µ–µ –∫–æ–ª-–≤–æ: {sum(item.get('quantity', 0) for item in wb_stocks + ozon_stocks):,}"

        else:
            # –û–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            stocks = stock_data if isinstance(stock_data, list) else stock_data.get("data", [])
            total_items = len(stocks)
            total_quantity = sum(item.get("quantity", 0) for item in stocks)
            total_value = sum(item.get("value", 0) for item in stocks)

            text = f"""üì¶ <b>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö</b>

{platform_emoji} <b>{platform_name}</b>
üïê <b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>

üìä <b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_items}
üì¶ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {total_quantity:,} —à—Ç."""

            if total_value > 0:
                text += f"\nüí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {await format_currency(total_value)}"

            if stocks:
                text += "\n\nüîù <b>–¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:</b>\n"

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                top_stocks = sorted(stocks, key=lambda x: x.get("quantity", 0), reverse=True)[:10]

                for i, item in enumerate(top_stocks, 1):
                    name = item.get("name", item.get("vendor_code", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))[:30]
                    quantity = item.get("quantity", 0)
                    price = item.get("price", 0)

                    text += f"{i}. <b>{name}</b>\n"
                    if price > 0:
                        text += f"   üì¶ {quantity} —à—Ç. √ó {await format_currency(price)}\n"
                    else:
                        text += f"   üì¶ {quantity} —à—Ç.\n"

            text += f"\n<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.now().strftime('%H:%M')}</i>"

        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_stock:{platform}"))

        await message.edit_text(text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")


async def show_reviews_report(message, platform, date_from, date_to, period_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º"""
    try:
        reviews_data = await http_async.get_json(
            "/reviews/stats",
            params={
                "platform": platform,
                "date_from": date_from.isoformat(),
                "date_to": date_to.isoformat(),
            },
        )

        if not reviews_data:
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
                "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                parse_mode="HTML",
            )
            return

        platform_emoji = {"wb": "üü£", "ozon": "üîµ", "all": "üìä"}[platform]
        platform_name = {"wb": "Wildberries", "ozon": "Ozon", "all": "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"}[platform]

        total_reviews = reviews_data.get("total_reviews", 0)
        avg_rating = reviews_data.get("avg_rating", 0)
        five_star = reviews_data.get("five_star", 0)
        four_star = reviews_data.get("four_star", 0)
        three_star = reviews_data.get("three_star", 0)
        two_star = reviews_data.get("two_star", 0)
        one_star = reviews_data.get("one_star", 0)

        report = f"""‚≠ê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>

{platform_emoji} <b>{platform_name}</b>
üìÖ <b>{period_name}</b>

üí¨ <b>–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:</b> {total_reviews}
‚≠ê <b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</b> {avg_rating:.1f}

üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:</b>
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê {five_star} ({five_star/max(total_reviews,1)*100:.0f}%)
‚≠ê‚≠ê‚≠ê‚≠ê {four_star} ({four_star/max(total_reviews,1)*100:.0f}%)
‚≠ê‚≠ê‚≠ê {three_star} ({three_star/max(total_reviews,1)*100:.0f}%)
‚≠ê‚≠ê {two_star} ({two_star/max(total_reviews,1)*100:.0f}%)
‚≠ê {one_star} ({one_star/max(total_reviews,1)*100:.0f}%)

<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.now().strftime('%H:%M')}</i>"""

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_reviews:{platform}:{date_from}:{date_to}"
            )
        )

        await message.edit_text(report, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")


@dp.message_handler(content_types=["document"])
async def handle_document_upload(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (—à–∞–±–ª–æ–Ω–æ–≤ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏)"""
    try:
        document = message.document
        if not document:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not document.file_name.endswith((".xlsx", ".xls")):
            await message.reply("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —à–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        if "cost_template" not in document.file_name.lower():
            await message.reply("‚ùå –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
            return

        status_msg = await message.reply("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω...")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(document.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        import os

        os.makedirs("/root/sovani_bot/uploaded_templates", exist_ok=True)
        file_path = f"/root/sovani_bot/uploaded_templates/uploaded_{document.file_name}"
        with open(file_path, "wb") as f:
            f.write(downloaded_file.read())

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        generator = CostTemplateGenerator()
        processed_data = await generator.process_filled_template(file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        saved_path = await generator.save_cost_data(processed_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        summary = processed_data["summary"]
        response_text = f"""
üí∞ <b>–®–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b>
‚Ä¢ SKU —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {summary['total_sku_with_costs']}
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary['total_variable_costs']}
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {summary['total_fixed_costs']}
‚Ä¢ –°—É–º–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {summary.get('total_fixed_monthly', 0):,.0f} ‚ÇΩ/–º–µ—Å

üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: <code>{saved_path}</code>

üîÑ –¢–µ–ø–µ—Ä—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ SKU
        """

        await status_msg.edit_text(response_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)[:100]}")


@dp.message_handler(commands=["export_pnl"])
async def export_pnl_command(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç P&L –≤ CSV"""
    await message.answer(
        "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç P&L –≤ CSV</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=get_platform_keyboard("export_pnl"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("export_pnl:"))
async def export_pnl_callback(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç P&L –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
    try:
        parts = callback.data.split(":")
        platform = parts[1]

        if len(parts) >= 4:
            # –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç—á—ë—Ç–∞
            date_from = parts[2]
            date_to = parts[3]
        else:
            # –ù–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            from datetime import date, timedelta

            today = date.today()
            date_from = (today - timedelta(days=30)).isoformat()
            date_to = today.isoformat()

        await callback.message.edit_text("üì§ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é CSV —Ñ–∞–π–ª...</b>", parse_mode="HTML")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ P&L
        pnl_data = await http_async.get_json(
            "/finance/pnl",
            params={
                "platform": platform,
                "date_from": date_from,
                "date_to": date_to,
                "detailed": "true",  # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
            },
        )

        if not pnl_data:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", parse_mode="HTML"
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
        import csv
        import io

        output = io.StringIO()
        writer = csv.writer(output)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow(
            ["–î–∞—Ç–∞", "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–í—ã—Ä—É—á–∫–∞", "–†–∞—Å—Ö–æ–¥—ã", "–†–µ–∫–ª–∞–º–∞", "–ü—Ä–∏–±—ã–ª—å", "–ú–∞—Ä–∂–∞_%"]
        )

        # –î–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–Ω—è–º)
        if "daily_data" in pnl_data:
            for day in pnl_data["daily_data"]:
                writer.writerow(
                    [
                        day.get("date", ""),
                        platform.upper(),
                        day.get("revenue", 0),
                        day.get("costs", 0),
                        day.get("ads_spend", 0),
                        day.get("profit", 0),
                        day.get("margin_percent", 0),
                    ]
                )
        else:
            # –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            writer.writerow(
                [
                    f"{date_from} - {date_to}",
                    platform.upper(),
                    pnl_data.get("revenue", 0),
                    pnl_data.get("costs", 0),
                    pnl_data.get("ads_spend", 0),
                    pnl_data.get("profit", 0),
                    pnl_data.get("margin_percent", 0),
                ]
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        csv_content = output.getvalue()
        output.close()

        platform_name = {"wb": "wildberries", "ozon": "ozon", "all": "all_platforms"}[platform]
        filename = f"pnl_{platform_name}_{date_from}_{date_to}.csv"

        from io import BytesIO

        file_bytes = BytesIO(csv_content.encode("utf-8"))
        file_bytes.name = filename

        await bot.send_document(
            callback.message.chat.id,
            file_bytes,
            caption=f"üì§ <b>P&L —ç–∫—Å–ø–æ—Ä—Ç</b>\n\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.upper()}\n"
            f"–ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}",
            parse_mode="HTML",
        )

        await callback.message.delete()

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ P&L: {e}")


@dp.message_handler(commands=["status_live"])
async def status_live_command(message: types.Message):
    """–°—Ç–∞—Ç—É—Å API –∏ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        await message.answer("üîÑ <b>–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...</b>", parse_mode="HTML")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        health_task = http_async.health_check()

        # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        from datetime import date

        today = date.today()

        pnl_test_task = http_async.get_json(
            "/finance/pnl",
            params={
                "platform": "all",
                "date_from": today.isoformat(),
                "date_to": today.isoformat(),
            },
        )

        stock_test_task = http_async.get_json("/inventory/stock", params={"platform": "all"})

        # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        health_result, pnl_result, stock_result = await asyncio.gather(
            health_task, pnl_test_task, stock_test_task, return_exceptions=True
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = f"""üö¶ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã LIVE</b>

üïê <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S')}

üåê <b>Backend Health:</b>"""

        if isinstance(health_result, dict):
            backend_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
            db_status = "‚úÖ –û–ö" if health_result.get("database") == "ok" else "‚ùå –û—à–∏–±–∫–∞"
        elif isinstance(health_result, Exception):
            backend_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            db_status = "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        else:
            backend_status = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            db_status = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        report += f"\n‚Ä¢ API: {backend_status}"
        report += f"\n‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}"

        report += "\n\nüìä <b>API Endpoints:</b>"

        # P&L API
        if isinstance(pnl_result, dict):
            pnl_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
        elif isinstance(pnl_result, Exception):
            pnl_status = "‚ùå –û—à–∏–±–∫–∞"
        else:
            pnl_status = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        report += f"\n‚Ä¢ P&L (/finance/pnl): {pnl_status}"

        # Stock API
        if isinstance(stock_result, dict):
            stock_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
        elif isinstance(stock_result, Exception):
            stock_status = "‚ùå –û—à–∏–±–∫–∞"
        else:
            stock_status = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        report += f"\n‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏ (/inventory/stock): {stock_status}"

        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        all_ok = all(
            [
                isinstance(health_result, dict),
                isinstance(pnl_result, dict),
                isinstance(stock_result, dict),
            ]
        )

        if all_ok:
            overall_status = "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
        else:
            overall_status = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã"

        report += f"\n\nüéØ <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {overall_status}"

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="refresh_status"))

        await message.answer(report, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ status_live: {e}")


@dp.callback_query_handler(lambda c: c.data == "refresh_status")
async def refresh_status_callback(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    await callback.message.edit_text("üîÑ <b>–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...</b>", parse_mode="HTML")
    await status_live_command(callback.message)
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")


# ====== NEW WB INTEGRATION COMMANDS (PROMPT-WB-FULL-IMPLEMENTATION) ======


@dp.message_handler(commands=["ads"])
async def ads_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∫–ª–∞–º—ã"""
    await message.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_platform_keyboard("ads"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("ads:"))
async def ads_platform_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"""
    platform = callback.data.split(":")[1]

    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã</b>\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{'Wildberries' if platform == 'wb' else 'Ozon' if platform == 'ozon' else '–í—Å–µ'}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard(),
        parse_mode="HTML",
    )

    user_data = dp.current_state(user=callback.from_user.id)
    await user_data.set_data({"command": "ads", "platform": platform})


@dp.message_handler(commands=["supplies"])
async def supplies_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ—Å—Ç–∞–≤–æ–∫"""
    await message.answer(
        "üì¶ <b>–û—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_platform_keyboard("supplies"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("supplies:"))
async def supplies_platform_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ—Å—Ç–∞–≤–æ–∫"""
    platform = callback.data.split(":")[1]

    await callback.message.edit_text(
        "üì¶ <b>–û—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º</b>\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{'Wildberries' if platform == 'wb' else 'Ozon' if platform == 'ozon' else '–í—Å–µ'}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard(),
        parse_mode="HTML",
    )

    user_data = dp.current_state(user=callback.from_user.id)
    await user_data.set_data({"command": "supplies", "platform": platform})


@dp.message_handler(commands=["feedbacks"])
async def feedbacks_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    await message.answer(
        "üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_platform_keyboard("feedbacks"),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data.startswith("feedbacks:"))
async def feedbacks_platform_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤"""
    platform = callback.data.split(":")[1]

    await callback.message.edit_text(
        "üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
        f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <b>{'Wildberries' if platform == 'wb' else 'Ozon' if platform == 'ozon' else '–í—Å–µ'}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=get_period_keyboard(),
        parse_mode="HTML",
    )

    user_data = dp.current_state(user=callback.from_user.id)
    await user_data.set_data({"command": "feedbacks", "platform": platform})


@dp.message_handler(commands=["balance"])
async def balance_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    await message.answer("üí∞ <b>–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞...</b>", parse_mode="HTML")
    await show_balance_report(message, "all")


# === COGS/OPEX Management Commands ===
@dp.message_handler(commands=["set_cogs"])
async def cmd_set_cogs(message: types.Message):
    """Set COGS for a specific SKU: /set_cogs SKU amount"""
    try:
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.answer(
                "üìä <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ COGS</b>\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_cogs SKU —Å—É–º–º–∞\n\n–ü—Ä–∏–º–µ—Ä: /set_cogs ABC123 150.50",
                parse_mode="HTML",
            )
            return

        sku = args[0]
        try:
            amount = float(args[1])
        except ValueError:
            await message.answer(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º\n\n–ü—Ä–∏–º–µ—Ä: /set_cogs ABC123 150.50", parse_mode="HTML"
            )
            return

        await message.answer(
            f"‚úÖ <b>COGS –∑–∞–ø–∏—Å–∞–Ω</b>\n\nSKU: {sku}\n–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {amount} ‚ÇΩ\n\n‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            parse_mode="HTML",
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}", parse_mode="HTML")


@dp.message_handler(commands=["set_opex"])
async def cmd_set_opex(message: types.Message):
    """Set OPEX for a specific date: /set_opex category amount [date]"""
    try:
        args = message.text.split()[1:]
        if len(args) < 2:
            await message.answer(
                "üíº <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OPEX</b>\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_opex –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞ [–¥–∞—Ç–∞]\n\n–ü—Ä–∏–º–µ—Ä: /set_opex –ê—Ä–µ–Ω–¥–∞ 50000\n–ò–ª–∏: /set_opex –†–µ–∫–ª–∞–º–∞ 25000 2025-09-15",
                parse_mode="HTML",
            )
            return

        category = args[0]
        try:
            amount = float(args[1])
        except ValueError:
            await message.answer(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º\n\n–ü—Ä–∏–º–µ—Ä: /set_opex –ê—Ä–µ–Ω–¥–∞ 50000", parse_mode="HTML"
            )
            return

        # Get date (today if not specified)
        from datetime import datetime

        if len(args) >= 3:
            try:
                expense_date = datetime.strptime(args[2], "%Y-%m-%d").strftime("%Y-%m-%d")
            except ValueError:
                await message.answer(
                    "‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n\n–ü—Ä–∏–º–µ—Ä: /set_opex –ê—Ä–µ–Ω–¥–∞ 50000 2025-09-15",
                    parse_mode="HTML",
                )
                return
        else:
            expense_date = datetime.now().strftime("%Y-%m-%d")

        await message.answer(
            f"‚úÖ <b>OPEX –∑–∞–ø–∏—Å–∞–Ω</b>\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–°—É–º–º–∞: {amount} ‚ÇΩ\n–î–∞—Ç–∞: {expense_date}\n\n‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            parse_mode="HTML",
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}", parse_mode="HTML")


@dp.message_handler(commands=["view_cogs"])
async def cmd_view_cogs(message: types.Message):
    """View current COGS data"""
    try:
        # Get COGS data from database via API endpoint
        j = await http_async.get_json("/status/live", {})
        counts = j.get("counts", {})
        cogs_count = counts.get("cogs", 0)

        if cogs_count == 0:
            await message.answer(
                "üìä <b>COGS –¥–∞–Ω–Ω—ã–µ</b>\n\n‚ùå COGS –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_cogs SKU —Å—É–º–º–∞",
                parse_mode="HTML",
            )
        else:
            await message.answer(
                f"üìä <b>COGS –¥–∞–Ω–Ω—ã–µ</b>\n\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cogs_count}\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_cogs SKU —Å—É–º–º–∞",
                parse_mode="HTML",
            )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}", parse_mode="HTML")


@dp.message_handler(commands=["view_opex"])
async def cmd_view_opex(message: types.Message):
    """View current OPEX data"""
    try:
        # Get OPEX data from database via API endpoint
        j = await http_async.get_json("/status/live", {})
        counts = j.get("counts", {})
        opex_count = counts.get("opex", 0)

        if opex_count == 0:
            await message.answer(
                "üíº <b>OPEX –¥–∞–Ω–Ω—ã–µ</b>\n\n‚ùå OPEX –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_opex –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞",
                parse_mode="HTML",
            )
        else:
            await message.answer(
                f"üíº <b>OPEX –¥–∞–Ω–Ω—ã–µ</b>\n\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {opex_count}\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_opex –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞",
                parse_mode="HTML",
            )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:200]}", parse_mode="HTML")


async def show_ads_report(message, platform, date_from, date_to):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ —Ä–µ–∫–ª–∞–º–µ"""
    try:
        ads_data = await http_async.get_json(
            "/live/ads/overview",
            params={"platform": platform, "date_from": date_from, "date_to": date_to},
        )

        if not ads_data:
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–ª–∞–º—ã</b>\n\n" "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                parse_mode="HTML",
            )
            return

        platform_emoji = {"wb": "üü£", "ozon": "üîµ", "all": "üìä"}[platform]
        platform_name = {"wb": "Wildberries", "ozon": "Ozon", "all": "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"}[platform]

        # –†–∞–∑–¥–µ–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞: WB / Ozon / –ò—Ç–æ–≥–æ
        if platform == "all":
            wb_data = ads_data.get("wb", {})
            ozon_data = ads_data.get("ozon", {})
            combined_data = ads_data.get("combined", {})

            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã</b>\n"
            text += f"üìÖ <b>{date_from} ‚Äî {date_to}</b>\n\n"

            # WB —Å–µ–∫—Ü–∏—è
            text += "üü£ <b>Wildberries</b>\n"
            text += f"üí∞ –†–∞—Å—Ö–æ–¥—ã: {_format_value(wb_data.get('spend'), 'rub')}\n"
            text += f"üëÅ –ü–æ–∫–∞–∑—ã: {_format_value(wb_data.get('views'))}\n"
            text += f"üñ± –ö–ª–∏–∫–∏: {_format_value(wb_data.get('clicks'))}\n"
            text += f"üìà CTR: {_format_value(wb_data.get('ctr'), '%')}\n"
            text += f"üí∏ CPC: {_format_value(wb_data.get('cpc'), 'rub')}\n"
            text += f"üõí –ó–∞–∫–∞–∑—ã: {_format_value(wb_data.get('orders'))}\n\n"

            # Ozon —Å–µ–∫—Ü–∏—è
            text += "üîµ <b>Ozon</b>\n"
            text += f"üí∞ –†–∞—Å—Ö–æ–¥—ã: {_format_value(ozon_data.get('spend'), 'rub')}\n"
            text += f"üëÅ –ü–æ–∫–∞–∑—ã: {_format_value(ozon_data.get('views'))}\n"
            text += f"üñ± –ö–ª–∏–∫–∏: {_format_value(ozon_data.get('clicks'))}\n"
            text += f"üìà CTR: {_format_value(ozon_data.get('ctr'), '%')}\n"
            text += f"üí∏ CPC: {_format_value(ozon_data.get('cpc'), 'rub')}\n"
            text += f"üõí –ó–∞–∫–∞–∑—ã: {_format_value(ozon_data.get('orders'))}\n\n"

            # –ò—Ç–æ–≥–æ
            text += "üìä <b>–ò–¢–û–ì–û</b>\n"
            text += f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {_format_value(combined_data.get('spend'), 'rub')}\n"
            text += f"üëÅ –í—Å–µ–≥–æ –ø–æ–∫–∞–∑–æ–≤: {_format_value(combined_data.get('views'))}\n"
            text += f"üñ± –í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤: {_format_value(combined_data.get('clicks'))}\n"
            text += f"üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {_format_value(combined_data.get('orders'))}\n"

        else:
            # –û–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã</b>\n"
            text += f"{platform_emoji} <b>{platform_name}</b>\n"
            text += f"üìÖ <b>{date_from} ‚Äî {date_to}</b>\n\n"

            text += f"üí∞ <b>–†–∞—Å—Ö–æ–¥—ã:</b> {_format_value(ads_data.get('spend'), 'rub')}\n"
            text += f"üëÅ <b>–ü–æ–∫–∞–∑—ã:</b> {_format_value(ads_data.get('views'))}\n"
            text += f"üñ± <b>–ö–ª–∏–∫–∏:</b> {_format_value(ads_data.get('clicks'))}\n"
            text += f"üìà <b>CTR:</b> {_format_value(ads_data.get('ctr'), '%')}\n"
            text += f"üí∏ <b>CPC:</b> {_format_value(ads_data.get('cpc'), 'rub')}\n"
            text += f"üõí <b>–ó–∞–∫–∞–∑—ã:</b> {_format_value(ads_data.get('orders'))}\n"

        text += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}</i>"

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_ads:{platform}:{date_from}:{date_to}"
            )
        )
        await message.edit_text(text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–ª–∞–º—ã</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã: {e}")


async def show_supplies_report(message, platform, date_from, date_to):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º"""
    try:
        supplies_data = await http_async.get_json(
            "/live/supplies",
            params={"platform": platform, "date_from": date_from, "date_to": date_to},
        )

        if not supplies_data:
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫</b>\n\n" "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                parse_mode="HTML",
            )
            return

        platform_emoji = {"wb": "üü£", "ozon": "üîµ", "all": "üìä"}[platform]
        platform_name = {"wb": "Wildberries", "ozon": "Ozon", "all": "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"}[platform]

        # –†–∞–∑–¥–µ–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞: WB / Ozon / –ò—Ç–æ–≥–æ
        if platform == "all":
            wb_data = supplies_data.get("wb", [])
            ozon_data = supplies_data.get("ozon", [])

            text = "üì¶ <b>–û—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º</b>\n"
            text += f"üìÖ <b>{date_from} ‚Äî {date_to}</b>\n\n"

            # WB —Å–µ–∫—Ü–∏—è
            if wb_data:
                text += "üü£ <b>Wildberries</b>\n"
                wb_total_items = sum(item.get("quantity", 0) for item in wb_data)
                wb_total_cost = sum(item.get("cost_amount", 0) for item in wb_data)
                text += f"üì¶ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {wb_total_items:,} —à—Ç.\n"
                text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {await format_currency(wb_total_cost)}\n\n"
            else:
                text += "üü£ <b>Wildberries</b>\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

            # Ozon —Å–µ–∫—Ü–∏—è
            if ozon_data:
                text += "üîµ <b>Ozon</b>\n"
                ozon_total_items = sum(item.get("quantity", 0) for item in ozon_data)
                ozon_total_cost = sum(item.get("cost_amount", 0) for item in ozon_data)
                text += f"üì¶ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {ozon_total_items:,} —à—Ç.\n"
                text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {await format_currency(ozon_total_cost)}\n\n"
            else:
                text += "üîµ <b>Ozon</b>\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

            # –ò—Ç–æ–≥–æ
            total_items = sum(item.get("quantity", 0) for item in wb_data + ozon_data)
            total_cost = sum(item.get("cost_amount", 0) for item in wb_data + ozon_data)
            text += "üìä <b>–ò–¢–û–ì–û</b>\n"
            text += f"üì¶ –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {total_items:,} —à—Ç.\n"
            text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {await format_currency(total_cost)}"

        else:
            # –û–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            supplies = (
                supplies_data if isinstance(supplies_data, list) else supplies_data.get("data", [])
            )
            total_items = sum(item.get("quantity", 0) for item in supplies)
            total_cost = sum(item.get("cost_amount", 0) for item in supplies)

            text = "üì¶ <b>–û—Ç—á—ë—Ç –ø–æ –ø–æ—Å—Ç–∞–≤–∫–∞–º</b>\n"
            text += f"{platform_emoji} <b>{platform_name}</b>\n"
            text += f"üìÖ <b>{date_from} ‚Äî {date_to}</b>\n\n"

            text += f"üì¶ <b>–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</b> {total_items:,} —à—Ç.\n"
            text += f"üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {await format_currency(total_cost)}\n"

            if supplies:
                text += "\nüîù <b>–¢–æ–ø –ø–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
                top_supplies = sorted(supplies, key=lambda x: x.get("quantity", 0), reverse=True)[
                    :5
                ]

                for i, item in enumerate(top_supplies, 1):
                    name = item.get("name", item.get("vendor_code", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))[:25]
                    quantity = item.get("quantity", 0)
                    cost = item.get("cost_amount", 0)

                    text += f"{i}. <b>{name}</b>\n"
                    text += f"   üì¶ {quantity} —à—Ç. √ó {await format_currency(cost)}\n"

        text += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}</i>"

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_supplies:{platform}:{date_from}:{date_to}"
            )
        )
        await message.edit_text(text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–∞–≤–æ–∫</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")


async def show_feedbacks_report(message, platform, date_from, date_to):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º"""
    try:
        feedbacks_data = await http_async.get_json(
            "/live/feedbacks",
            params={"platform": platform, "date_from": date_from, "date_to": date_to},
        )

        if not feedbacks_data:
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n" "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                parse_mode="HTML",
            )
            return

        platform_emoji = {"wb": "üü£", "ozon": "üîµ", "all": "üìä"}[platform]
        platform_name = {"wb": "Wildberries", "ozon": "Ozon", "all": "–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"}[platform]

        # –†–∞–∑–¥–µ–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞: WB / Ozon / –ò—Ç–æ–≥–æ
        if platform == "all":
            wb_data = feedbacks_data.get("wb", [])
            ozon_data = feedbacks_data.get("ozon", [])

            text = "üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n"
            text += f"üìÖ <b>{date_from} ‚Äî {date_to}</b>\n\n"

            # WB —Å–µ–∫—Ü–∏—è
            if wb_data:
                text += "üü£ <b>Wildberries</b>\n"
                wb_avg_rating = sum(r.get("rating", 0) for r in wb_data) / len(wb_data)
                wb_answered = sum(1 for r in wb_data if r.get("is_answered"))
                text += f"‚≠ê –û—Ç–∑—ã–≤–æ–≤: {len(wb_data)}\n"
                text += f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {wb_avg_rating:.1f}\n"
                text += f"üí¨ –û—Ç–≤–µ—á–µ–Ω–æ: {wb_answered}/{len(wb_data)}\n\n"
            else:
                text += "üü£ <b>Wildberries</b>\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

            # Ozon —Å–µ–∫—Ü–∏—è
            if ozon_data:
                text += "üîµ <b>Ozon</b>\n"
                ozon_avg_rating = sum(r.get("rating", 0) for r in ozon_data) / len(ozon_data)
                ozon_answered = sum(1 for r in ozon_data if r.get("is_answered"))
                text += f"‚≠ê –û—Ç–∑—ã–≤–æ–≤: {len(ozon_data)}\n"
                text += f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {ozon_avg_rating:.1f}\n"
                text += f"üí¨ –û—Ç–≤–µ—á–µ–Ω–æ: {ozon_answered}/{len(ozon_data)}\n\n"
            else:
                text += "üîµ <b>Ozon</b>\nüìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"

            # –ò—Ç–æ–≥–æ
            all_feedbacks = wb_data + ozon_data
            if all_feedbacks:
                total_avg_rating = sum(r.get("rating", 0) for r in all_feedbacks) / len(
                    all_feedbacks
                )
                total_answered = sum(1 for r in all_feedbacks if r.get("is_answered"))
                text += "üìä <b>–ò–¢–û–ì–û</b>\n"
                text += f"‚≠ê –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(all_feedbacks)}\n"
                text += f"üìä –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {total_avg_rating:.1f}\n"
                text += f"üí¨ –í—Å–µ–≥–æ –æ—Ç–≤–µ—á–µ–Ω–æ: {total_answered}/{len(all_feedbacks)}"

        else:
            # –û–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            feedbacks = (
                feedbacks_data
                if isinstance(feedbacks_data, list)
                else feedbacks_data.get("data", [])
            )

            text = "üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n"
            text += f"{platform_emoji} <b>{platform_name}</b>\n"
            text += f"üìÖ <b>{date_from} ‚Äî {date_to}</b>\n\n"

            if feedbacks:
                avg_rating = sum(r.get("rating", 0) for r in feedbacks) / len(feedbacks)
                answered = sum(1 for r in feedbacks if r.get("is_answered"))

                text += f"‚≠ê <b>–û—Ç–∑—ã–≤–æ–≤:</b> {len(feedbacks)}\n"
                text += f"üìä <b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {avg_rating:.1f}\n"
                text += f"üí¨ <b>–û—Ç–≤–µ—á–µ–Ω–æ:</b> {answered}/{len(feedbacks)}\n"

                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
                text += "\nüïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n"
                recent_feedbacks = sorted(
                    feedbacks, key=lambda x: x.get("review_date", ""), reverse=True
                )[:3]

                for i, review in enumerate(recent_feedbacks, 1):
                    rating_stars = "‚≠ê" * review.get("rating", 0)
                    review_text = review.get("text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")[:50] + "..."
                    text += f"{i}. {rating_stars} {review_text}\n"
            else:
                text += "üìä <b>–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥</b>"

        text += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}</i>"

        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_feedbacks:{platform}:{date_from}:{date_to}"
            )
        )
        await message.edit_text(text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")


async def show_balance_report(message, platform):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –±–∞–ª–∞–Ω—Å—É"""
    try:
        balance_data = await http_async.get_json("/live/balance", params={"platform": platform})

        if not balance_data:
            await message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞</b>\n\n" "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                parse_mode="HTML",
            )
            return

        # –†–∞–∑–¥–µ–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞: WB / Ozon / –ò—Ç–æ–≥–æ
        if platform == "all":
            wb_data = balance_data.get("wb", {})
            ozon_data = balance_data.get("ozon", {})

            text = "üí∞ <b>–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤</b>\n"
            text += "üïê <b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>\n\n"

            # WB —Å–µ–∫—Ü–∏—è
            text += "üü£ <b>Wildberries</b>\n"
            if wb_data and not wb_data.get("missing_components"):
                text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {await format_currency(wb_data.get('balance', 0))}\n"
                text += f"üîí –ö –≤—ã–≤–æ–¥—É: {await format_currency(wb_data.get('available', 0))}\n"
                text += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {await format_currency(wb_data.get('pending', 0))}\n\n"
            else:
                text += "üìä ‚Äî\n\n"

            # Ozon —Å–µ–∫—Ü–∏—è
            text += "üîµ <b>Ozon</b>\n"
            if ozon_data and not ozon_data.get("missing_components"):
                text += f"üí∞ –ë–∞–ª–∞–Ω—Å: {await format_currency(ozon_data.get('balance', 0))}\n"
                text += f"üîí –ö –≤—ã–≤–æ–¥—É: {await format_currency(ozon_data.get('available', 0))}\n"
                text += f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {await format_currency(ozon_data.get('pending', 0))}\n\n"
            else:
                text += "üìä ‚Äî\n\n"

            # –ò—Ç–æ–≥–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            has_wb_data = wb_data and not wb_data.get("missing_components")
            has_ozon_data = ozon_data and not ozon_data.get("missing_components")

            if has_wb_data or has_ozon_data:
                total_balance = (wb_data.get("balance", 0) if has_wb_data else 0) + (
                    ozon_data.get("balance", 0) if has_ozon_data else 0
                )
                total_available = (wb_data.get("available", 0) if has_wb_data else 0) + (
                    ozon_data.get("available", 0) if has_ozon_data else 0
                )

                text += "üìä <b>–ò–¢–û–ì–û</b>\n"
                text += f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {await format_currency(total_balance)}\n"
                text += f"üîí –í—Å–µ–≥–æ –∫ –≤—ã–≤–æ–¥—É: {await format_currency(total_available)}"
            else:
                text += "üìä <b>–ò–¢–û–ì–û</b>\nüìä –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

        else:
            # –û–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
            platform_emoji = {"wb": "üü£", "ozon": "üîµ"}[platform]
            platform_name = {"wb": "Wildberries", "ozon": "Ozon"}[platform]

            text = "üí∞ <b>–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞</b>\n"
            text += f"{platform_emoji} <b>{platform_name}</b>\n"
            text += "üïê <b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç</b>\n\n"

            if balance_data and not balance_data.get("missing_components"):
                text += (
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {await format_currency(balance_data.get('balance', 0))}\n"
                )
                text += f"üîí <b>–ö –≤—ã–≤–æ–¥—É:</b> {await format_currency(balance_data.get('available', 0))}\n"
                text += f"‚è≥ <b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ:</b> {await format_currency(balance_data.get('pending', 0))}\n"
            else:
                text += "üìä <b>–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>"

        text += f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}</i>"

        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_balance:{platform}"))
        await message.edit_text(text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")


def _format_value(value, suffix=""):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π "‚Äî" –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if value is None or (isinstance(value, (int, float)) and value == 0):
        return "‚Äî"

    if suffix == "rub":
        return f"{value:,.0f} ‚ÇΩ" if isinstance(value, (int, float)) else "‚Äî"
    elif suffix == "%":
        return f"{value:.2f}%" if isinstance(value, (int, float)) else "‚Äî"
    else:
        return f"{value:,}" if isinstance(value, (int, float)) else "‚Äî"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith("refresh_"))
async def refresh_report_callback(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤"""
    parts = callback.data.split(":")
    report_type = parts[0].replace("refresh_", "")

    if report_type == "pnl" and len(parts) >= 4:
        platform, date_from, date_to = parts[1], parts[2], parts[3]
        from datetime import datetime

        date_from_obj = datetime.fromisoformat(date_from).date()
        date_to_obj = datetime.fromisoformat(date_to).date()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
        if date_from == date_to:
            if date_from_obj == datetime.now().date():
                period_name = "–°–µ–≥–æ–¥–Ω—è"
            else:
                period_name = "–í—á–µ—Ä–∞"
        else:
            period_name = f"{date_from} - {date_to}"

        await callback.message.edit_text("üîÑ <b>–û–±–Ω–æ–≤–ª—è—é P&L...</b>", parse_mode="HTML")
        await show_pnl_report(callback.message, platform, date_from_obj, date_to_obj, period_name)

    elif report_type == "stock":
        platform = parts[1]
        await callback.message.edit_text("üîÑ <b>–û–±–Ω–æ–≤–ª—è—é –æ—Å—Ç–∞—Ç–∫–∏...</b>", parse_mode="HTML")
        await show_stock_report(callback.message, platform)

    elif report_type == "ads" and len(parts) >= 4:
        platform, date_from, date_to = parts[1], parts[2], parts[3]
        await callback.message.edit_text("üîÑ <b>–û–±–Ω–æ–≤–ª—è—é —Ä–µ–∫–ª–∞–º—É...</b>", parse_mode="HTML")
        await show_ads_report(callback.message, platform, date_from, date_to)

    elif report_type == "supplies" and len(parts) >= 4:
        platform, date_from, date_to = parts[1], parts[2], parts[3]
        await callback.message.edit_text("üîÑ <b>–û–±–Ω–æ–≤–ª—è—é –ø–æ—Å—Ç–∞–≤–∫–∏...</b>", parse_mode="HTML")
        await show_supplies_report(callback.message, platform, date_from, date_to)

    elif report_type == "feedbacks" and len(parts) >= 4:
        platform, date_from, date_to = parts[1], parts[2], parts[3]
        await callback.message.edit_text("üîÑ <b>–û–±–Ω–æ–≤–ª—è—é –æ—Ç–∑—ã–≤—ã...</b>", parse_mode="HTML")
        await show_feedbacks_report(callback.message, platform, date_from, date_to)

    elif report_type == "balance":
        platform = parts[1]
        await callback.message.edit_text("üîÑ <b>–û–±–Ω–æ–≤–ª—è—é –±–∞–ª–∞–Ω—Å...</b>", parse_mode="HTML")
        await show_balance_report(callback.message, platform)

    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á—ë—Ç–æ–≤...

    await callback.answer("‚úÖ –û—Ç—á—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")


# –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏
from expenses import CalculationType, ExpenseManager, ExpenseType, initialize_default_expenses

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
expense_manager = ExpenseManager()


@dp.message_handler(commands=["expenses"])
async def cmd_expenses_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    summary = expense_manager.get_expense_summary()

    text = f"""üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {summary['total_count']}
‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã/–º–µ—Å—è—Ü: {summary['monthly_fixed']:,.0f} ‚ÇΩ

üìã <b>–ü–æ —Ç–∏–ø–∞–º:</b>"""

    for expense_type, count in summary["by_type"].items():
        emoji = {
            "fixed": "üìå",
            "commission": "üí∏",
            "logistics": "üöö",
            "penalty": "‚ö†Ô∏è",
            "advertising": "üì¢",
            "other": "üìù",
        }.get(expense_type, "üìÑ")
        text += f"\n{emoji} {expense_type}: {count}"

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data="expense_add"),
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤", callback_data="expense_list"),
    )
    kb.add(
        InlineKeyboardButton("üìä –†–∞—Å—á–µ—Ç P&L", callback_data="expense_calculate"),
        InlineKeyboardButton("üí∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å COGS", callback_data="expense_cogs"),
    )
    kb.add(
        InlineKeyboardButton("üìä –®–∞–±–ª–æ–Ω COGS", callback_data="template_cogs"),
        InlineKeyboardButton("üìä –®–∞–±–ª–æ–Ω OPEX", callback_data="template_opex"),
    )
    kb.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="expense_settings"))

    await message.reply(text, parse_mode="HTML", reply_markup=kb)


@dp.message_handler(commands=["add_expense"])
async def cmd_add_expense(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    args = message.get_args().strip()

    if not args:
        text = """üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>

<b>–§–æ—Ä–º–∞—Ç:</b>
<code>/add_expense [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ç–∏–ø] [—Å–ø–æ—Å–æ–±_—Ä–∞—Å—á–µ—Ç–∞] [—Å—É–º–º–∞] [–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]</code>

<b>–¢–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>
‚Ä¢ fixed - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
‚Ä¢ commission - –∫–æ–º–∏—Å—Å–∏–∏
‚Ä¢ logistics - –ª–æ–≥–∏—Å—Ç–∏–∫–∞
‚Ä¢ penalty - —à—Ç—Ä–∞—Ñ—ã
‚Ä¢ advertising - —Ä–µ–∫–ª–∞–º–∞
‚Ä¢ other - –ø—Ä–æ—á–∏–µ

<b>–°–ø–æ—Å–æ–±—ã —Ä–∞—Å—á–µ—Ç–∞:</b>
‚Ä¢ fixed_amount - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
‚Ä¢ percent_revenue - % –æ—Ç –≤—ã—Ä—É—á–∫–∏
‚Ä¢ per_unit - –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
‚Ä¢ per_order - –∑–∞ –∑–∞–∫–∞–∑

<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>
‚Ä¢ wb, ozon, both, all (–º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å)

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/add_expense "–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞" fixed fixed_amount 25000</code>
<code>/add_expense "–ö–æ–º–∏—Å—Å–∏—è WB" commission percent_revenue 15 wb</code>
<code>/add_expense "–£–ø–∞–∫–æ–≤–∫–∞" logistics per_unit 50 both packaging</code>"""

        await message.reply(text, parse_mode="HTML")
        return

    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        parts = []
        current = ""
        in_quotes = False

        for char in args:
            if char == '"' and not in_quotes:
                in_quotes = True
            elif char == '"' and in_quotes:
                in_quotes = False
                parts.append(current)
                current = ""
            elif char == " " and not in_quotes:
                if current:
                    parts.append(current)
                    current = ""
            else:
                current += char

        if current:
            parts.append(current)

        if len(parts) < 4:
            await message.reply(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_expense –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏."
            )
            return

        name = parts[0]
        expense_type = ExpenseType(parts[1])
        calculation_type = CalculationType(parts[2])
        amount = float(parts[3])
        platform = (
            parts[4]
            if len(parts) > 4 and parts[4] not in ["all", "both"]
            else parts[4]
            if len(parts) > 4
            else None
        )
        category = parts[5] if len(parts) > 5 else None

        expense_id = expense_manager.add_expense(
            name=name,
            expense_type=expense_type,
            calculation_type=calculation_type,
            amount=amount,
            platform=platform,
            category=category,
        )

        await message.reply(f"‚úÖ –†–∞—Å—Ö–æ–¥ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: {expense_id}")

    except ValueError as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message_handler(commands=["list_expenses"])
async def cmd_list_expenses(message: types.Message):
    """–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    args = message.get_args().strip()
    platform_filter = args if args in ["wb", "ozon", "both"] else None

    expenses = expense_manager.list_expenses(platform=platform_filter)

    if not expenses:
        await message.reply("üìù –†–∞—Å—Ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>"
    if platform_filter:
        text += f" ({platform_filter})"
    text += "\n\n"

    for expense in expenses:
        emoji = {
            "fixed": "üìå",
            "commission": "üí∏",
            "logistics": "üöö",
            "penalty": "‚ö†Ô∏è",
            "advertising": "üì¢",
            "other": "üìù",
        }.get(expense.expense_type.value, "üìÑ")

        calc_text = {
            "fixed_amount": f"{expense.amount:,.0f} ‚ÇΩ",
            "percent_revenue": f"{expense.amount}%",
            "per_unit": f"{expense.amount:,.0f} ‚ÇΩ/—à—Ç",
            "per_order": f"{expense.amount:,.0f} ‚ÇΩ/–∑–∞–∫–∞–∑",
        }.get(expense.calculation_type.value, f"{expense.amount}")

        platform_text = f" [{expense.platform}]" if expense.platform else ""

        text += f"{emoji} <b>{expense.name}</b>{platform_text}\n"
        text += f"   {calc_text}"
        if expense.category:
            text += f" ‚Ä¢ {expense.category}"
        text += f"\n   <code>{expense.id}</code>\n\n"

    await message.reply(text, parse_mode="HTML")


@dp.message_handler(commands=["edit_expense"])
async def cmd_edit_expense(message: types.Message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
    args = message.get_args().strip()

    if not args:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/edit_expense [expense_id] [–ø–æ–ª–µ] [–Ω–æ–≤–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ]</code>",
            parse_mode="HTML",
        )
        return

    parts = args.split(maxsplit=2)
    if len(parts) < 3:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ä–∞—Å—Ö–æ–¥–∞, –ø–æ–ª–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    expense_id, field, new_value = parts

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
        if field == "amount":
            new_value = float(new_value)
        elif field == "expense_type":
            new_value = ExpenseType(new_value)
        elif field == "calculation_type":
            new_value = CalculationType(new_value)
        elif field == "is_active":
            new_value = new_value.lower() in ["true", "1", "–¥–∞", "yes"]

        success = expense_manager.update_expense(expense_id, **{field: new_value})

        if success:
            await message.reply(f"‚úÖ –†–∞—Å—Ö–æ–¥ {expense_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await message.reply(f"‚ùå –†–∞—Å—Ö–æ–¥ {expense_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message_handler(commands=["delete_expense"])
async def cmd_delete_expense(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
    expense_id = message.get_args().strip()

    if not expense_id:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/delete_expense [expense_id]</code>", parse_mode="HTML"
        )
        return

    success = expense_manager.delete_expense(expense_id)

    if success:
        await message.reply(f"‚úÖ –†–∞—Å—Ö–æ–¥ {expense_id} —É–¥–∞–ª–µ–Ω")
    else:
        await message.reply(f"‚ùå –†–∞—Å—Ö–æ–¥ {expense_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.message_handler(commands=["init_expenses"])
async def cmd_init_expenses(message: types.Message):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    if len(expense_manager.list_expenses()) > 0:
        await message.reply("‚ö†Ô∏è –†–∞—Å—Ö–æ–¥—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /expenses –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    initialize_default_expenses(expense_manager)
    await message.reply(
        "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /expenses –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
    )


# –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from expense_analyzer import ExpenseAnalyzer

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
expense_analyzer = ExpenseAnalyzer(expense_manager)


@dp.message_handler(commands=["check_penalties"])
async def cmd_check_penalties(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
    args = message.get_args().strip()
    days_back = int(args) if args.isdigit() else 7

    await message.reply("üîç <b>–ü—Ä–æ–≤–µ—Ä—è—é —à—Ç—Ä–∞—Ñ—ã...</b>", parse_mode="HTML")

    try:
        alerts = await expense_analyzer.get_penalty_alerts(days_back=days_back)

        if not alerts:
            await message.reply(f"‚úÖ –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
            return

        text = f"üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —à—Ç—Ä–∞—Ñ–æ–≤: {len(alerts)}</b>\n"
        text += f"üìÖ <b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π</b>\n\n"

        total_penalties = sum(alert.amount for alert in alerts)
        text += f"üí∏ <b>–û–±—â–∞—è —Å—É–º–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤:</b> {total_penalties:,.0f} ‚ÇΩ\n\n"

        severity_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}

        for i, alert in enumerate(alerts[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
            emoji = severity_emoji.get(alert.severity, "‚ö†Ô∏è")
            platform_emoji = {"ozon": "üîµ", "wb": "üü£"}.get(alert.platform, "üì±")

            text += f"{emoji} <b>{i}. {alert.reason}</b>\n"
            text += f"{platform_emoji} {alert.platform.upper()}: {alert.amount:,.0f} ‚ÇΩ\n"
            text += f"üìÖ {alert.date}\n"
            if alert.posting_number:
                text += f"üì¶ {alert.posting_number}\n"
            text += "\n"

        if len(alerts) > 10:
            text += f"... –∏ –µ—â–µ {len(alerts) - 10} —à—Ç—Ä–∞—Ñ–æ–≤\n"

        text += f"<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {datetime.now().strftime('%H:%M')}</i>"

        await message.reply(text, parse_mode="HTML")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —à—Ç—Ä–∞—Ñ–æ–≤: {e}")


@dp.message_handler(commands=["expense_report"])
async def cmd_expense_report(message: types.Message):
    """–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º"""
    args = message.get_args().strip()
    days_back = int(args) if args.isdigit() else 30

    await message.reply("üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º...</b>", parse_mode="HTML")

    try:
        from datetime import timedelta

        date_to = date.today()
        date_from = date_to - timedelta(days=days_back)

        report = await expense_analyzer.generate_expense_report(date_from, date_to)

        text = "üìä <b>–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º</b>\n"
        text += f"üìÖ <b>{date_from} ‚Äî {date_to}</b>\n\n"

        text += f"üí∞ <b>–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</b> {report['total_expenses']:,.0f} ‚ÇΩ\n\n"

        # –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
        text += "üì± <b>–ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</b>\n"
        for platform, data in report["platforms"].items():
            platform_emoji = {"ozon": "üîµ", "wb": "üü£"}.get(platform, "üì±")
            total = data.get("total_expenses", 0)
            count = data.get("expenses_count", 0)

            if "error" in data:
                text += f"{platform_emoji} {platform.upper()}: ‚ö†Ô∏è {data['error']}\n"
            else:
                text += f"{platform_emoji} {platform.upper()}: {total:,.0f} ‚ÇΩ ({count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n"

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        categories = report["summary"].get("top_categories", {})
        if categories:
            text += "\nüìã <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
            category_emoji = {
                "commission": "üí∏",
                "logistics": "üöö",
                "advertising": "üì¢",
                "penalties": "‚ö†Ô∏è",
                "returns": "‚Ü©Ô∏è",
                "other": "üìù",
            }

            for category, amount in list(categories.items())[:5]:
                emoji = category_emoji.get(category, "üìÑ")
                text += f"{emoji} {category}: {amount:,.0f} ‚ÇΩ\n"

        # –®—Ç—Ä–∞—Ñ—ã
        penalties = report["summary"]
        if penalties["penalties_count"] > 0:
            text += f"\nüö® <b>–®—Ç—Ä–∞—Ñ—ã:</b> {penalties['penalties_total']:,.0f} ‚ÇΩ ({penalties['penalties_count']} —à—Ç.)\n"

        text += f"\n<i>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%H:%M')}</i>"

        await message.reply(text, parse_mode="HTML")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


@dp.message_handler(commands=["auto_penalties"])
async def cmd_auto_penalties(message: types.Message):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —à—Ç—Ä–∞—Ñ–∞—Ö"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∏–ª–∏ webhook
    await message.reply(
        "üîß <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Å—É–º–º–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/check_penalties</code> –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        parse_mode="HTML",
    )


# P&L –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
from pnl_calculator import PnLCalculator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è P&L –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
pnl_calculator = PnLCalculator(expense_manager, expense_analyzer)


@dp.message_handler(commands=["pnl"])
async def cmd_pnl_report(message: types.Message):
    """P&L –æ—Ç—á–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    args = message.get_args().strip().split()

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    days_back = 30
    cost_per_unit = await get_user_default_cogs(
        message.from_user.id
    )  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(args) >= 1 and args[0].isdigit():
        days_back = int(args[0])
    if len(args) >= 2:
        try:
            cost_per_unit = float(args[1])
        except ValueError:
            pass

    await message.reply("üìä <b>–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é P&L –æ—Ç—á–µ—Ç...</b>", parse_mode="HTML")

    try:
        from datetime import timedelta

        date_to = date.today()
        date_from = date_to - timedelta(days=days_back)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
        pnl = await pnl_calculator.calculate_pnl(date_from, date_to, cost_per_unit)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = pnl_calculator.format_pnl_report(pnl, detailed=True)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        params_text = "\nüìã <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:</b>\n"
        params_text += f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {days_back} –¥–Ω–µ–π\n"
        params_text += f"‚Ä¢ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost_per_unit:,.0f} ‚ÇΩ/—à—Ç\n"
        params_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API\n\n"

        full_text = report_text + params_text

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton(
                "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"pnl_save:{days_back}:{cost_per_unit}"
            ),
            InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", callback_data=f"pnl_expenses:{days_back}"),
        )
        kb.add(
            InlineKeyboardButton(
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"pnl_refresh:{days_back}:{cost_per_unit}"
            )
        )

        await message.reply(full_text, parse_mode="HTML", reply_markup=kb)

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ P&L: {e}")


@dp.message_handler(commands=["pnl_help"])
async def cmd_pnl_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ P&L –æ—Ç—á–µ—Ç–∞–º"""
    text = """üìä <b>P&L –æ—Ç—á–µ—Ç—ã - —Å–ø—Ä–∞–≤–∫–∞</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
<code>/pnl [–¥–Ω–∏] [—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å]</code>

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ <b>–¥–Ω–∏</b> - –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
‚Ä¢ <b>—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</b> - COGS –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤ —Ä—É–±–ª—è—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/pnl</code> - –æ—Ç—á–µ—Ç –∑–∞ 30 –¥–Ω–µ–π
<code>/pnl 7</code> - –æ—Ç—á–µ—Ç –∑–∞ 7 –¥–Ω–µ–π
<code>/pnl 30 1200</code> - –∑–∞ 30 –¥–Ω–µ–π —Å COGS 1200‚ÇΩ

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>
<code>/set_default_cogs 1200</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å COGS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
<code>/view_default_cogs</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é COGS

<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –æ—Ç—á–µ—Ç:</b>
‚úÖ –†–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –∏–∑ API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –∫–æ–º–∏—Å—Å–∏–∏
‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
‚úÖ –®—Ç—Ä–∞—Ñ—ã –∏ –ø–µ–Ω–∏
‚úÖ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
‚úÖ –†–µ–∫–ª–∞–º–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã

<b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
<code>/expenses</code> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
<code>/expense_report</code> - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
<code>/check_penalties</code> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤
<code>/set_cogs SKU —Å—É–º–º–∞</code> - COGS –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SKU"""

    await message.reply(text, parse_mode="HTML")


@dp.message_handler(commands=["set_default_cogs"])
async def cmd_set_default_cogs(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è P&L —Ä–∞—Å—á–µ—Ç–æ–≤"""
    args = message.get_args().strip()

    if not args:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        current_cogs = await get_user_default_cogs(message.from_user.id)
        await message.reply(
            f"üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/set_default_cogs [—Å—É–º–º–∞]</code>\n"
            f"–ü—Ä–∏–º–µ—Ä: <code>/set_default_cogs 1200</code>\n\n"
            f"–¢–µ–∫—É—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_cogs:,.0f} ‚ÇΩ/—à—Ç",
            parse_mode="HTML",
        )
        return

    try:
        cost = float(args)
        if cost <= 0:
            await message.reply("‚ùå –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_user_default_cogs(message.from_user.id, cost)
        await message.reply(f"‚úÖ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {cost:,.0f} ‚ÇΩ/—à—Ç")

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import json
import os


async def get_user_default_cogs(user_id: int) -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        settings_file = f"data/user_settings_{user_id}.json"
        logger.info(f"–ß–∏—Ç–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ COGS –∏–∑ {settings_file}")
        if os.path.exists(settings_file):
            with open(settings_file, encoding="utf-8") as f:
                settings = json.load(f)
                cogs = float(settings.get("default_cogs", 800.0))
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ COGS –∏–∑ —Ñ–∞–π–ª–∞: {cogs}")
                return cogs
        else:
            logger.info(f"–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {settings_file}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ COGS: {e}")
    logger.info("–í–æ–∑–≤—Ä–∞—â–∞—é COGS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 800.0")
    return 800.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


async def save_user_default_cogs(user_id: int, cogs: float):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        os.makedirs("data", exist_ok=True)
        settings_file = f"data/user_settings_{user_id}.json"

        settings = {}
        if os.path.exists(settings_file):
            with open(settings_file, encoding="utf-8") as f:
                settings = json.load(f)

        settings["default_cogs"] = cogs
        settings["updated_at"] = datetime.now().isoformat()

        with open(settings_file, "w", encoding="utf-8") as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@dp.message_handler(commands=["view_default_cogs"])
async def cmd_view_default_cogs(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    current_cogs = await get_user_default_cogs(message.from_user.id)

    text = "üí∞ <b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</b>\n\n"
    text += f"üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_cogs:,.0f} ‚ÇΩ/—à—Ç\n\n"
    text += "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö:\n"
    text += "‚Ä¢ <code>/pnl</code> - –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ P&L\n\n"
    text += "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: <code>/set_default_cogs [—Å—É–º–º–∞]</code>"

    await message.reply(text, parse_mode="HTML")


async def generate_cogs_template_from_api(user_id: int) -> str | None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ COGS –Ω–∞ –æ—Å–Ω–æ–≤–µ SKU –∏–∑ API"""
    try:
        import os
        from datetime import datetime

        import pandas as pd

        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω COGS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –°–æ–±–∏—Ä–∞–µ–º SKU –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        all_skus = set()

        # –ü–æ–ª—É—á–∞–µ–º SKU –∏–∑ WB
        try:
            from api_clients_main import wb_business_api

            wb_cards = await wb_business_api.get_product_cards()
            for card in wb_cards:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º SKU –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
                sizes = card.get("sizes", [])
                for size in sizes:
                    for sku_data in size.get("skus", []):
                        sku = sku_data.get("skus", [])
                        if isinstance(sku, list) and sku:
                            all_skus.add(str(sku[0]))
                        elif isinstance(sku, (str, int)):
                            all_skus.add(str(sku))

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_skus)} SKU –∏–∑ WB")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SKU –∏–∑ WB: {e}")

        # –ü–æ–ª—É—á–∞–µ–º SKU –∏–∑ Ozon
        try:
            from api_clients_main import ozon_api

            ozon_stocks = await ozon_api.get_product_stocks()
            for item in ozon_stocks:  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º stock –≤ item –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                offer_id = item.get("offer_id")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ 'offer_id'
                if offer_id:
                    all_skus.add(str(offer_id))

            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ SKU –∏–∑ Ozon, –≤—Å–µ–≥–æ: {len(all_skus)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SKU –∏–∑ Ozon: {e}")

        if not all_skus:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ SKU –∏–∑ API, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—à–∞–±–ª–æ–Ω")
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—à–∞–±–ª–æ–Ω –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            all_skus = {"182906671", "209962134", "182906670", "1483568647", "1483568688"}

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é COGS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        default_cogs = await get_user_default_cogs(user_id)

        # –°–æ–∑–¥–∞–µ–º DataFrame
        sku_list = sorted(list(all_skus))
        df_data = []

        for sku in sku_list:
            df_data.append(
                {
                    "SKU": sku,
                    "COGS_RUB": default_cogs,  # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    "Comment": "–£–∫–∞–∂–∏—Ç–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞",
                }
            )

        df = pd.DataFrame(df_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        os.makedirs("templates", exist_ok=True)
        filename = (
            f"templates/cogs_template_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        )

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with pd.ExcelWriter(filename, engine="openpyxl") as writer:
            df.to_excel(writer, sheet_name="COGS_Template", index=False)

            # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            workbook = writer.book
            worksheet = writer.sheets["COGS_Template"]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet.column_dimensions["A"].width = 15  # SKU
            worksheet.column_dimensions["B"].width = 12  # COGS_RUB
            worksheet.column_dimensions["C"].width = 35  # Comment

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            worksheet.insert_rows(1, 3)
            worksheet["A1"] = "–®–ê–ë–õ–û–ù –°–ï–ë–ï–°–¢–û–ò–ú–û–°–¢–ò (COGS)"
            worksheet["A2"] = f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}'
            worksheet["A3"] = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É COGS_RUB –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –±–æ—Ç—É"

            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            from openpyxl.styles import Alignment, Font, PatternFill

            title_font = Font(bold=True, size=14)
            header_font = Font(bold=True, size=12)
            header_fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")

            worksheet["A1"].font = title_font
            worksheet["A2"].font = Font(size=10)
            worksheet["A3"].font = Font(size=10, italic=True)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∞ 4)
            for col in ["A", "B", "C"]:
                cell = worksheet[f"{col}4"]
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = Alignment(horizontal="center")

        logger.info(f"–®–∞–±–ª–æ–Ω COGS —Å–æ–∑–¥–∞–Ω: {filename} ({len(sku_list)} SKU)")
        return filename

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ COGS: {e}")
        return None


async def generate_opex_template() -> str | None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ OPEX —Å —Ç–∏–ø–æ–≤—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    try:
        import os
        from datetime import datetime

        import pandas as pd

        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω OPEX")

        # –¢–∏–ø–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        opex_categories = [
            {
                "Category": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                "Subcategory": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ WB",
                "Amount_RUB": 0,
                "Description": "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É –≤ WB",
            },
            {
                "Category": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                "Subcategory": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ Ozon",
                "Amount_RUB": 0,
                "Description": "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É –≤ Ozon",
            },
            {
                "Category": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                "Subcategory": "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö",
                "Amount_RUB": 0,
                "Description": "SMM, —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞",
            },
            {
                "Category": "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                "Subcategory": "–ë–ª–æ–≥–µ—Ä—ã –∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã",
                "Amount_RUB": 0,
                "Description": "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –±–ª–æ–≥–µ—Ä–∞–º–∏",
            },
            {
                "Category": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                "Subcategory": "–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥ WB",
                "Amount_RUB": 0,
                "Description": "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ FBS",
            },
            {
                "Category": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                "Subcategory": "–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥ Ozon",
                "Amount_RUB": 0,
                "Description": "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ FBS",
            },
            {
                "Category": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                "Subcategory": "–£–ø–∞–∫–æ–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                "Amount_RUB": 0,
                "Description": "–ö–æ—Ä–æ–±–∫–∏, –ø–∞–∫–µ—Ç—ã, —Å–∫–æ—Ç—á",
            },
            {
                "Category": "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                "Subcategory": "–•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤",
                "Amount_RUB": 0,
                "Description": "–ê—Ä–µ–Ω–¥–∞ —Å–∫–ª–∞–¥–∞/–∫–ª–∞–¥–æ–≤–∫–∏",
            },
            {
                "Category": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ",
                "Subcategory": "–ö–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤",
                "Amount_RUB": 0,
                "Description": "–ö–æ–º–∏—Å—Å–∏–∏ WB/Ozon (–µ—Å–ª–∏ –Ω–µ –≤ –æ—Ç—á–µ—Ç–∞—Ö)",
            },
            {
                "Category": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ",
                "Subcategory": "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
                "Amount_RUB": 0,
                "Description": "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞, —ç–∫–≤–∞–π—Ä–∏–Ω–≥",
            },
            {
                "Category": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ",
                "Subcategory": "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
                "Amount_RUB": 0,
                "Description": "–í–µ–¥–µ–Ω–∏–µ —É—á–µ—Ç–∞, –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
            },
            {
                "Category": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ",
                "Subcategory": "–ò–¢-—Å–µ—Ä–≤–∏—Å—ã",
                "Amount_RUB": 0,
                "Description": "CRM, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
            },
            {
                "Category": "–ü–µ—Ä—Å–æ–Ω–∞–ª",
                "Subcategory": "–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                "Amount_RUB": 0,
                "Description": "–§–û–¢ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
            },
            {
                "Category": "–ü–µ—Ä—Å–æ–Ω–∞–ª",
                "Subcategory": "–£—Å–ª—É–≥–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤",
                "Amount_RUB": 0,
                "Description": "–î–∏–∑–∞–π–Ω, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥, —Ñ–æ—Ç–æ",
            },
            {
                "Category": "–ü–µ—Ä—Å–æ–Ω–∞–ª",
                "Subcategory": "–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
                "Amount_RUB": 0,
                "Description": "–ö—É—Ä—Å—ã, —Å–µ–º–∏–Ω–∞—Ä—ã, —Ç—Ä–µ–Ω–∏–Ω–≥–∏",
            },
            {
                "Category": "–ü—Ä–æ—á–∏–µ",
                "Subcategory": "–û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
                "Amount_RUB": 0,
                "Description": "–ê—Ä–µ–Ω–¥–∞, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
            },
            {
                "Category": "–ü—Ä–æ—á–∏–µ",
                "Subcategory": "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
                "Amount_RUB": 0,
                "Description": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –¥–æ–≥–æ–≤–æ—Ä—ã",
            },
            {
                "Category": "–ü—Ä–æ—á–∏–µ",
                "Subcategory": "–ü—Ä–æ—á–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ",
                "Amount_RUB": 0,
                "Description": "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
            },
        ]

        df = pd.DataFrame(opex_categories)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        os.makedirs("templates", exist_ok=True)
        filename = f"templates/opex_template_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with pd.ExcelWriter(filename, engine="openpyxl") as writer:
            df.to_excel(writer, sheet_name="OPEX_Template", index=False)

            # –ü–æ–ª—É—á–∞–µ–º workbook –∏ worksheet –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            workbook = writer.book
            worksheet = writer.sheets["OPEX_Template"]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet.column_dimensions["A"].width = 15  # Category
            worksheet.column_dimensions["B"].width = 25  # Subcategory
            worksheet.column_dimensions["C"].width = 12  # Amount_RUB
            worksheet.column_dimensions["D"].width = 40  # Description

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            worksheet.insert_rows(1, 3)
            worksheet["A1"] = "–®–ê–ë–õ–û–ù –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–• –†–ê–°–•–û–î–û–í (OPEX)"
            worksheet["A2"] = f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime("%d.%m.%Y %H:%M")}'
            worksheet["A3"] = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É Amount_RUB —Å—É–º–º–∞–º–∏ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"

            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            from openpyxl.styles import Alignment, Font, PatternFill

            title_font = Font(bold=True, size=14)
            header_font = Font(bold=True, size=12)
            header_fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")

            worksheet["A1"].font = title_font
            worksheet["A2"].font = Font(size=10)
            worksheet["A3"].font = Font(size=10, italic=True)

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∞ 4)
            for col in ["A", "B", "C", "D"]:
                cell = worksheet[f"{col}4"]
                cell.font = header_font
                cell.fill = header_fill
                cell.alignment = Alignment(horizontal="center")

        logger.info(f"–®–∞–±–ª–æ–Ω OPEX —Å–æ–∑–¥–∞–Ω: {filename} ({len(opex_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
        return filename

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ OPEX: {e}")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –¥–ª—è P&L
@dp.callback_query_handler(lambda c: c.data.startswith("pnl_"))
async def process_pnl_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ P&L –æ—Ç—á–µ—Ç–æ–≤"""
    data_parts = callback.data.split(":")
    action = data_parts[0]

    if action == "pnl_save":
        days_back = int(data_parts[1])
        cost_per_unit = float(data_parts[2])

        try:
            from datetime import timedelta

            date_to = date.today()
            date_from = date_to - timedelta(days=days_back)

            pnl = await pnl_calculator.calculate_pnl(date_from, date_to, cost_per_unit)
            filename = await pnl_calculator.save_pnl_report(pnl)

            await callback.message.reply(f"üíæ P&L –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")

        except Exception as e:
            await callback.message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    elif action == "pnl_expenses":
        days_back = int(data_parts[1])
        await callback.message.edit_text("üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤...</b>", parse_mode="HTML")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
        from datetime import timedelta

        date_to = date.today()
        date_from = date_to - timedelta(days=days_back)

        report = await expense_analyzer.generate_expense_report(date_from, date_to)

        text = "üìä <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n"
        text += f"üìÖ <b>{date_from} ‚Äî {date_to}</b>\n\n"

        for platform, data in report["platforms"].items():
            platform_emoji = {"ozon": "üîµ", "wb": "üü£"}.get(platform, "üì±")
            total = data.get("total_expenses", 0)

            if total > 0:
                text += f"{platform_emoji} <b>{platform.upper()}: {total:,.0f} ‚ÇΩ</b>\n"
                categories = data.get("categories", {})
                for category, amount in categories.items():
                    if amount > 0:
                        text += f"  ‚Ä¢ {category}: {amount:,.0f} ‚ÇΩ\n"
                text += "\n"

        await callback.message.edit_text(text, parse_mode="HTML")

    elif action == "pnl_refresh":
        days_back = int(data_parts[1])
        cost_per_unit = float(data_parts[2])

        await callback.message.edit_text("üîÑ <b>–û–±–Ω–æ–≤–ª—è—é P&L –æ—Ç—á–µ—Ç...</b>", parse_mode="HTML")

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç P&L
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
        pass

    await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏
@dp.callback_query_handler(lambda c: c.data.startswith("expense_"))
async def process_expense_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    action = callback.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω expense callback: {action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    await callback.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–≥—Ä—É–∑–∫–∞"

    if action == "expense_add":
        text = """üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>

<b>–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:</b>
<code>/add_expense "[–Ω–∞–∑–≤–∞–Ω–∏–µ]" [—Ç–∏–ø] [—Å–ø–æ—Å–æ–±_—Ä–∞—Å—á–µ—Ç–∞] [—Å—É–º–º–∞] [–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]</code>

<b>–¢–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>
‚Ä¢ fixed - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
‚Ä¢ commission - –∫–æ–º–∏—Å—Å–∏–∏
‚Ä¢ logistics - –ª–æ–≥–∏—Å—Ç–∏–∫–∞
‚Ä¢ penalty - —à—Ç—Ä–∞—Ñ—ã
‚Ä¢ advertising - —Ä–µ–∫–ª–∞–º–∞
‚Ä¢ other - –ø—Ä–æ—á–∏–µ

<b>–°–ø–æ—Å–æ–±—ã —Ä–∞—Å—á–µ—Ç–∞:</b>
‚Ä¢ fixed_amount - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
‚Ä¢ percent_revenue - % –æ—Ç –≤—ã—Ä—É—á–∫–∏
‚Ä¢ per_unit - –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
‚Ä¢ per_order - –∑–∞ –∑–∞–∫–∞–∑

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
<code>/add_expense "–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞" fixed fixed_amount 25000</code>
<code>/add_expense "–ö–æ–º–∏—Å—Å–∏—è WB" commission percent_revenue 27 wb</code>"""

        await callback.message.edit_text(text, parse_mode="HTML")

    elif action == "expense_list":
        await callback.message.edit_text("üîÑ <b>–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤...</b>", parse_mode="HTML")

        expenses = expense_manager.list_expenses()

        if not expenses:
            text = "üìù <b>–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n‚ùå –†–∞—Å—Ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_expense –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."
        else:
            text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n"

            for expense in expenses[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                emoji = {
                    "fixed": "üìå",
                    "commission": "üí∏",
                    "logistics": "üöö",
                    "penalty": "‚ö†Ô∏è",
                    "advertising": "üì¢",
                    "other": "üìù",
                }.get(expense.expense_type.value, "üìÑ")

                calc_text = {
                    "fixed_amount": f"{expense.amount:,.0f} ‚ÇΩ",
                    "percent_revenue": f"{expense.amount}%",
                    "per_unit": f"{expense.amount:,.0f} ‚ÇΩ/—à—Ç",
                    "per_order": f"{expense.amount:,.0f} ‚ÇΩ/–∑–∞–∫–∞–∑",
                }.get(expense.calculation_type.value, f"{expense.amount}")

                platform_text = f" [{expense.platform}]" if expense.platform else ""

                text += f"{emoji} <b>{expense.name}</b>{platform_text}\n"
                text += f"   {calc_text}\n\n"

            if len(expenses) > 10:
                text += f"... –∏ –µ—â–µ {len(expenses) - 10} —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"

            text += "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: <code>/list_expenses</code>"

        await callback.message.edit_text(text, parse_mode="HTML")

    elif action == "expense_calculate":
        await callback.message.edit_text(
            "üìä <b>–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ P&L –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n\n<code>/pnl</code> - –ø–æ–ª–Ω—ã–π P&L –æ—Ç—á–µ—Ç\n<code>/pnl_help</code> - —Å–ø—Ä–∞–≤–∫–∞",
            parse_mode="HTML",
        )

    elif action == "expense_cogs":
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ expense_cogs –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            current_cogs = await get_user_default_cogs(callback.from_user.id)
            logger.info(f"–¢–µ–∫—É—â–∞—è COGS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {current_cogs}")

            text = "üí∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n"
            text += f"üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_cogs:,.0f} ‚ÇΩ/—à—Ç\n\n"
            text += "<b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
            text += "<code>/set_default_cogs [—Å—É–º–º–∞]</code>\n\n"
            text += "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            text += "<code>/set_default_cogs 1200</code>\n"
            text += "<code>/set_default_cogs 800</code>\n\n"
            text += "<i>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ P&L —Ä–∞—Å—á–µ—Ç–∞—Ö</i>"

            await callback.message.edit_text(text, parse_mode="HTML")
            logger.info(f"COGS —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ expense_cogs: {e}")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", parse_mode="HTML"
            )

    elif action == "expense_settings":
        summary = expense_manager.get_expense_summary()

        text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n"
        text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {summary['total_count']}\n"
        text += f"‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ/–º–µ—Å—è—Ü: {summary['monthly_fixed']:,.0f} ‚ÇΩ\n\n"
        text += "<b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        text += "<code>/expenses</code> - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        text += "<code>/init_expenses</code> - –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã\n"
        text += "<code>/expense_report</code> - –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º\n"
        text += "<code>/check_penalties</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã"

        await callback.message.edit_text(text, parse_mode="HTML")

    await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith("template_"))
async def process_template_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
    action = callback.data
    logger.info(f"–ü–æ–ª—É—á–µ–Ω template callback: {action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    await callback.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–∑–∞–≥—Ä—É–∑–∫–∞"

    if action == "template_cogs":
        await callback.message.edit_text(
            "üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é —à–∞–±–ª–æ–Ω COGS...</b>\n\n–ü–æ–ª—É—á–∞—é SKU –∏–∑ API –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤...",
            parse_mode="HTML",
        )

        try:
            filename = await generate_cogs_template_from_api(callback.from_user.id)

            if filename:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(filename, "rb") as doc:
                    await callback.message.reply_document(
                        doc,
                        caption="üìä <b>–®–∞–±–ª–æ–Ω COGS —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        "üìã –í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤—Å–µ –≤–∞—à–∏ SKU –∏–∑ API WB/Ozon\n"
                        "üí∞ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ COGS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
                        "üìù –ò–∑–º–µ–Ω–∏—Ç–µ —Å—É–º–º—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –±–æ—Ç—É\n\n"
                        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel/Calc\n"
                        "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É COGS_RUB\n"
                        "3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª\n"
                        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
                        parse_mode="HTML",
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import os

                try:
                    os.remove(filename)
                except:
                    pass
            else:
                await callback.message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ COGS</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                    parse_mode="HTML",
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ COGS: {e}")
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞</b>\n\n{str(e)[:100]}", parse_mode="HTML"
            )

    elif action == "template_opex":
        await callback.message.edit_text(
            "üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é —à–∞–±–ª–æ–Ω OPEX...</b>\n\n–°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É —Å —Ç–∏–ø–æ–≤—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤...",
            parse_mode="HTML",
        )

        try:
            filename = await generate_opex_template()

            if filename:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(filename, "rb") as doc:
                    await callback.message.reply_document(
                        doc,
                        caption="üìä <b>–®–∞–±–ª–æ–Ω OPEX —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        "üìã –í —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Ç–∏–ø–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
                        "üíº –†–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª, –ø—Ä–æ—á–∏–µ\n"
                        "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—É–º–º—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –±–æ—Ç—É\n\n"
                        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                        "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel/Calc\n"
                        "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É Amount_RUB\n"
                        "3. –î–æ–±–∞–≤—å—Ç–µ/—É–¥–∞–ª–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
                        "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª\n"
                        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
                        parse_mode="HTML",
                    )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import os

                try:
                    os.remove(filename)
                except:
                    pass
            else:
                await callback.message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ OPEX</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                    parse_mode="HTML",
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ OPEX: {e}")
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞</b>\n\n{str(e)[:100]}", parse_mode="HTML"
            )


# ============= –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò EXCEL –≠–ö–°–ü–û–†–¢–ê =============


@dp.callback_query_handler(lambda c: c.data.startswith("export_dds_excel:"))
async def excel_dds_export_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ DDS –≤ Excel"""
    await handle_dds_excel_export(callback_query)


@dp.callback_query_handler(lambda c: c.data.startswith("export_pnl_excel:"))
async def excel_pnl_export_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ P&L –≤ Excel"""
    await handle_pnl_excel_export(callback_query)


@dp.callback_query_handler(lambda c: c.data == "upload_cost_template")
async def cost_template_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    await handle_cost_template_upload(callback_query)


@dp.message_handler(content_types=[types.ContentType.DOCUMENT])
async def document_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ñ–∞–π–ª—ã —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ñ–∞–π–ª–æ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if message.document and message.document.file_name:
        filename = message.document.file_name.lower()
        if filename.endswith((".xlsx", ".xls")) and (
            "cost" in filename or "—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å" in filename.lower() or "template" in filename
        ):
            await handle_cost_file_upload(message)
            return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    await message.reply(
        "üìÑ <b>–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω</b>\n\n"
        "–ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ 'cost', 'template' –∏–ª–∏ '—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'",
        parse_mode="HTML",
    )


@dp.message_handler(text="üí∞ –°–≤–æ–¥–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
async def cost_summary_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        summary = await generate_cost_summary_for_bot()
        await message.answer(summary, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
            parse_mode="HTML",
        )


# === –ù–û–í–´–ï CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===


@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu_callback(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.answer()
    welcome_text = (
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "üü£ <b>–û—Ç—á–µ—Ç—ã WB</b> - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã Wildberries\n"
        "üü† <b>–û—Ç—á–µ—Ç—ã Ozon</b> - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã Ozon\n"
        "üìã <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö WB</b> - –∑–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "üí∞ <b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        "‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏</b> - –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã\n"
        "üîç <b>API —Å—Ç–∞—Ç—É—Å</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º"
    )
    await callback_query.message.answer(
        welcome_text, parse_mode="HTML", reply_markup=get_main_menu()
    )


# WB –û—Ç—á–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data == "wb_financial")
async def wb_financial_callback(callback_query: types.CallbackQuery):
    """WB –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    await callback_query.answer()
    from date_picker import date_range_manager, get_enhanced_period_menu

    date_range_manager.start_date_selection(callback_query.from_user.id, "wb_financial")

    await callback_query.message.edit_text(
        "üü£ <b>Wildberries - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚ö†Ô∏è <i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 176 –¥–Ω–µ–π (WB)</i>",
        reply_markup=get_enhanced_period_menu(),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data == "wb_cumulative")
async def wb_cumulative_callback(callback_query: types.CallbackQuery):
    """WB –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥"""
    await callback_query.answer()
    from date_picker import date_range_manager, get_enhanced_period_menu

    date_range_manager.start_date_selection(callback_query.from_user.id, "wb_cumulative")

    await callback_query.message.edit_text(
        "üü£ <b>Wildberries - –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚ö†Ô∏è <i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 176 –¥–Ω–µ–π (WB)</i>",
        reply_markup=get_enhanced_period_menu(),
        parse_mode="HTML",
    )


# Ozon –û—Ç—á–µ—Ç—ã
@dp.callback_query_handler(lambda c: c.data == "ozon_financial")
async def ozon_financial_callback(callback_query: types.CallbackQuery):
    """Ozon –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    await callback_query.answer()
    from date_picker import date_range_manager, get_enhanced_period_menu

    date_range_manager.start_date_selection(callback_query.from_user.id, "ozon_financial")

    await callback_query.message.edit_text(
        "üü† <b>Ozon - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚úÖ <i>–î–æ—Å—Ç—É–ø–Ω—ã –ø–µ—Ä–∏–æ–¥—ã –¥–æ 180 –¥–Ω–µ–π</i>",
        reply_markup=get_enhanced_period_menu(),
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data == "ozon_cumulative")
async def ozon_cumulative_callback(callback_query: types.CallbackQuery):
    """Ozon –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥"""
    await callback_query.answer()
    from date_picker import date_range_manager, get_enhanced_period_menu

    date_range_manager.start_date_selection(callback_query.from_user.id, "ozon_cumulative")

    await callback_query.message.edit_text(
        "üü† <b>Ozon - –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏—Ç–æ–≥</b>\n\n"
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
        "‚úÖ <i>–î–æ—Å—Ç—É–ø–Ω—ã –ø–µ—Ä–∏–æ–¥—ã –¥–æ 180 –¥–Ω–µ–π</i>",
        reply_markup=get_enhanced_period_menu(),
        parse_mode="HTML",
    )


# WB –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
@dp.callback_query_handler(lambda c: c.data == "wb_upload_sales")
async def wb_upload_sales_callback(callback_query: types.CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö WB"""
    await callback_query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    user_waiting_for_file[callback_query.from_user.id] = "sales"

    await callback_query.message.edit_text(
        "üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö WB</b>\n\n"
        "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, —Å–∫–∞—á–∞–Ω–Ω—ã–π –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Wildberries.\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª:</b>\n"
        "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
        '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" ‚Üí "–û—Ç—á–µ—Ç—ã"\n'
        '3. –í—ã–±–µ—Ä–∏—Ç–µ "–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"\n'
        "4. –°–∫–∞—á–∞–π—Ç–µ Excel —Ñ–∞–π–ª\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
        "‚è≥ <b>–ñ–¥—É —Ñ–∞–π–ª...</b>",
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data == "wb_upload_orders")
async def wb_upload_orders_callback(callback_query: types.CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫–∞–∑–∞—Ö WB"""
    await callback_query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    user_waiting_for_file[callback_query.from_user.id] = "orders"

    await callback_query.message.edit_text(
        "üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫–∞–∑–∞—Ö WB</b>\n\n"
        "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º –æ –∑–∞–∫–∞–∑–∞—Ö, —Å–∫–∞—á–∞–Ω–Ω—ã–π –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Wildberries.\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª:</b>\n"
        "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
        '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" ‚Üí "–û—Ç—á–µ—Ç—ã"\n'
        '3. –í—ã–±–µ—Ä–∏—Ç–µ "–û—Ç—á–µ—Ç –æ –∑–∞–∫–∞–∑–∞—Ö"\n'
        "4. –°–∫–∞—á–∞–π—Ç–µ Excel —Ñ–∞–π–ª\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
        "‚è≥ <b>–ñ–¥—É —Ñ–∞–π–ª...</b>",
        parse_mode="HTML",
    )


@dp.callback_query_handler(lambda c: c.data == "wb_upload_finance")
async def wb_upload_finance_callback(callback_query: types.CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ WB"""
    await callback_query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    user_waiting_for_file[callback_query.from_user.id] = "finance"

    await callback_query.message.edit_text(
        "üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ WB</b>\n\n"
        "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç—á–µ—Ç–æ–º, —Å–∫–∞—á–∞–Ω–Ω—ã–π –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Wildberries.\n\n"
        "üí° <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª:</b>\n"
        "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
        '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–§–∏–Ω–∞–Ω—Å—ã" ‚Üí "–û—Ç—á–µ—Ç—ã"\n'
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
        "4. –°–∫–∞—á–∞–π—Ç–µ Excel —Ñ–∞–π–ª\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
        "‚è≥ <b>–ñ–¥—É —Ñ–∞–π–ª...</b>",
        parse_mode="HTML",
    )


# –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
@dp.callback_query_handler(lambda c: c.data == "cost_template")
async def cost_template_callback(callback_query: types.CallbackQuery):
    """–®–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    await callback_query.answer()
    await cost_template_handler(callback_query.message)


@dp.callback_query_handler(lambda c: c.data == "cost_summary")
async def cost_summary_callback(callback_query: types.CallbackQuery):
    """–°–≤–æ–¥–∫–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    await callback_query.answer()
    await cost_summary_handler(callback_query.message)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ì–†–£–ó–ö–ò EXCEL –§–ê–ô–õ–û–í ===

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
user_waiting_for_file = {}  # {user_id: file_type}


@dp.message_handler(content_types=["document"])
async def handle_document_upload(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
    if user_id not in user_waiting_for_file:
        await message.reply(
            "‚ùì –Ø –Ω–µ –æ–∂–∏–¥–∞–ª —Ñ–∞–π–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö WB' –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return

    file_type = user_waiting_for_file[user_id]
    document = message.document

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not document.file_name.endswith((".xlsx", ".xls")):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.reply("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(document.file_id)
        file_path = f"uploads/wb_reports/{document.file_name}"

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        import os

        os.makedirs("uploads/wb_reports", exist_ok=True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_info.file_path, file_path)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if file_type == "sales":
            analysis = await wb_excel_processor.process_sales_report(file_path)
        elif file_type == "orders":
            analysis = await wb_excel_processor.process_orders_report(file_path)
        elif file_type == "finance":
            analysis = await wb_excel_processor.process_finance_report(file_path)
        else:
            analysis = {"success": False, "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"}

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        report = wb_excel_processor.format_analysis_report(analysis)

        await processing_msg.edit_text(
            report + "\n\nüí° <i>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</i>",
            parse_mode="HTML",
        )

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        del user_waiting_for_file[user_id]

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(file_path)
        except:
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if user_id in user_waiting_for_file:
            del user_waiting_for_file[user_id]


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown, skip_updates=True)
