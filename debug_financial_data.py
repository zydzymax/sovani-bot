#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def debug_financial_data():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö"""
    try:
        from real_data_reports import RealDataFinancialReports

        logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ 2025-01-01 - 2025-09-21")

        reports = RealDataFinancialReports()
        date_from = "2025-01-01"
        date_to = "2025-09-21"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º WB –¥–∞–Ω–Ω—ã–µ
        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ WB –¥–∞–Ω–Ω—ã—Ö...")
        wb_data = await reports.get_real_wb_sales(date_from, date_to)

        logger.info(f"WB —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"  –í—ã—Ä—É—á–∫–∞: {wb_data.get('revenue', 0):,.2f} ‚ÇΩ")
        logger.info(f"  –ï–¥–∏–Ω–∏—Ü –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {wb_data.get('units', 0)}")
        logger.info(f"  –ó–∞–∫–∞–∑–æ–≤ –µ–¥–∏–Ω–∏—Ü: {wb_data.get('orders_units', 0)}")
        logger.info(f"  –°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {wb_data.get('orders_revenue', 0):,.2f} ‚ÇΩ")
        logger.info(f"  –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞: {wb_data.get('buyout_rate', 0):.1f}%")
        logger.info(f"  –í–æ–∑–≤—Ä–∞—Ç–æ–≤: {wb_data.get('returns_count', 0)}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ WB
        if 'sales_data' in wb_data:
            sales_data = wb_data['sales_data']
            logger.info(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö WB ({len(sales_data)} –∑–∞–ø–∏—Å–µ–π):")

            # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
            dates = set()
            realizations = 0
            returns = 0

            for sale in sales_data[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                date = sale.get('date', '')[:10]
                dates.add(date)

                if sale.get('isRealization'):
                    realizations += 1
                else:
                    returns += 1

                logger.info(f"  –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: {sale.get('date', '')} - {sale.get('saleID', '')} - "
                          f"{'—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è' if sale.get('isRealization') else '–≤–æ–∑–≤—Ä–∞—Ç'} - "
                          f"{sale.get('priceWithDisc', 0)} ‚ÇΩ")

            logger.info(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {len(dates)}")
            logger.info(f"  –†–µ–∞–ª–∏–∑–∞—Ü–∏–π: {realizations}")
            logger.info(f"  –í–æ–∑–≤—Ä–∞—Ç–æ–≤: {returns}")

            if dates:
                sorted_dates = sorted(dates)
                logger.info(f"  –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {sorted_dates[0]} - {sorted_dates[-1]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ozon –¥–∞–Ω–Ω—ã–µ
        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ Ozon –¥–∞–Ω–Ω—ã—Ö...")
        ozon_data = await reports.get_real_ozon_sales(date_from, date_to)

        logger.info(f"Ozon —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"  –í—ã—Ä—É—á–∫–∞: {ozon_data.get('revenue', 0):,.2f} ‚ÇΩ")
        logger.info(f"  –ï–¥–∏–Ω–∏—Ü: {ozon_data.get('units', 0)}")
        logger.info(f"  –ö–æ–º–∏—Å—Å–∏—è: {ozon_data.get('commission', 0):,.2f} ‚ÇΩ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º chunked API –Ω–∞–ø—Ä—è–º—É—é
        logger.info("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ chunked API...")

        from api_chunking import ChunkedAPIManager
        import api_clients_main as api_clients

        chunked_api = ChunkedAPIManager(api_clients)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥
        test_from = "2025-09-15"
        test_to = "2025-09-21"

        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º chunked API –∑–∞ –ø–µ—Ä–∏–æ–¥ {test_from} - {test_to}")

        try:
            wb_chunked = await chunked_api.get_wb_sales_chunked(test_from, test_to)
            logger.info(f"WB chunked: {len(wb_chunked)} –∑–∞–ø–∏—Å–µ–π")

            if wb_chunked:
                logger.info(f"–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {wb_chunked[0]}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WB chunked API: {e}")

        try:
            ozon_fbo = await chunked_api.get_ozon_fbo_chunked(test_from, test_to)
            ozon_fbs = await chunked_api.get_ozon_fbs_chunked(test_from, test_to)
            logger.info(f"Ozon FBO chunked: {len(ozon_fbo or [])} –∑–∞–ø–∏—Å–µ–π")
            logger.info(f"Ozon FBS chunked: {len(ozon_fbs or [])} –∑–∞–ø–∏—Å–µ–π")

            if ozon_fbo:
                logger.info(f"–ü–µ—Ä–≤–∞—è FBO –∑–∞–ø–∏—Å—å: {ozon_fbo[0]}")
            if ozon_fbs:
                logger.info(f"–ü–µ—Ä–≤–∞—è FBS –∑–∞–ø–∏—Å—å: {ozon_fbs[0]}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Ozon chunked API: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        logger.info("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞ (—Ñ–∞–π–ª—ã)...")

        try:
            # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π download_wb_reports
            wb_reports = await api_clients.download_wb_reports()
            if wb_reports and wb_reports.get('sales'):
                with open(wb_reports['sales'], 'r', encoding='utf-8') as f:
                    import json
                    old_sales = json.load(f)
                logger.info(f"–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ WB: {len(old_sales)} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.info("–°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ WB: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞ WB: {e}")

        logger.info("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    asyncio.run(debug_financial_data())