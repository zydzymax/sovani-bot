#!/usr/bin/env python3
"""–ü–æ–º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö WB –∑–∞ 2025 –≥–æ–¥
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import asyncio
import json
import logging
from datetime import datetime

from real_data_reports import RealDataFinancialReports

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class MonthlyAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.real_reports = RealDataFinancialReports()
        self.monthly_data = {}

    async def analyze_all_months_2025(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–µ—Å—è—Ü–µ–≤ 2025 –≥–æ–¥–∞"""
        logger.info("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ü–û–ú–ï–°–Ø–ß–ù–´–ô –ê–ù–ê–õ–ò–ó WB –ó–ê 2025 –ì–û–î")
        logger.info("=" * 60)

        # –ú–µ—Å—è—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–¥–æ —Å–µ–Ω—Ç—è–±—Ä—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
        months = [
            ("2025-01-01", "2025-01-31", "–Ø–Ω–≤–∞—Ä—å"),
            ("2025-02-01", "2025-02-28", "–§–µ–≤—Ä–∞–ª—å"),
            ("2025-03-01", "2025-03-31", "–ú–∞—Ä—Ç"),
            ("2025-04-01", "2025-04-30", "–ê–ø—Ä–µ–ª—å"),
            ("2025-05-01", "2025-05-31", "–ú–∞–π"),
            ("2025-06-01", "2025-06-30", "–ò—é–Ω—å"),
            ("2025-07-01", "2025-07-31", "–ò—é–ª—å"),
            ("2025-08-01", "2025-08-31", "–ê–≤–≥—É—Å—Ç"),
            ("2025-09-01", "2025-09-26", "–°–µ–Ω—Ç—è–±—Ä—å (–¥–æ 26.09)"),
        ]

        total_revenue = 0
        total_units = 0
        monthly_results = []

        for date_from, date_to, month_name in months:
            logger.info(f"\nüìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {month_name} ({date_from} - {date_to})")

            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ WB
                result = await self.real_reports.calculate_real_pnl(
                    date_from, date_to, platform_filter="wb"
                )

                wb_data = result["wb"]
                month_revenue = wb_data["revenue"]
                month_units = wb_data["units"]
                month_commission = wb_data.get("commission", 0)
                month_profit = wb_data.get("profit", 0)
                processing_time = result.get("processing_time", 0)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                orders_stats = wb_data.get("orders_stats", {})
                sales_stats = wb_data.get("sales_stats", {})

                monthly_result = {
                    "month": month_name,
                    "date_from": date_from,
                    "date_to": date_to,
                    "revenue": month_revenue,
                    "units": month_units,
                    "commission": month_commission,
                    "profit": month_profit,
                    "processing_time": processing_time,
                    "orders_count": orders_stats.get("count", 0),
                    "orders_revenue": orders_stats.get("price_with_disc", 0),
                    "sales_count": sales_stats.get("count", 0),
                    "sales_revenue": sales_stats.get("price_with_disc", 0),
                    "buyout_rate": (
                        (sales_stats.get("count", 0) / orders_stats.get("count", 1)) * 100
                        if orders_stats.get("count", 0) > 0
                        else 0
                    ),
                }

                monthly_results.append(monthly_result)

                total_revenue += month_revenue
                total_units += month_units

                logger.info(f"‚úÖ {month_name}:")
                logger.info(f"   üí∞ –í—ã—Ä—É—á–∫–∞: {month_revenue:,.0f} ‚ÇΩ")
                logger.info(f"   üì¶ –ï–¥–∏–Ω–∏—Ü: {month_units:,.0f} —à—Ç")
                logger.info(f"   üõí –ó–∞–∫–∞–∑–æ–≤: {orders_stats.get('count', 0):,.0f}")
                logger.info(f"   ‚úÖ –ü—Ä–æ–¥–∞–∂: {sales_stats.get('count', 0):,.0f}")
                if orders_stats.get("count", 0) > 0:
                    buyout_rate = (sales_stats.get("count", 0) / orders_stats.get("count", 0)) * 100
                    logger.info(f"   üìà –í—ã–∫—É–ø: {buyout_rate:.1f}%")
                logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.1f}—Å")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {month_name}: {e}")
                monthly_result = {
                    "month": month_name,
                    "date_from": date_from,
                    "date_to": date_to,
                    "error": str(e),
                    "revenue": 0,
                    "units": 0,
                }
                monthly_results.append(monthly_result)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.monthly_data = {
            "analysis_date": datetime.now().isoformat(),
            "total_period": "2025-01-01 –¥–æ 2025-09-26",
            "total_revenue": total_revenue,
            "total_units": total_units,
            "expected_revenue": 530000,  # –û–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "discrepancy_ratio": total_revenue / 530000 if total_revenue > 0 else 0,
            "monthly_breakdown": monthly_results,
        }

        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê 2025 –ì–û–î:")
        logger.info(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ WB: {total_revenue:,.0f} ‚ÇΩ")
        logger.info(f"üì¶ –û–±—â–∏–µ –µ–¥–∏–Ω–∏—Ü—ã: {total_units:,.0f} —à—Ç")
        logger.info("üéØ –û–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 530,000 ‚ÇΩ")
        logger.info(f"üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {total_revenue/530000:.1f}x")
        logger.info(f"üìâ –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {total_revenue - 530000:,.0f} ‚ÇΩ")

        return self.monthly_data

    def save_analysis_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        filename = f"monthly_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = f"/root/sovani_bot/reports/{filename}"

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(self.monthly_data, f, ensure_ascii=False, indent=2)

            logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None

    def analyze_discrepancies(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π"""
        logger.info("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")
        logger.info("=" * 40)

        if not self.monthly_data:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        total_revenue = self.monthly_data["total_revenue"]
        expected = self.monthly_data["expected_revenue"]
        ratio = self.monthly_data["discrepancy_ratio"]

        logger.info(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.0f} ‚ÇΩ")
        logger.info(f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {expected:,.0f} ‚ÇΩ")
        logger.info(f"üìà –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≤ {ratio:.1f} —Ä–∞–∑–∞")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        monthly_breakdown = self.monthly_data["monthly_breakdown"]

        logger.info("\nüìÖ –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê:")
        for month_data in monthly_breakdown:
            if "error" not in month_data:
                month_avg = month_data["revenue"] / (530000 / 9)  # –°—Ä–µ–¥–Ω–∏–π –æ–∂–∏–¥–∞–µ–º—ã–π –º–µ—Å—è—Ü
                logger.info(
                    f"   {month_data['month']}: {month_data['revenue']:,.0f} ‚ÇΩ (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {month_avg:.1f}x)"
                )

        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
        logger.info("\nü§î –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")

        # 1. –ú–µ—Ç–æ–¥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞
        total_orders = sum(m.get("orders_count", 0) for m in monthly_breakdown if "error" not in m)
        total_sales = sum(m.get("sales_count", 0) for m in monthly_breakdown if "error" not in m)

        logger.info("1Ô∏è‚É£ –ú–ï–¢–û–î–ò–ö–ê –ü–û–î–°–ß–ï–¢–ê:")
        logger.info(f"   üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders:,.0f}")
        logger.info(f"   ‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {total_sales:,.0f}")
        logger.info("   üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: priceWithDisc (—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏)")
        logger.info("   üéØ –ò—Å—Ç–æ—á–Ω–∏–∫: Sales API (—Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∫—É–ø—ã)")

        if total_orders > total_sales * 2:
            logger.info("   ‚ö†Ô∏è –ú–ù–û–ì–û –ó–ê–ö–ê–ó–û–í vs –ü–†–û–î–ê–ñ - –≤–æ–∑–º–æ–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–µ–≤—ã–∫—É–ø–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")

        # 2. –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        logger.info("2Ô∏è‚É£ –ü–ï–†–ò–û–î –ê–ù–ê–õ–ò–ó–ê:")
        logger.info("   üìÖ –°–∏—Å—Ç–µ–º–Ω—ã–π: 01.01.2025 - 26.09.2025 (268 –¥–Ω–µ–π)")
        logger.info("   ‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª: –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥?")

        # 3. –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
        logger.info("3Ô∏è‚É£ –û–•–í–ê–¢ –ü–õ–ê–¢–§–û–†–ú:")
        logger.info("   üü£ –°–∏—Å—Ç–µ–º–∞: —Ç–æ–ª—å–∫–æ Wildberries")
        logger.info("   ‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª: —Ç–æ–ª—å–∫–æ WB –∏–ª–∏ WB+Ozon?")

        # 4. –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        logger.info("4Ô∏è‚É£ –¢–ò–ü–´ –û–ü–ï–†–ê–¶–ò–ô:")
        logger.info("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç: isRealization = true")
        logger.info("   üìä –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: priceWithDisc (–ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞)")
        logger.info("   ‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª: –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥—É—é –º–µ—Ç–æ–¥–∏–∫—É?")

        return {
            "total_revenue": total_revenue,
            "expected_revenue": expected,
            "discrepancy_ratio": ratio,
            "total_orders": total_orders,
            "total_sales": total_sales,
            "analysis_points": [
                "–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Sales API —Å priceWithDisc",
                "–£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ (isRealization=true)",
                "–ü–µ—Ä–∏–æ–¥: –ø–æ–ª–Ω—ã—Ö 268 –¥–Ω–µ–π 2025 –≥–æ–¥–∞",
                "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: —Ç–æ–ª—å–∫–æ Wildberries",
                f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–π –≤ {ratio:.1f} —Ä–∞–∑–∞ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É",
            ],
        }


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = MonthlyAnalyzer()

    # –ü—Ä–æ–≤–æ–¥–∏–º –ø–æ–º–µ—Å—è—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    results = await analyzer.analyze_all_months_2025()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
    discrepancy_analysis = analyzer.analyze_discrepancies()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = analyzer.save_analysis_report()

    logger.info("\nüéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    logger.info(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_path}")

    return results, discrepancy_analysis


if __name__ == "__main__":
    results, analysis = asyncio.run(main())
