#!/usr/bin/env python3
"""–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å Telegram –±–æ—Ç–æ–º
–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ DDS –∏ P&L —Ç–∞–±–ª–∏—Ü –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ—Ç—á–µ—Ç–∞–º
"""

import logging
import os
from datetime import datetime
from datetime import datetime as dt

from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
# from cost_data_processor import cost_processor  # Module not found - disabled
from real_data_reports import generate_cumulative_financial_report, generate_real_financial_report
cost_processor = None  # Stub for compatibility

from excel_report_generator import excel_generator
from staged_processor import staged_processor

logger = logging.getLogger(__name__)


def format_staged_result_to_report(result: dict, date_from: str, date_to: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞"""
    try:
        total_revenue = result.get("total_revenue", 0)
        total_units = result.get("total_units", 0)
        net_profit = result.get("net_profit", 0)

        wb_data = result.get("wb_data", {})
        ozon_data = result.get("ozon_data", {})

        period_days = (dt.strptime(date_to, "%Y-%m-%d") - dt.strptime(date_from, "%Y-%m-%d")).days

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        profit_margin = (net_profit / total_revenue * 100) if total_revenue > 0 else 0
        daily_revenue = total_revenue / period_days if period_days > 0 else 0

        report = f"""üìä <b>–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢</b>
üóì –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to} ({period_days} –¥–Ω–µ–π)
‚ö° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–∞–ø–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

üéØ <b>–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò</b>
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue:,.0f} ‚ÇΩ</b>
üì¶ –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: <b>{total_units:,}</b>
üéØ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{net_profit:,.0f} ‚ÇΩ</b>
üìä –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: <b>{profit_margin:.1f}%</b>
üìà –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{daily_revenue:,.0f} ‚ÇΩ</b>

üü£ <b>WILDBERRIES</b>
‚Ä¢ üìã –ó–∞–∫–∞–∑–æ–≤: {wb_data.get('orders_count', 0):,}
‚Ä¢ ‚úÖ –ü—Ä–æ–¥–∞–∂: {wb_data.get('sales_count', 0):,}
‚Ä¢ üí∞ –í—ã—Ä—É—á–∫–∞: {wb_data.get('revenue', 0):,.0f} ‚ÇΩ
‚Ä¢ üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞: {wb_data.get('buyout_rate', 0):.1f}%
‚Ä¢ üéØ –†–µ–∫–ª–∞–º–∞: {wb_data.get('advertising_spend', 0):,.0f} ‚ÇΩ

üîµ <b>OZON</b>
‚Ä¢ üì¶ –û–ø–µ—Ä–∞—Ü–∏–π: {ozon_data.get('units', 0):,}
‚Ä¢ üí∞ –í—ã—Ä—É—á–∫–∞: {ozon_data.get('revenue', 0):,.0f} ‚ÇΩ
‚Ä¢ üìä FBO –∑–∞–∫–∞–∑–æ–≤: {ozon_data.get('fbo_orders_count', 0):,}
‚Ä¢ üìà FBS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {ozon_data.get('fbs_transactions_count', 0):,}

‚ö° <b>–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨</b>
‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚úÖ –≠—Ç–∞–ø–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: WB ‚Üí Ozon ‚Üí –ê–≥—Ä–µ–≥–∞—Ü–∏—è
‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API
üïê –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('processing_completed_at', '–Ω/–¥')}

üî• –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ –ø–æ–ª—É—á–µ–Ω—ã –±–µ–∑ —Ñ–µ–π–∫–æ–≤!"""

        return report

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return f"""üìä <b>–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢</b>
üóì –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}

‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)[:200]}

–ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
üí∞ –í—ã—Ä—É—á–∫–∞: {result.get('total_revenue', 0):,.0f} ‚ÇΩ
üì¶ –ï–¥–∏–Ω–∏—Ü: {result.get('total_units', 0):,}
üéØ –ü—Ä–∏–±—ã–ª—å: {result.get('net_profit', 0):,.0f} ‚ÇΩ"""


def add_excel_export_buttons(
    existing_markup: InlineKeyboardMarkup | None = None,
    date_from: str = None,
    date_to: str = None,
    context: str = "financial",
) -> InlineKeyboardMarkup:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

    Args:
        existing_markup: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ ('financial' –∏–ª–∏ 'cumulative')

    """
    if existing_markup is None:
        markup = InlineKeyboardMarkup()
    else:
        markup = existing_markup

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel
    if date_from and date_to:
        markup.add(
            InlineKeyboardButton(
                "üìä DDS Excel", callback_data=f"export_dds_excel:{date_from}:{date_to}:{context}"
            ),
            InlineKeyboardButton(
                "üìà P&L Excel", callback_data=f"export_pnl_excel:{date_from}:{date_to}:{context}"
            ),
        )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    markup.add(
        InlineKeyboardButton("üí∞ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="upload_cost_template")
    )

    return markup


async def generate_enhanced_financial_report(
    date_from: str, date_to: str, progress_message: types.Message = None
) -> tuple[str, InlineKeyboardMarkup]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞

    Args:
        date_from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        date_to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        progress_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤)

    Returns:
        Tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏)

    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_date = dt.strptime(date_from, "%Y-%m-%d")
    end_date = dt.strptime(date_to, "%Y-%m-%d")
    period_days = (end_date - start_date).days

    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ {period_days} –¥–Ω–µ–π ({date_from} - {date_to})")

    # –î–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (–±–æ–ª—å—à–µ 60 –¥–Ω–µ–π) –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —ç—Ç–∞–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    if period_days > 60:
        logger.info(f"üöÄ –ë–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥ ({period_days} –¥–Ω–µ–π) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∞–ø–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —ç—Ç–∞–ø–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            result = await staged_processor.process_year_staged(
                date_from, date_to, progress_message
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            report_text = format_staged_result_to_report(result, date_from, date_to)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            report_text = await generate_real_financial_report(date_from, date_to, progress_message)
    else:
        # For smaller periods use the existing system
        logger.info(f"–û–±—ã—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({period_days} –¥–Ω–µ–π) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
        report_text = await generate_real_financial_report(date_from, date_to, progress_message)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
    report_text += """

üì§ <b>–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•</b>
‚Ä¢ DDS Excel - –¥–µ—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
‚Ä¢ P&L Excel - –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–µ–π –∏ —É–±—ã—Ç–∫–æ–≤
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    markup = add_excel_export_buttons(date_from=date_from, date_to=date_to, context="financial")

    return report_text, markup


async def generate_enhanced_cumulative_report(days: int) -> tuple[str, InlineKeyboardMarkup]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report_text = await generate_cumulative_financial_report(days)

    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    from datetime import date, timedelta

    date_to = date.today().strftime("%Y-%m-%d")
    date_from = (date.today() - timedelta(days=days - 1)).strftime("%Y-%m-%d")

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
    report_text += f"""

üì§ <b>–≠–ö–°–ü–û–†–¢ –ù–ê–†–ê–°–¢–ê–Æ–©–ï–ì–û –ò–¢–û–ì–ê</b>
‚Ä¢ DDS Excel - –¥–≤–∏–∂–µ–Ω–∏–µ –î–° –∑–∞ {days} –¥–Ω–µ–π
‚Ä¢ P&L Excel - –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ P&L –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    markup = add_excel_export_buttons(date_from=date_from, date_to=date_to, context="cumulative")

    return report_text, markup


async def handle_dds_excel_export(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ DDS –≤ Excel"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data_parts = callback_query.data.split(":")
        if len(data_parts) < 4:
            await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        _, date_from, date_to, context = data_parts

        await callback_query.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é DDS Excel –æ—Ç—á–µ—Ç...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_msg = await callback_query.message.reply(
            "üìä <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DDS Excel –æ—Ç—á–µ—Ç–∞</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}\n"
            "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...",
            parse_mode="HTML",
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        excel_file_path = await excel_generator.generate_dds_excel_report(date_from, date_to)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if os.path.exists(excel_file_path):
            await status_msg.edit_text(
                "üìä <b>DDS Excel –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}\n"
                "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
                parse_mode="HTML",
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
            with open(excel_file_path, "rb") as file:
                await callback_query.message.reply_document(
                    InputFile(file, filename=os.path.basename(excel_file_path)),
                    caption=f"üìä <b>DDS –æ—Ç—á–µ—Ç</b>\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}\n"
                    f"üïê –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    parse_mode="HTML",
                )

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_msg.delete()

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            import asyncio

            asyncio.create_task(delete_file_later(excel_file_path, 300))

        else:
            await status_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞</b>\n\n"
                "–§–∞–π–ª DDS –æ—Ç—á–µ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ DDS Excel: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        try:
            await callback_query.message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ DDS</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
            )
        except:
            pass


async def handle_pnl_excel_export(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ P&L –≤ Excel"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data_parts = callback_query.data.split(":")
        if len(data_parts) < 4:
            await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        _, date_from, date_to, context = data_parts

        await callback_query.answer("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é P&L Excel –æ—Ç—á–µ—Ç...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_msg = await callback_query.message.reply(
            "üìà <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è P&L Excel –æ—Ç—á–µ—Ç–∞</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}\n"
            "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...",
            parse_mode="HTML",
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_data_file = cost_processor.get_latest_cost_data_file()
        if cost_data_file:
            await status_msg.edit_text(
                "üìà <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è P&L Excel –æ—Ç—á–µ—Ç–∞</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}\n"
                "üí∞ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
                "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...",
                parse_mode="HTML",
            )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
        excel_file_path = await excel_generator.generate_pnl_excel_report(
            date_from, date_to, cost_data_file
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        if os.path.exists(excel_file_path):
            await status_msg.edit_text(
                "üìà <b>P&L Excel –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}\n"
                f"üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {'‚úÖ –£—á—Ç–µ–Ω–∞' if cost_data_file else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}\n"
                "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
                parse_mode="HTML",
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
            with open(excel_file_path, "rb") as file:
                caption = (
                    f"üìà <b>P&L –æ—Ç—á–µ—Ç</b>\n"
                    f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Äî {date_to}\n"
                    f"üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {'—É—á—Ç–µ–Ω–∞' if cost_data_file else '–±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'}\n"
                    f"üïê –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )

                await callback_query.message.reply_document(
                    InputFile(file, filename=os.path.basename(excel_file_path)),
                    caption=caption,
                    parse_mode="HTML",
                )

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_msg.delete()

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            import asyncio

            asyncio.create_task(delete_file_later(excel_file_path, 300))

        else:
            await status_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞</b>\n\n"
                "–§–∞–π–ª P&L –æ—Ç—á–µ—Ç–∞ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ P&L Excel: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        try:
            await callback_query.message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ P&L</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
            )
        except:
            pass


async def handle_cost_template_upload(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —à–∞–±–ª–æ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        await callback_query.answer("üí∞ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —à–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_msg = await callback_query.message.reply(
            "üí∞ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n" "üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö...",
            parse_mode="HTML",
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
        from cost_template_generator import CostTemplateGenerator

        generator = CostTemplateGenerator()
        template_path = await generator.generate_cost_template()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
        if os.path.exists(template_path):
            await status_msg.edit_text(
                "üí∞ <b>–®–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤!</b>\n\n" "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
                parse_mode="HTML",
            )

            with open(template_path, "rb") as file:
                await callback_query.message.reply_document(
                    InputFile(file, filename=os.path.basename(template_path)),
                    caption="üí∞ <b>–®–∞–±–ª–æ–Ω —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n"
                    "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç\n"
                    "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞",
                    parse_mode="HTML",
                )

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_msg.delete()

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
            import asyncio

            asyncio.create_task(delete_file_later(template_path, 600))

        else:
            await status_msg.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
                "–®–∞–±–ª–æ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")
        try:
            await callback_query.message.reply(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
            )
        except:
            pass


async def handle_cost_file_upload(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        if not message.document:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not message.document.file_name.endswith((".xlsx", ".xls")):
            await message.reply(
                "‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)",
                parse_mode="HTML",
            )
            return

        await message.reply(
            "üí∞ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n" "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...", parse_mode="HTML"
        )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await message.bot.get_file(message.document.file_id)
        downloaded_file = await message.bot.download_file(file_info.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        temp_file_path = f"/tmp/cost_template_{timestamp}.xlsx"

        with open(temp_file_path, "wb") as f:
            f.write(downloaded_file.read())

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        status_msg = await message.reply(
            "üí∞ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n" "üîÑ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...",
            parse_mode="HTML",
        )

        processed_data = await cost_processor.process_cost_template_file(temp_file_path)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        stats = processed_data["statistics"]
        errors = processed_data["validation_errors"]

        result_text = f"""üí∞ <b>–§–∞–π–ª —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω</b>

üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´:</b>
‚Ä¢ SKU —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: {stats['total_sku_count']}
‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {stats['total_variable_costs']}
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {stats['total_fixed_costs']}
‚Ä¢ –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {stats['validation_errors_count']}

üíµ <b>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü:</b>
{stats['monthly_fixed_total']:,.0f} ‚ÇΩ"""

        if stats.get("platforms"):
            result_text += "\n\nüìà <b>–ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</b>"
            for platform, data in stats["platforms"].items():
                result_text += f"\n‚Ä¢ {platform}: {data['count']} SKU"

        if errors:
            result_text += "\n\n‚ö†Ô∏è <b>–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</b>"
            for error in errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                result_text += f"\n‚Ä¢ {error}"
            if len(errors) > 3:
                result_text += f"\n... –∏ –µ—â–µ {len(errors) - 3} –æ—à–∏–±–æ–∫"

        result_text += "\n\n‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å—á–µ—Ç–æ–≤</b>"

        await status_msg.edit_text(result_text, parse_mode="HTML")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file_path)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        await message.reply(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞</b>\n\n" f"<code>{e!s}</code>", parse_mode="HTML"
        )


async def delete_file_later(file_path: str, delay_seconds: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    import asyncio

    await asyncio.sleep(delay_seconds)
    try:
        if os.path.exists(file_path):
            os.unlink(file_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –±–æ—Ç–∞


def get_callback_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ callback'–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"""
    return {
        "export_dds_excel": handle_dds_excel_export,
        "export_pnl_excel": handle_pnl_excel_export,
        "upload_cost_template": handle_cost_template_upload,
    }


def get_document_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç"""
    return handle_cost_file_upload


async def generate_cost_summary_for_bot() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –±–æ—Ç–∞"""
    return await cost_processor.generate_cost_summary_report()


async def generate_wb_financial_report(
    date_from: str, date_to: str, progress_message: types.Message = None
) -> tuple[str, InlineKeyboardMarkup]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Wildberries

    Args:
        date_from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        date_to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        progress_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    Returns:
        Tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏)

    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞
    start_date = dt.strptime(date_from, "%Y-%m-%d")
    end_date = dt.strptime(date_to, "%Y-%m-%d")
    period_days = (end_date - start_date).days

    logger.info(f"üü£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è WB –æ—Ç—á–µ—Ç–∞ –∑–∞ {period_days} –¥–Ω–µ–π ({date_from} - {date_to})")

    try:
        # –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –¥–æ–±–∞–≤–∏–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É WB
        from real_data_reports import generate_real_financial_report

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç (–ø–æ–∫–∞ –æ–±—â–∏–π, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å WB-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π)
        report_text = await generate_real_financial_report(date_from, date_to, progress_message)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è WB
        report_text = "üü£ <b>WILDBERRIES –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢</b>\n\n" + report_text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WB –æ—Ç—á–µ—Ç–∞: {e}")
        report_text = f"""‚ùå <b>–û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò WB –û–¢–ß–ï–¢–ê</b>

üö´ –û—à–∏–±–∫–∞: {e!s}

üìù <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ WB API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è WB
    report_text += """

üì§ <b>–≠–ö–°–ü–û–†–¢ WB –î–ê–ù–ù–´–•</b>
‚Ä¢ WB DDS Excel - –¥–µ—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ WB
‚Ä¢ WB P&L Excel - –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–µ–π –∏ —É–±—ã—Ç–∫–æ–≤ WB
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ WB"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è WB
    markup = add_excel_export_buttons(date_from=date_from, date_to=date_to, context="wb_financial")

    return report_text, markup


async def generate_ozon_financial_report(
    date_from: str, date_to: str, progress_message: types.Message = None
) -> tuple[str, InlineKeyboardMarkup]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Ozon

    Args:
        date_from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        date_to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
        progress_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

    Returns:
        Tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏)

    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞
    start_date = dt.strptime(date_from, "%Y-%m-%d")
    end_date = dt.strptime(date_to, "%Y-%m-%d")
    period_days = (end_date - start_date).days

    logger.info(f"üü† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Ozon –æ—Ç—á–µ—Ç–∞ –∑–∞ {period_days} –¥–Ω–µ–π ({date_from} - {date_to})")

    try:
        # –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –¥–æ–±–∞–≤–∏–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É Ozon
        from real_data_reports import generate_real_financial_report

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç (–ø–æ–∫–∞ –æ–±—â–∏–π, –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å Ozon-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π)
        report_text = await generate_real_financial_report(date_from, date_to, progress_message)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è Ozon
        report_text = "üü† <b>OZON –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢</b>\n\n" + report_text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Ozon –æ—Ç—á–µ—Ç–∞: {e}")
        report_text = f"""‚ùå <b>–û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò OZON –û–¢–ß–ï–¢–ê</b>

üö´ –û—à–∏–±–∫–∞: {e!s}

üìù <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ Ozon API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"""

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è Ozon
    report_text += """

üì§ <b>–≠–ö–°–ü–û–†–¢ OZON –î–ê–ù–ù–´–•</b>
‚Ä¢ Ozon DDS Excel - –¥–µ—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ Ozon
‚Ä¢ Ozon P&L Excel - –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–µ–π –∏ —É–±—ã—Ç–∫–æ–≤ Ozon
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ Ozon"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è Ozon
    markup = add_excel_export_buttons(
        date_from=date_from, date_to=date_to, context="ozon_financial"
    )

    return report_text, markup
