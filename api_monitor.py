#!/usr/bin/env python3
"""–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

import asyncio
import logging
import os
import sys
from datetime import datetime, timedelta

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from api_clients_main import ozon_api, wb_api

logger = logging.getLogger(__name__)


class APIMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""

    def __init__(self):
        self.status_history = []
        self.last_notification = {}

    async def check_all_apis(self) -> dict[str, dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö API"""
        results = {
            "timestamp": datetime.now(),
            "wildberries": await self._check_wb_api(),
            "ozon": await self._check_ozon_api(),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.status_history.append(results)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 24 —á–∞—Å–∞–º–∏
        cutoff_time = datetime.now() - timedelta(hours=24)
        self.status_history = [
            status for status in self.status_history if status["timestamp"] > cutoff_time
        ]

        return results

    async def _check_wb_api(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ WB API"""
        try:
            is_available = await wb_api.test_api_availability()
            status = wb_api.get_api_status()

            return {
                "available": is_available,
                "status_message": status["status_message"],
                "last_check": status["last_check"],
                "api_name": "WildBerries",
            }
        except Exception as e:
            return {
                "available": False,
                "status_message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}",
                "last_check": datetime.now(),
                "api_name": "WildBerries",
            }

    async def _check_ozon_api(self) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Ozon API"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Ozon API
            stocks = await ozon_api.get_product_stocks()
            is_available = len(stocks) >= 0  # –î–∞–∂–µ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç

            return {
                "available": is_available,
                "status_message": f"Ozon API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(stocks)} –æ—Å—Ç–∞—Ç–∫–æ–≤",
                "last_check": datetime.now(),
                "api_name": "Ozon",
            }
        except Exception as e:
            return {
                "available": False,
                "status_message": f"Ozon API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}",
                "last_check": datetime.now(),
                "api_name": "Ozon",
            }

    def get_status_summary(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API"""
        if not self.status_history:
            return {"overall_status": "unknown", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", "details": {}}

        latest = self.status_history[-1]

        wb_available = latest["wildberries"]["available"]
        ozon_available = latest["ozon"]["available"]

        if wb_available and ozon_available:
            overall_status = "all_ok"
            message = "‚úÖ –í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç"
        elif ozon_available:
            overall_status = "ozon_only"
            message = "‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ Ozon API"
        elif wb_available:
            overall_status = "wb_only"
            message = "‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ WildBerries API"
        else:
            overall_status = "all_down"
            message = "‚ùå –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        return {
            "overall_status": overall_status,
            "message": message,
            "details": {"wildberries": latest["wildberries"], "ozon": latest["ozon"]},
            "last_check": latest["timestamp"],
        }

    def get_fallback_recommendations(self) -> list[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ fallback —Ä–µ–∂–∏–º—É"""
        summary = self.get_status_summary()
        recommendations = []

        if summary["overall_status"] == "all_ok":
            recommendations.append("üü¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ")

        elif summary["overall_status"] == "ozon_only":
            recommendations.extend(
                [
                    "‚ö†Ô∏è WildBerries API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å Ozon",
                    "üìù –û—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã WB –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WB –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É WB",
                    "üì± –£–≤–µ–¥–æ–º–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö",
                ]
            )

        elif summary["overall_status"] == "wb_only":
            recommendations.extend(
                [
                    "‚ö†Ô∏è Ozon API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å WildBerries",
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Ozon –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "üîÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Ozon API",
                ]
            )

        else:  # all_down
            recommendations.extend(
                [
                    "‚ùå –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
                    "üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
                    "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤",
                    "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º",
                    "üë• –£–≤–µ–¥–æ–º–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö",
                ]
            )

        return recommendations

    async def generate_status_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ API"""
        await self.check_all_apis()
        summary = self.get_status_summary()
        recommendations = self.get_fallback_recommendations()

        report_lines = [
            "üìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò API",
            "=" * 40,
            f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {summary['last_check'].strftime('%Y-%m-%d %H:%M:%S')}",
            f"üìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {summary['message']}",
            "",
            "üîç –î–ï–¢–ê–õ–ò –ü–û API:",
        ]

        for api_name, details in summary["details"].items():
            status_icon = "‚úÖ" if details["available"] else "‚ùå"
            report_lines.extend(
                [
                    f"{status_icon} {details['api_name']}:",
                    f"   –°—Ç–∞—Ç—É—Å: {details['status_message']}",
                    f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {details['last_check'].strftime('%H:%M:%S') if details['last_check'] else '–ù–∏–∫–æ–≥–¥–∞'}",
                    "",
                ]
            )

        report_lines.extend(["üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:", ""])

        for i, recommendation in enumerate(recommendations, 1):
            report_lines.append(f"{i}. {recommendation}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
        if len(self.status_history) > 1:
            report_lines.extend(["", "üìà –ò–°–¢–û–†–ò–Ø –î–û–°–¢–£–ü–ù–û–°–¢–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏):", ""])

            for status in self.status_history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫
                wb_icon = "‚úÖ" if status["wildberries"]["available"] else "‚ùå"
                ozon_icon = "‚úÖ" if status["ozon"]["available"] else "‚ùå"
                time_str = status["timestamp"].strftime("%H:%M")
                report_lines.append(f"{time_str}: WB {wb_icon} | Ozon {ozon_icon}")

        return "\n".join(report_lines)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
api_monitor = APIMonitor()


async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    report = await api_monitor.generate_status_report()
    print(report)


if __name__ == "__main__":
    asyncio.run(main())
