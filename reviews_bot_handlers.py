#!/usr/bin/env python3
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏"""

import asyncio
import logging

from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from wb_reviews_manager import WBReview, reviews_manager

logger = logging.getLogger(__name__)


class ReviewsBotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏"""

    @staticmethod
    async def handle_reviews_command(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reviews"""
        try:
            await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã...")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
            reviews = await reviews_manager.get_new_reviews(limit=20)

            if not reviews:
                await message.answer("üìù –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            auto_reviews = [r for r in reviews if reviews_manager.should_auto_respond(r)]
            manual_reviews = [r for r in reviews if reviews_manager.needs_user_approval(r)]

            stats_text = f"üìä –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:\n"
            stats_text += f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç (4-5‚≠ê): {len(auto_reviews)}\n"
            stats_text += f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (1-3‚≠ê): {len(manual_reviews)}"

            await message.answer(stats_text)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
            if auto_reviews:
                await ReviewsBotHandlers._process_auto_reviews(message, auto_reviews)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if manual_reviews:
                await ReviewsBotHandlers._show_manual_reviews(message, manual_reviews)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã reviews: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @staticmethod
    async def handle_all_unanswered_reviews_command(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /all_reviews - –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã"""
        try:
            await message.answer(
                "üîÑ –ü–æ–ª—É—á–∞—é –í–°–ï –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
            )

            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
            reviews = await reviews_manager.get_all_unanswered_reviews(limit=200)

            if not reviews:
                await message.answer("üìù –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ —Ç–∏–ø–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            auto_reviews = [r for r in reviews if reviews_manager.should_auto_respond(r)]
            manual_reviews = [r for r in reviews if reviews_manager.needs_user_approval(r)]

            stats_text = f"üìä –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:\n"
            stats_text += f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç (4-5‚≠ê): {len(auto_reviews)}\n"
            stats_text += f"‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (1-3‚≠ê): {len(manual_reviews)}\n\n"
            stats_text += "üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."

            await message.answer(stats_text)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏
            if auto_reviews:
                await ReviewsBotHandlers._process_auto_reviews_batch(message, auto_reviews)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if manual_reviews:
                await message.answer(
                    f"‚ö†Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ {len(manual_reviews)}"
                )
                await ReviewsBotHandlers._show_manual_reviews(message, manual_reviews[:10])

                if len(manual_reviews) > 10:
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton(
                            "üìã –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –æ—Ç–∑—ã–≤—ã", callback_data="show_more_manual_reviews"
                        )
                    )
                    await message.answer(
                        f"–û—Å—Ç–∞–ª–æ—Å—å {len(manual_reviews) - 10} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                        reply_markup=keyboard,
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã all_reviews: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @staticmethod
    async def _process_auto_reviews_batch(message: types.Message, auto_reviews: list[WBReview]):
        """–ü–∞–∫–µ—Ç–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ 4-5 –∑–≤–µ–∑–¥"""
        processed_count = 0
        total_count = len(auto_reviews)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 5 –æ—Ç–∑—ã–≤–æ–≤
        batch_size = 5
        for i in range(0, len(auto_reviews), batch_size):
            batch = auto_reviews[i : i + batch_size]
            batch_num = i // batch_size + 1
            total_batches = (total_count + batch_size - 1) // batch_size

            await message.answer(
                f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–∫–µ—Ç {batch_num}/{total_batches} ({len(batch)} –æ—Ç–∑—ã–≤–æ–≤)"
            )

            for review in batch:
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤
                    result = await reviews_manager.process_review(review)

                    if result["auto_respond"]:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        success = await reviews_manager.send_review_response(
                            review.id, result["generated_response"]
                        )

                        if success:
                            processed_count += 1
                            logger.info(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ—Ç–∑—ã–≤ {review.id}")

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–∑—ã–≤–∞–º–∏
                    await asyncio.sleep(2)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ {review.id}: {e}")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if i + batch_size < len(auto_reviews):
                await asyncio.sleep(5)

        await message.answer(
            f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–µ–Ω–æ –Ω–∞ {processed_count} –∏–∑ {total_count} –æ—Ç–∑—ã–≤–æ–≤"
        )

    @staticmethod
    async def _process_auto_reviews(message: types.Message, auto_reviews: list[WBReview]):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ 4-5 –∑–≤–µ–∑–¥"""
        processed_count = 0

        for review in auto_reviews:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤
                result = await reviews_manager.process_review(review)

                if result["auto_respond"]:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    success = await reviews_manager.send_review_response(
                        review.id, result["generated_response"]
                    )

                    if success:
                        processed_count += 1
                        logger.info(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ—Ç–∑—ã–≤ {review.id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ {review.id}: {e}")

        if processed_count > 0:
            await message.answer(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–µ–Ω–æ –Ω–∞ {processed_count} –æ—Ç–∑—ã–≤–æ–≤")

    @staticmethod
    async def _show_manual_reviews(message: types.Message, manual_reviews: list[WBReview]):
        """–ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        for review in manual_reviews:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                result = await reviews_manager.process_review(review)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º
                review_text = ReviewsBotHandlers._format_review_message(
                    review, result["generated_response"]
                )

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = ReviewsBotHandlers._create_review_keyboard(review.id)

                await message.answer(review_text, reply_markup=keyboard, parse_mode="HTML")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–∞ {review.id}: {e}")

    @staticmethod
    def _format_review_message(review: WBReview, suggested_response: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º"""
        stars = "‚≠ê" * review.rating + "‚òÜ" * (5 - review.rating)

        media_info = ""
        if review.has_photos:
            media_info += "üì∏ "
        if review.has_videos:
            media_info += "üé• "

        message = f"""<b>üîç –û—Ç–∑—ã–≤ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</b>

<b>üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {review.customer_name}
<b>üõçÔ∏è –¢–æ–≤–∞—Ä:</b> {review.product_name}
<b>‚≠ê –û—Ü–µ–Ω–∫–∞:</b> {stars} ({review.rating}/5)
<b>üìÖ –î–∞—Ç–∞:</b> {review.created_at[:10] if review.created_at else '–Ω/–¥'}
{media_info}

<b>üí¨ –û—Ç–∑—ã–≤:</b>
<i>"{review.text}"</i>

<b>ü§ñ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:</b>
<i>"{suggested_response}"</i>"""

        return message

    @staticmethod
    def _create_review_keyboard(review_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–∑—ã–≤–∞"""
        keyboard = InlineKeyboardMarkup(row_width=2)

        keyboard.add(
            InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"review_approve:{review_id}"),
            InlineKeyboardButton("‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"review_edit:{review_id}"),
        )

        keyboard.add(
            InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"review_skip:{review_id}")
        )

        return keyboard

    @staticmethod
    async def handle_review_approve(callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤"""
        try:
            review_id = callback_query.data.split(":")[1]

            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
            message_text = callback_query.message.text or callback_query.message.caption

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            suggested_response = ReviewsBotHandlers._extract_suggested_response(message_text)

            if suggested_response:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                success = await reviews_manager.send_review_response(review_id, suggested_response)

                if success:
                    await callback_query.message.edit_text(
                        f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n{message_text}\n\n<b>üì§ –û–¢–ü–†–ê–í–õ–ï–ù–û:</b> {suggested_response}",
                        parse_mode="HTML",
                    )
                    await callback_query.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                else:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞", show_alert=True)
            else:
                await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞", show_alert=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)

    @staticmethod
    async def handle_review_edit(callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            review_id = callback_query.data.split(":")[1]

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"review_cancel_edit:{review_id}"
                )
            )

            await callback_query.message.edit_reply_markup(reply_markup=keyboard)

            await callback_query.message.reply(
                "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤:",
                reply_markup=types.ForceReply(selective=True),
            )

            await callback_query.answer("‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    @staticmethod
    async def handle_review_skip(callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–∑—ã–≤–∞"""
        try:
            review_id = callback_query.data.split(":")[1]

            await callback_query.message.edit_text(
                f"‚è≠Ô∏è –û—Ç–∑—ã–≤ –ø—Ä–æ–ø—É—â–µ–Ω\n\n{callback_query.message.text}", parse_mode="HTML"
            )

            await callback_query.answer("‚è≠Ô∏è –û—Ç–∑—ã–≤ –ø—Ä–æ–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–∑—ã–≤–∞: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

    @staticmethod
    def _extract_suggested_response(message_text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É "ü§ñ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:" –∏ –∫–æ–Ω—Ü–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            start_marker = "ü§ñ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:"
            start_idx = message_text.find(start_marker)

            if start_idx == -1:
                return ""

            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ (–ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞ –∏ —Ç–µ–≥–æ–≤)
            response_start = message_text.find('"', start_idx) + 1
            response_end = message_text.rfind('"')

            if response_start > 0 and response_end > response_start:
                return message_text[response_start:response_end]

            return ""

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return ""

    @staticmethod
    async def handle_edit_response_message(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º
            if not message.reply_to_message:
                return

            reply_text = message.reply_to_message.text
            if "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç" not in reply_text:
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º review_id –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            edited_response = message.text

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            await message.answer(
                f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç:\n\n<i>'{edited_response}'</i>", parse_mode="HTML"
            )

            # TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API
            # await reviews_manager.send_review_response(review_id, edited_response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def setup_reviews_handlers(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    # –ö–æ–º–∞–Ω–¥–∞ /reviews
    dp.register_message_handler(ReviewsBotHandlers.handle_reviews_command, commands=["reviews"])

    # –ö–æ–º–∞–Ω–¥–∞ /all_reviews - –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    dp.register_message_handler(
        ReviewsBotHandlers.handle_all_unanswered_reviews_command, commands=["all_reviews"]
    )

    # Callback handlers –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    dp.register_callback_query_handler(
        ReviewsBotHandlers.handle_review_approve, lambda c: c.data.startswith("review_approve:")
    )

    dp.register_callback_query_handler(
        ReviewsBotHandlers.handle_review_edit, lambda c: c.data.startswith("review_edit:")
    )

    dp.register_callback_query_handler(
        ReviewsBotHandlers.handle_review_skip, lambda c: c.data.startswith("review_skip:")
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    dp.register_message_handler(
        ReviewsBotHandlers.handle_edit_response_message, content_types=["text"], state="*"
    )

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
