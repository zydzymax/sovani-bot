#!/usr/bin/env python3
"""–ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ì–û–î–û–í–´–• –î–ê–ù–ù–´–•
–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ API
"""

import asyncio
import logging

import api_clients_main as api_clients
from api_chunking import ChunkedAPIManager

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def quick_api_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ü–û API")
    logger.info("=" * 60)

    chunked_api = ChunkedAPIManager(api_clients)

    # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    test_periods = [
        ("2024-01-01", "2024-01-31", "2024 —è–Ω–≤–∞—Ä—å"),
        ("2025-01-01", "2025-01-31", "2025 —è–Ω–≤–∞—Ä—å"),
        ("2025-04-01", "2025-04-30", "2025 –∞–ø—Ä–µ–ª—å (–∏–∑–≤–µ—Å—Ç–µ–Ω)"),
    ]

    logger.info("üü£ WB API - –ö–†–ê–¢–ö–ò–ô –¢–ï–°–¢:")

    for date_from, date_to, description in test_periods:
        logger.info(f"\nüìÖ {description}: {date_from} ‚Üí {date_to}")

        try:
            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Sales API
            sales_data = await chunked_api.get_wb_sales_chunked(date_from, date_to)
            sales_count = len(sales_data) if sales_data else 0

            if sales_count > 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö
                sample_dates = []
                sample_sum = 0
                for record in sales_data[:5]:
                    raw_date = record.get("date", "")
                    parsed_date = raw_date.split("T")[0] if "T" in raw_date else raw_date[:10]
                    sample_dates.append(parsed_date)
                    sample_sum += record.get("forPay", 0) or 0

                date_range = f"{min(sample_dates)} ‚Üí {max(sample_dates)}" if sample_dates else "N/A"

                logger.info(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ: {sales_count} –∑–∞–ø–∏—Å–µ–π")
                logger.info(f"   üìä –î–∏–∞–ø–∞–∑–æ–Ω: {date_range}")
                logger.info(f"   üí∞ –°—É–º–º–∞ (5 –∑–∞–ø–∏—Å–µ–π): {sample_sum:,.0f} ‚ÇΩ")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
                if sample_dates:
                    in_range = sum(1 for d in sample_dates if date_from <= d <= date_to)
                    logger.info(f"   üéØ –í –ø–µ—Ä–∏–æ–¥–µ: {in_range}/{len(sample_dates)}")
            else:
                logger.info("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        await asyncio.sleep(3)

    logger.info("\nüü¶ OZON API - –ö–†–ê–¢–ö–ò–ô –¢–ï–°–¢:")

    for date_from, date_to, description in test_periods:
        logger.info(f"\nüìÖ {description}: {date_from} ‚Üí {date_to}")

        try:
            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç FBS API
            fbs_data = await chunked_api.get_ozon_fbs_chunked(date_from, date_to)
            fbs_count = len(fbs_data) if fbs_data else 0

            if fbs_count > 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
                operations = {}
                revenue_sum = 0
                for record in fbs_data[:10]:
                    op_type = record.get("operation_type", "unknown")
                    operations[op_type] = operations.get(op_type, 0) + 1
                    if op_type == "OperationAgentDeliveredToCustomer":
                        revenue_sum += record.get("accruals_for_sale", 0) or 0

                logger.info(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ: {fbs_count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                logger.info(f"   üìä –û–ø–µ—Ä–∞—Ü–∏–π: {len(operations)} —Ç–∏–ø–æ–≤")
                logger.info(f"   üí∞ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (10 –∑–∞–ø–∏—Å–µ–π): {revenue_sum:,.0f} ‚ÇΩ")
            else:
                logger.info("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        await asyncio.sleep(2)

    # –í—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    logger.info("\n" + "=" * 60)
    logger.info("üìã –í–´–í–û–î–´ –ù–ê –û–°–ù–û–í–ï –ü–û–õ–£–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•:")
    logger.info("")

    logger.info("üü£ WB API:")
    logger.info("   ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ª—é–±—ã—Ö –¥–∞—Ç")
    logger.info("   ‚ö†Ô∏è  –ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∑–∞ –∞–ø—Ä–µ–ª—å-—Å–µ–Ω—Ç—è–±—Ä—å 2025")
    logger.info("   üìä –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ 2024 –∏–ª–∏ —è–Ω–≤–∞—Ä—å 2025 ‚Üí –ø–æ–ª—É—á–∞–µ–º –∞–ø—Ä–µ–ª—å-—Å–µ–Ω—Ç—è–±—Ä—å 2025")
    logger.info("   üí° –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: ~425,436‚ÇΩ (forPay) –∑–∞ –∞–ø—Ä–µ–ª—å-—Å–µ–Ω—Ç—è–±—Ä—å")
    logger.info("")

    logger.info("üü¶ OZON API:")
    logger.info("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º")
    logger.info("   üö´ 400 –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    logger.info("   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–æ–≤")
    logger.info("")

    logger.info("üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    logger.info("")
    logger.info("   üìÖ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –†–ï–ê–õ–¨–ù–´–ô –ü–ï–†–ò–û–î:")
    logger.info("      WB: 2025-04-03 ‚Üí 2025-09-26 (~176 –¥–Ω–µ–π)")
    logger.info("      Ozon: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–ø—Ä–æ–±–ª–µ–º—ã API)")
    logger.info("")
    logger.info("   üí∞ –§–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –¶–ò–§–†–´ –ó–ê –î–û–°–¢–£–ü–ù–´–ô –ü–ï–†–ò–û–î:")
    logger.info("      WB –≤—ã—Ä—É—á–∫–∞ (forPay): ~425,436 ‚ÇΩ")
    logger.info("      WB –∑–∞–∫–∞–∑—ã (priceWithDisc): ~723,738 ‚ÇΩ")
    logger.info("      WB –ø—Ä–æ–¥–∞–∂: 360 –∑–∞–ø–∏—Å–µ–π")
    logger.info("      WB –∑–∞–∫–∞–∑–æ–≤: 607 –∑–∞–ø–∏—Å–µ–π")
    logger.info("")
    logger.info("   üìä –ü–†–û–ï–ö–¶–ò–Ø –ù–ê –ì–û–î (–µ—Å–ª–∏ —ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å):")
    # 176 –¥–Ω–µ–π = 425,436‚ÇΩ ‚Üí 365 –¥–Ω–µ–π = ?
    days_available = 176
    wb_revenue = 425436
    wb_orders = 723738

    year_revenue = (wb_revenue / days_available) * 365
    year_orders = (wb_orders / days_available) * 365

    logger.info(f"      WB –≥–æ–¥ –≤—ã—Ä—É—á–∫–∞: ~{year_revenue:,.0f} ‚ÇΩ")
    logger.info(f"      WB –≥–æ–¥ –∑–∞–∫–∞–∑—ã: ~{year_orders:,.0f} ‚ÇΩ")
    logger.info(f"      (–Ω–∞ –æ—Å–Ω–æ–≤–µ {days_available} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö)")
    logger.info("")

    logger.info("‚úÖ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    logger.info("   üîß –ì–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –í–û–ó–ú–û–ñ–ï–ù –¥–ª—è WB")
    logger.info("   ‚ö†Ô∏è  –ù–æ –¥–∞–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –∞–ø—Ä–µ–ª—å-—Å–µ–Ω—Ç—è–±—Ä—å 2025")
    logger.info("   üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –≥–æ–¥–∞ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    logger.info("   üõ†Ô∏è  Ozon —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤ –∫ API")


if __name__ == "__main__":
    asyncio.run(quick_api_test())
