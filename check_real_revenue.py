#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ WB –∏ Ozon –∑–∞ –ø–µ—Ä–∏–æ–¥ 2025-08-16 ‚Üí 2025-09-15

–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- WB: ~72,105 ‚ÇΩ
- Ozon: ~439,318 ‚ÇΩ

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python check_real_revenue.py
"""

import asyncio
import logging
import sys
import os
from datetime import date, datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(__file__))

from api_clients.wb.stats_client import WBStatsClient
from api_clients.ozon.sales_client import OzonSalesClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('revenue_check.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


async def check_wb_real_data(date_from: date, date_to: date) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ WB API –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    Args:
        date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ WB
    """
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É WB API...")

    try:
        client = WBStatsClient()
        sales = await client.sales(date_from, date_to)

        total_revenue = 0
        total_sales_count = 0
        unique_products = set()
        sales_by_date = {}

        for sale in sales:
            # WB API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç forPay –∫–∞–∫ –∏—Ç–æ–≥–æ–≤—É—é –≤—ã—Ä—É—á–∫—É –∫ –¥–æ–ø–ª–∞—Ç–µ
            for_pay = float(sale.get('forPay', 0))
            total_revenue += for_pay
            total_sales_count += 1

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            nm_id = sale.get('nmId')
            if nm_id:
                unique_products.add(nm_id)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
            sale_date = sale.get('date', '')[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
            if sale_date:
                if sale_date not in sales_by_date:
                    sales_by_date[sale_date] = {'count': 0, 'revenue': 0}
                sales_by_date[sale_date]['count'] += 1
                sales_by_date[sale_date]['revenue'] += for_pay

            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if total_sales_count <= 5:
                logger.info(f"  –ü—Ä–æ–¥–∞–∂–∞ #{total_sales_count}: {sale.get('supplierArticle', 'N/A')} "
                           f"–Ω–∞ {for_pay:.2f} ‚ÇΩ ({sale.get('date', 'N/A')})")

        result = {
            'platform': 'Wildberries',
            'period_from': date_from.strftime('%Y-%m-%d'),
            'period_to': date_to.strftime('%Y-%m-%d'),
            'total_revenue': total_revenue,
            'total_sales_count': total_sales_count,
            'unique_products': len(unique_products),
            'sales_by_date': sales_by_date,
            'raw_data': sales[:10] if len(sales) > 10 else sales,  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            'success': True
        }

        logger.info(f"‚úÖ WB —Ä–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.2f} ‚ÇΩ")
        logger.info(f"üìä WB –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {total_sales_count}")
        logger.info(f"üéØ WB —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(unique_products)}")

        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ WB API: {e}")
        return {
            'platform': 'Wildberries',
            'period_from': date_from.strftime('%Y-%m-%d'),
            'period_to': date_to.strftime('%Y-%m-%d'),
            'total_revenue': 0,
            'error': str(e),
            'success': False
        }


async def check_ozon_real_data(date_from: date, date_to: date) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Ozon API –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    Args:
        date_from: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        date_to: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ozon
    """
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Ozon API...")

    try:
        client = OzonSalesClient()
        revenue_data = await client.get_revenue(date_from, date_to)

        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –æ—Ü–µ–Ω–∫—É –≤—ã—Ä—É—á–∫–∏
        total_revenue = revenue_data.get('best_estimate', 0)

        result = {
            'platform': 'Ozon',
            'period_from': date_from.strftime('%Y-%m-%d'),
            'period_to': date_to.strftime('%Y-%m-%d'),
            'total_revenue': total_revenue,
            'revenue_by_method': revenue_data,
            'success': True
        }

        logger.info(f"‚úÖ Ozon —Ä–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,.2f} ‚ÇΩ")
        logger.info("üìä Ozon –≤—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º:")
        for method, amount in revenue_data.items():
            if method != 'best_estimate':
                logger.info(f"   {method}: {amount:,.2f} ‚ÇΩ")

        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ozon API: {e}")
        return {
            'platform': 'Ozon',
            'period_from': date_from.strftime('%Y-%m-%d'),
            'period_to': date_to.strftime('%Y-%m-%d'),
            'total_revenue': 0,
            'error': str(e),
            'success': False
        }


def print_summary(wb_result: Dict[str, Any], ozon_result: Dict[str, Any], expected_wb: float, expected_ozon: float):
    """–í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –ü–†–û–í–ï–†–ö–ò –í–´–†–£–ß–ö–ò")
    print("="*60)

    period = f"{wb_result.get('period_from', 'N/A')} ‚Üí {wb_result.get('period_to', 'N/A')}"
    print(f"üóì  –ü–µ—Ä–∏–æ–¥: {period}")
    print()

    # WB —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üü¢ WILDBERRIES:")
    if wb_result.get('success'):
        wb_revenue = wb_result.get('total_revenue', 0)
        wb_diff = wb_revenue - expected_wb
        wb_diff_pct = (wb_diff / expected_wb * 100) if expected_wb > 0 else 0

        print(f"   –†–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {wb_revenue:,.2f} ‚ÇΩ")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {expected_wb:,.2f} ‚ÇΩ")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞: {wb_diff:+,.2f} ‚ÇΩ ({wb_diff_pct:+.2f}%)")
        print(f"   –ü—Ä–æ–¥–∞–∂: {wb_result.get('total_sales_count', 0)}")
        print(f"   –¢–æ–≤–∞—Ä–æ–≤: {wb_result.get('unique_products', 0)}")

        if abs(wb_diff_pct) <= 5:
            print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
        elif abs(wb_diff_pct) <= 15:
            print("   ‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç –±–ª–∏–∑–æ–∫ –∫ –æ–∂–∏–¥–∞–Ω–∏—è–º")
        else:
            print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {wb_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    print()

    # Ozon —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üü† OZON:")
    if ozon_result.get('success'):
        ozon_revenue = ozon_result.get('total_revenue', 0)
        ozon_diff = ozon_revenue - expected_ozon
        ozon_diff_pct = (ozon_diff / expected_ozon * 100) if expected_ozon > 0 else 0

        print(f"   –†–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {ozon_revenue:,.2f} ‚ÇΩ")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {expected_ozon:,.2f} ‚ÇΩ")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞: {ozon_diff:+,.2f} ‚ÇΩ ({ozon_diff_pct:+.2f}%)")

        if abs(ozon_diff_pct) <= 5:
            print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
        elif abs(ozon_diff_pct) <= 15:
            print("   ‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç –±–ª–∏–∑–æ–∫ –∫ –æ–∂–∏–¥–∞–Ω–∏—è–º")
        else:
            print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {ozon_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    print()

    # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_real = 0
    total_expected = expected_wb + expected_ozon

    if wb_result.get('success'):
        total_real += wb_result.get('total_revenue', 0)
    if ozon_result.get('success'):
        total_real += ozon_result.get('total_revenue', 0)

    if total_real > 0:
        print("üìà –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
        print(f"   –û–±—â–∞—è —Ä–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {total_real:,.2f} ‚ÇΩ")
        print(f"   –û–±—â–∞—è –æ–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: {total_expected:,.2f} ‚ÇΩ")
        total_diff = total_real - total_expected
        total_diff_pct = (total_diff / total_expected * 100) if total_expected > 0 else 0
        print(f"   –û–±—â–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: {total_diff:+,.2f} ‚ÇΩ ({total_diff_pct:+.2f}%)")

    print("="*60)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ WB –∏ Ozon API")
    print("=" * 60)

    # –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    date_from = date(2025, 8, 16)
    date_to = date(2025, 9, 15)

    # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    expected_wb = 72105.0
    expected_ozon = 439318.0

    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏: {date_from} ‚Üí {date_to}")
    print(f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞ WB: {expected_wb:,.2f} ‚ÇΩ")
    print(f"üéØ –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞ Ozon: {expected_ozon:,.2f} ‚ÇΩ")
    print()

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    wb_task = check_wb_real_data(date_from, date_to)
    ozon_task = check_ozon_real_data(date_from, date_to)

    wb_result, ozon_result = await asyncio.gather(wb_task, ozon_task, return_exceptions=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    if isinstance(wb_result, Exception):
        logger.error(f"WB –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {wb_result}")
        wb_result = {
            'platform': 'Wildberries',
            'total_revenue': 0,
            'error': str(wb_result),
            'success': False
        }

    if isinstance(ozon_result, Exception):
        logger.error(f"Ozon –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {ozon_result}")
        ozon_result = {
            'platform': 'Ozon',
            'total_revenue': 0,
            'error': str(ozon_result),
            'success': False
        }

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    print_summary(wb_result, ozon_result, expected_wb, expected_ozon)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    import json
    results = {
        'timestamp': datetime.now().isoformat(),
        'period': {
            'from': date_from.strftime('%Y-%m-%d'),
            'to': date_to.strftime('%Y-%m-%d')
        },
        'expected': {
            'wb': expected_wb,
            'ozon': expected_ozon
        },
        'results': {
            'wb': wb_result,
            'ozon': ozon_result
        }
    }

    os.makedirs('reports', exist_ok=True)
    results_file = f"reports/revenue_check_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

    print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")

    return wb_result, ozon_result


if __name__ == "__main__":
    try:
        wb_result, ozon_result = asyncio.run(main())

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if wb_result.get('success', False) or ozon_result.get('success', False):
            sys.exit(0)  # –£—Å–ø–µ—Ö —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        else:
            sys.exit(1)  # –û–±–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)