"""–≠—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: —Å–Ω–∞—á–∞–ª–∞ WB, –ø–æ—Ç–æ–º Ozon, –ø–æ—Ç–æ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—è
–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import asyncio
import logging
from datetime import datetime
from enum import Enum
from typing import Any

from aiogram import types

from api_chunking import APIChunker
from chunk_cache import CachedAPIProcessor, ChunkCache
from optimized_api_client import OptimizedAPIClient
from progress_tracker import JobStatus, ProgressTracker

logger = logging.getLogger(__name__)


class ProcessingStage(Enum):
    INITIALIZATION = "initialization"
    WB_PROCESSING = "wb_processing"
    OZON_PROCESSING = "ozon_processing"
    AGGREGATION = "aggregation"
    COMPLETED = "completed"
    FAILED = "failed"


class StagedDataProcessor:
    """–≠—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º"""

    def __init__(self):
        self.cache = ChunkCache()
        self.progress = ProgressTracker()
        self.optimized_client = OptimizedAPIClient()
        self.cached_processor = CachedAPIProcessor()

    async def process_year_staged(
        self, date_from: str, date_to: str, progress_message: types.Message, job_id: str = None
    ) -> dict[str, Any]:
        """–≠—Ç–∞–ø–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

        –≠—Ç–∞–ø—ã:
        1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        2. –û–±—Ä–∞–±–æ—Ç–∫–∞ WB –¥–∞–Ω–Ω—ã—Ö (Orders + Sales + Advertising)
        3. –û–±—Ä–∞–±–æ—Ç–∫–∞ Ozon –¥–∞–Ω–Ω—ã—Ö (FBO + FBS)
        4. –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç—ã
        """
        if not job_id:
            job_id = f"staged_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ {job_id}: {date_from} - {date_to}")

            # –≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            result = await self._stage_1_initialization(
                job_id, date_from, date_to, progress_message
            )

            # –≠–¢–ê–ü 2: WB –æ–±—Ä–∞–±–æ—Ç–∫–∞
            wb_data = await self._stage_2_wb_processing(job_id, result["chunks"], progress_message)

            # –≠–¢–ê–ü 3: Ozon –æ–±—Ä–∞–±–æ—Ç–∫–∞
            ozon_data = await self._stage_3_ozon_processing(
                job_id, result["chunks"], progress_message
            )

            # –≠–¢–ê–ü 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
            final_result = await self._stage_4_aggregation(
                job_id, wb_data, ozon_data, date_from, date_to, progress_message
            )

            logger.info(f"‚úÖ –≠—Ç–∞–ø–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return final_result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ {job_id}: {e}")
            await self._update_progress(progress_message, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)[:100]}")
            raise

    async def _stage_1_initialization(
        self, job_id: str, date_from: str, date_to: str, progress_message: types.Message
    ) -> dict[str, Any]:
        """–≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        logger.info(f"üìã –≠–¢–ê–ü 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ {job_id}")

        await self._update_progress(
            progress_message,
            f"üöÄ **–≠–¢–ê–ü 1/4: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø**\\n\\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} ‚Üí {date_to}\\n"
            f"üîß –ü–ª–∞–Ω–∏—Ä—É—é —Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ —á–∞–Ω–∫–∏...\\n"
            f"‚è±Ô∏è –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%H:%M')}",
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        start_date = datetime.strptime(date_from, "%Y-%m-%d")
        end_date = datetime.strptime(date_to, "%Y-%m-%d")
        period_days = (end_date - start_date).days

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        wb_chunks = APIChunker.chunk_date_range(date_from, date_to, "wb_sales")
        ozon_chunks = APIChunker.chunk_date_range(date_from, date_to, "ozon_fbo")

        total_chunks = len(wb_chunks) + len(ozon_chunks)

        await self._update_progress(
            progress_message,
            f"üìä **–ü–õ–ê–ù –û–ë–†–ê–ë–û–¢–ö–ò –°–û–°–¢–ê–í–õ–ï–ù:**\\n\\n"
            f"üìà –ü–µ—Ä–∏–æ–¥: **{period_days} –¥–Ω–µ–π**\\n"
            f"üü£ WB —á–∞–Ω–∫–æ–≤: **{len(wb_chunks)}** (–ø–æ ~31 –¥–µ–Ω—å)\\n"
            f"üîµ Ozon —á–∞–Ω–∫–æ–≤: **{len(ozon_chunks)}** (–ø–æ ~30 –¥–Ω–µ–π)\\n"
            f"üì¶ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: **{total_chunks}**\\n\\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{total_chunks * 2} –º–∏–Ω—É—Ç\\n"
            f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ WB...",
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress.initialize_job(job_id, date_from, date_to, progress_message.chat.id)

        return {
            "job_id": job_id,
            "period_days": period_days,
            "chunks": {"wb": wb_chunks, "ozon": ozon_chunks},
            "total_chunks": total_chunks,
        }

    async def _stage_2_wb_processing(
        self, job_id: str, chunks: dict[str, list], progress_message: types.Message
    ) -> dict[str, Any]:
        """–≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ WB –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üü£ –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ WB –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {job_id}")
        wb_chunks = chunks["wb"]

        await self._update_progress(
            progress_message,
            f"üü£ **–≠–¢–ê–ü 2/4: WILDBERRIES**\\n\\n"
            f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é **{len(wb_chunks)} –ø–µ—Ä–∏–æ–¥–æ–≤**\\n"
            f"üìã –ü–æ–ª—É—á–∞—é: –∑–∞–∫–∞–∑—ã + –ø—Ä–æ–¥–∞–∂–∏ + —Ä–µ–∫–ª–∞–º–∞\\n"
            f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ\\n\\n"
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
        )

        wb_results = {
            "orders": [],
            "sales": [],
            "advertising": {"total_spend": 0, "total_views": 0, "total_clicks": 0, "campaigns": []},
        }

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WB —á–∞–Ω–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        for i, (chunk_from, chunk_to) in enumerate(wb_chunks, 1):
            try:
                progress_percent = int((i - 1) / len(wb_chunks) * 100)
                await self._update_progress(
                    progress_message,
                    f"üü£ **WB –û–ë–†–ê–ë–û–¢–ö–ê: {i}/{len(wb_chunks)}**\\n\\n"
                    f"üìÖ –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {chunk_from} ‚Üí {chunk_to}\\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å WB: **{progress_percent}%**\\n\\n"
                    f"‚è≥ –ü–æ–ª—É—á–∞—é –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–æ–¥–∞–∂–∏...",
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞
                cache_key_wb = f"wb_full_{chunk_from}_{chunk_to}"
                cached_wb = self.cache.get_chunk_data(cache_key_wb)

                if cached_wb and "data" in cached_wb:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à –¥–ª—è WB {chunk_from}-{chunk_to}")
                    wb_data = cached_wb["data"]
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
                    wb_data = await self.cached_processor.get_wb_data_cached(chunk_from, chunk_to)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                    self.cache.save_chunk_data(cache_key_wb, wb_data, 24)

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if wb_data:
                    orders_stats = wb_data.get("orders_stats", {})
                    sales_stats = wb_data.get("sales_stats", {})

                    if "orders" in wb_data:
                        wb_results["orders"].extend(wb_data["orders"])
                    if "sales" in wb_data:
                        wb_results["sales"].extend(wb_data["sales"])

                    logger.info(
                        f"WB —á–∞–Ω–∫ {i}: {orders_stats.get('count', 0)} –∑–∞–∫–∞–∑–æ–≤, {sales_stats.get('count', 0)} –ø—Ä–æ–¥–∞–∂"
                    )

                # –†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)
                try:
                    adv_data = await self.optimized_client.get_wb_advertising_batch(
                        [(chunk_from, chunk_to)]
                    )
                    if adv_data:
                        wb_results["advertising"]["total_spend"] += adv_data.get("total_spend", 0)
                        wb_results["advertising"]["total_views"] += adv_data.get("total_views", 0)
                        wb_results["advertising"]["total_clicks"] += adv_data.get("total_clicks", 0)
                        wb_results["advertising"]["campaigns"].extend(adv_data.get("campaigns", []))
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã WB –¥–ª—è {chunk_from}-{chunk_to}: {e}")

                # –ö–†–ò–¢–ò–ß–ù–û: –£–º–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
                if i < len(wb_chunks):
                    # –£–º–µ–Ω—å—à–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ —Å 15 –¥–æ 5 —Å–µ–∫—É–Ω–¥ + rate limiter —É–∂–µ –∑–∞—â–∏—â–∞–µ—Ç
                    await asyncio.sleep(5.0)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WB —á–∞–Ω–∫–∞ {i} ({chunk_from}-{chunk_to}): {e}")
                continue

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WB
        total_orders = len(wb_results["orders"])
        total_sales = len(wb_results["sales"])
        total_adv_spend = wb_results["advertising"]["total_spend"]

        await self._update_progress(
            progress_message,
            f"‚úÖ **WB –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\\n\\n"
            f"üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: **{total_orders:,}**\\n"
            f"‚úÖ –ü—Ä–æ–¥–∞–∂ –ø–æ–ª—É—á–µ–Ω–æ: **{total_sales:,}**\\n"
            f"üí∞ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É: **{total_adv_spend:,.0f} ‚ÇΩ**\\n\\n"
            f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ Ozon...",
        )

        logger.info(f"‚úÖ WB –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_orders} –∑–∞–∫–∞–∑–æ–≤, {total_sales} –ø—Ä–æ–¥–∞–∂")
        return wb_results

    async def _stage_3_ozon_processing(
        self, job_id: str, chunks: dict[str, list], progress_message: types.Message
    ) -> dict[str, Any]:
        """–≠–¢–ê–ü 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ Ozon –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üîµ –≠–¢–ê–ü 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ Ozon –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {job_id}")
        ozon_chunks = chunks["ozon"]

        await self._update_progress(
            progress_message,
            f"üîµ **–≠–¢–ê–ü 3/4: OZON**\\n\\n"
            f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é **{len(ozon_chunks)} –ø–µ—Ä–∏–æ–¥–æ–≤**\\n"
            f"üì¶ –ü–æ–ª—É—á–∞—é: FBO –∑–∞–∫–∞–∑—ã + FBS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\\n"
            f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ\\n\\n"
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
        )

        ozon_results = {"fbo_orders": [], "fbs_transactions": []}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Ozon —á–∞–Ω–∫–∏
        for i, (chunk_from, chunk_to) in enumerate(ozon_chunks, 1):
            try:
                progress_percent = int((i - 1) / len(ozon_chunks) * 100)
                await self._update_progress(
                    progress_message,
                    f"üîµ **OZON –û–ë–†–ê–ë–û–¢–ö–ê: {i}/{len(ozon_chunks)}**\\n\\n"
                    f"üìÖ –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {chunk_from} ‚Üí {chunk_to}\\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å Ozon: **{progress_percent}%**\\n\\n"
                    f"‚è≥ –ü–æ–ª—É—á–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...",
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
                cache_key_ozon = f"ozon_full_{chunk_from}_{chunk_to}"
                cached_ozon = self.cache.get_chunk_data(cache_key_ozon)

                if cached_ozon and "data" in cached_ozon:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à –¥–ª—è Ozon {chunk_from}-{chunk_to}")
                    ozon_data = cached_ozon["data"]
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
                    ozon_data = await self.cached_processor.get_ozon_data_cached(
                        chunk_from, chunk_to
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                    self.cache.save_chunk_data(cache_key_ozon, ozon_data, 24)

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if ozon_data:
                    fbo_count = ozon_data.get("fbo_count", 0)
                    fbs_count = ozon_data.get("fbs_count", 0) or len(
                        ozon_data.get("transactions", [])
                    )

                    if "fbo_orders" in ozon_data:
                        ozon_results["fbo_orders"].extend(ozon_data["fbo_orders"])
                    if "transactions" in ozon_data:
                        ozon_results["fbs_transactions"].extend(ozon_data["transactions"])

                    logger.info(f"Ozon —á–∞–Ω–∫ {i}: {fbo_count} FBO, {fbs_count} FBS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

                # –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Ozon (rate limiter —É–∂–µ –∑–∞—â–∏—â–∞–µ—Ç)
                if i < len(ozon_chunks):
                    await asyncio.sleep(2.0)  # –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5 –¥–æ 2 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ozon —á–∞–Ω–∫–∞ {i} ({chunk_from}-{chunk_to}): {e}")
                continue

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Ozon
        total_fbo = len(ozon_results["fbo_orders"])
        total_fbs = len(ozon_results["fbs_transactions"])

        await self._update_progress(
            progress_message,
            f"‚úÖ **OZON –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\\n\\n"
            f"üì¶ FBO –∑–∞–∫–∞–∑–æ–≤: **{total_fbo:,}**\\n"
            f"üìä FBS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: **{total_fbs:,}**\\n\\n"
            f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–∞–º...",
        )

        logger.info(f"‚úÖ Ozon –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_fbo} FBO, {total_fbs} FBS")
        return ozon_results

    async def _stage_4_aggregation(
        self,
        job_id: str,
        wb_data: dict[str, Any],
        ozon_data: dict[str, Any],
        date_from: str,
        date_to: str,
        progress_message: types.Message,
    ) -> dict[str, Any]:
        """–≠–¢–ê–ü 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è"""
        logger.info(f"üî¢ –≠–¢–ê–ü 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è {job_id}")

        await self._update_progress(
            progress_message,
            "üî¢ **–≠–¢–ê–ü 4/4: –§–ò–ù–ê–õ–¨–ù–´–ï –†–ê–°–ß–ï–¢–´**\\n\\n"
            "üîç –í–∞–ª–∏–¥–∏—Ä—É—é –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö\\n"
            "‚ö° –ê–≥—Ä–µ–≥–∏—Ä—É—é –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\\n"
            "üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø—Ä–∏–±—ã–ª—å\\n"
            "üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\\n\\n"
            "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Ä–∞—Å—á–µ—Ç—ã...",
        )

        # üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
        logger.info("üîç –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π")
        try:
            from data_validator import validate_data_before_aggregation

            validation_data = {"wb_data": wb_data, "ozon_data": ozon_data}

            validation_result = validate_data_before_aggregation(validation_data)

            if not validation_result.get("is_valid", False):
                logger.warning(
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result.get('errors_count', 0)} –æ—à–∏–±–æ–∫"
                )
                for error in validation_result.get("errors", []):
                    logger.warning(f"   ‚Ä¢ {error}")
            else:
                logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")

        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º WB –¥–∞–Ω–Ω—ã–µ
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: wb_data —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç _stage_2_wb_processing
        wb_orders_count = len(wb_data.get("orders", []))
        wb_sales_count = len(wb_data.get("sales", []))

        # –ö–†–ò–¢–ò–ß–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º WB –≤—ã—Ä—É—á–∫—É –¢–û–õ–¨–ö–û –ò–ó –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–• –ü–†–û–î–ê–ñ (–∏—Å–∫–ª—é—á–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã)
        wb_sales = wb_data.get("sales", [])

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã)
        wb_realized_sales = [sale for sale in wb_sales if sale.get("isRealization", False)]

        wb_revenue = sum(sale.get("forPay", 0) for sale in wb_realized_sales)
        wb_gross_revenue = sum(sale.get("priceWithDisc", 0) for sale in wb_realized_sales)

        logger.info(
            f"üí∞ WB: {len(wb_realized_sales)} —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑ {len(wb_sales)} –æ–±—â–∏—Ö –ø—Ä–æ–¥–∞–∂"
        )
        logger.info(
            f"üí∞ WB –≤—ã—Ä—É—á–∫–∞: {wb_revenue:,.2f} ‚ÇΩ (forPay), {wb_gross_revenue:,.2f} ‚ÇΩ (priceWithDisc)"
        )

        # –ö–†–ò–¢–ò–ß–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Ozon –≤—ã—Ä—É—á–∫—É –¢–û–õ–¨–ö–û –∏–∑ FBS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (FBO —É–∂–µ —É—á—Ç–µ–Ω—ã –≤ FBS)
        ozon_revenue = 0
        ozon_units = 0

        logger.info("üîç OZON: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ FBS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (FBO —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã)")

        for transaction in ozon_data.get("fbs_transactions", []):
            operation_type = transaction.get("operation_type", "")

            # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã –∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            if operation_type == "ClientReturnAgentOperation":
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã

            accruals = transaction.get("accruals_for_sale", 0) or 0
            if accruals > 0:
                ozon_revenue += accruals
                ozon_units += 1

        logger.info(f"üí∞ OZON –∏—Ç–æ–≥–æ–≤–∞—è –≤—ã—Ä—É—á–∫–∞: {ozon_revenue:,.2f} ‚ÇΩ ({ozon_units} –µ–¥–∏–Ω–∏—Ü)")
        logger.info("‚ö†Ô∏è  FBO –∑–∞–∫–∞–∑—ã –ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ (—É–∂–µ –≤ FBS —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö)")

        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        total_revenue = wb_revenue + ozon_revenue
        total_units = wb_sales_count + ozon_units

        # –†–∞—Å—Ö–æ–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
        wb_advertising_spend = wb_data.get("advertising", {}).get("total_spend", 0)
        estimated_costs = total_revenue * 0.25  # 25% –æ—Ç –≤—ã—Ä—É—á–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É/–∫–æ–º–∏—Å—Å–∏–∏
        net_profit = total_revenue - estimated_costs - wb_advertising_spend

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_result = {
            "job_id": job_id,
            "period": f"{date_from} - {date_to}",
            "processing_completed_at": datetime.now().isoformat(),
            # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            "total_revenue": total_revenue,
            "total_units": total_units,
            "net_profit": net_profit,
            # WB –¥–∞–Ω–Ω—ã–µ
            "wb_data": {
                "orders_count": wb_orders_count,
                "sales_count": wb_sales_count,
                "revenue": wb_revenue,
                "gross_revenue": wb_gross_revenue,
                "advertising_spend": wb_advertising_spend,
                "buyout_rate": (
                    (wb_sales_count / wb_orders_count * 100) if wb_orders_count > 0 else 0
                ),
            },
            # Ozon –¥–∞–Ω–Ω—ã–µ
            "ozon_data": {
                "units": ozon_units,
                "revenue": ozon_revenue,
                "fbo_orders_count": len(ozon_data.get("fbo_orders", [])),
                "fbs_transactions_count": len(ozon_data.get("fbs_transactions", [])),
            },
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            "processing_stages": [
                "Initialization completed",
                "WB processing completed",
                "Ozon processing completed",
                "Aggregation completed",
            ],
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç—Ä–µ–∫–µ—Ä
        self.progress.save_final_result(job_id, final_result)

        await self._update_progress(
            progress_message,
            f"‚úÖ **–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!**\\n\\n"
            f"üìä **–ò–¢–û–ì–ò:**\\n"
            f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: **{total_revenue:,.0f} ‚ÇΩ**\\n"
            f"üì¶ –í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü: **{total_units:,}**\\n"
            f"üéØ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: **{net_profit:,.0f} ‚ÇΩ**\\n\\n"
            f"üü£ **WB:** {wb_sales_count:,} –ø—Ä–æ–¥–∞–∂, {wb_revenue:,.0f} ‚ÇΩ\\n"
            f"üîµ **Ozon:** {ozon_units:,} –æ–ø–µ—Ä–∞—Ü–∏–π, {ozon_revenue:,.0f} ‚ÇΩ\\n\\n"
            f"‚è±Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M')}",
        )

        logger.info(f"‚úÖ –≠—Ç–∞–ø–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {job_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –≤—ã—Ä—É—á–∫–∞ {total_revenue:,.0f} ‚ÇΩ")
        return final_result

    async def _update_progress(self, message: types.Message, text: str):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ Telegram"""
        try:
            await message.edit_text(text, parse_mode="Markdown")
            await asyncio.sleep(0.1)  # –ö–†–ò–¢–ò–ß–ù–û: –£–º–µ–Ω—å—à–µ–Ω–æ —Å 0.5 –¥–æ 0.1 —Å–µ–∫—É–Ω–¥—ã
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    async def resume_job(
        self, job_id: str, progress_message: types.Message
    ) -> dict[str, Any] | None:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            job = self.progress.get_job_progress(job_id)
            if not job:
                logger.error(f"–ó–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None

            logger.info(f"üîÑ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {job_id} —Å–æ —Å—Ç–∞—Ç—É—Å–∞ {job.status}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å –∫–∞–∫–æ–≥–æ —ç—Ç–∞–ø–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            if job.status == JobStatus.INITIALIZED.value:
                return await self.process_year_staged(
                    job.date_from, job.date_to, progress_message, job_id
                )
            elif job.status == JobStatus.WB_PROCESSING.value:
                # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å WB –æ–±—Ä–∞–±–æ—Ç–∫–∏
                pass  # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            # –ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç—Ç–∞–ø–æ–≤

            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {job_id} —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {job_id}: {e}")
            return None

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.optimized_client.close_all_sessions()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
staged_processor = StagedDataProcessor()
