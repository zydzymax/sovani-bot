#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Ç–∑—ã–≤–æ–≤
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List

from wb_reviews_manager import reviews_manager, WBReview

logger = logging.getLogger(__name__)

class AutoReviewsProcessor:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—Ç–∑—ã–≤–æ–≤"""

    def __init__(self, bot=None):
        self.bot = bot
        self.processing = False
        self.check_interval = 43200  # 12 —á–∞—Å–æ–≤ (2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
        self.admin_chat_id = None  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    def set_admin_chat_id(self, chat_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.admin_chat_id = chat_id

    async def start_auto_processing(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
        if self.processing:
            logger.warning("–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return

        self.processing = True
        logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")

        while self.processing:
            try:
                await self._process_reviews_cycle()
                await asyncio.sleep(self.check_interval)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def stop_auto_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.processing = False
        logger.info("–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def process_all_unanswered_reviews(self):
        """
        –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
        """
        try:
            logger.info("üöÄ –ü–ï–†–í–ò–ß–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ò—â–µ–º –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
            unanswered_reviews = await reviews_manager.get_all_unanswered_reviews()

            if not unanswered_reviews:
                logger.info("‚úÖ –í—Å–µ –æ—Ç–∑—ã–≤—ã —É–∂–µ –∏–º–µ—é—Ç –æ—Ç–≤–µ—Ç—ã")
                if self.bot and self.admin_chat_id:
                    await self.bot.send_message(
                        self.admin_chat_id,
                        "‚úÖ <b>–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                        "–í—Å–µ –æ—Ç–∑—ã–≤—ã —É–∂–µ –∏–º–µ—é—Ç –æ—Ç–≤–µ—Ç—ã. –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                    )
                return

            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(unanswered_reviews)} –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")

            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏ —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            auto_reviews = []
            manual_reviews = []

            for review in unanswered_reviews:
                if reviews_manager.should_auto_respond(review):
                    auto_reviews.append(review)
                else:
                    manual_reviews.append(review)

            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤: {len(auto_reviews)} –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç, {len(manual_reviews)} —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
            auto_processed = 0
            if auto_reviews:
                auto_processed = await self._process_auto_reviews(auto_reviews)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if self.bot and self.admin_chat_id:
                message = f"üéØ <b>–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                message += f"üìã –í—Å–µ–≥–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {len(unanswered_reviews)}\n"
                message += f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {auto_processed}\n"
                message += f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(manual_reviews)}\n\n"

                if manual_reviews:
                    message += "üìù <b>–û—Ç–∑—ã–≤—ã –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n"
                    for review in manual_reviews[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        stars = "‚≠ê" * review.rating
                        message += f"‚Ä¢ {stars} {review.text[:50]}...\n"

                    if len(manual_reviews) > 5:
                        message += f"... –∏ –µ—â–µ {len(manual_reviews) - 5} –æ—Ç–∑—ã–≤–æ–≤\n"

                    message += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reviews –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"

                await self.bot.send_message(self.admin_chat_id, message)

            return {
                'total_found': len(unanswered_reviews),
                'auto_processed': auto_processed,
                'manual_needed': len(manual_reviews)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
            if self.bot and self.admin_chat_id:
                await self.bot.send_message(
                    self.admin_chat_id,
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n{e}"
                )
            raise

    async def _process_reviews_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
            reviews = await reviews_manager.get_new_reviews(limit=50)

            if not reviews:
                logger.info("–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Ç–∑—ã–≤—ã
            auto_reviews = [r for r in reviews if reviews_manager.should_auto_respond(r)]
            manual_reviews = [r for r in reviews if reviews_manager.needs_user_approval(r)]

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤: {len(auto_reviews)} –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç, {len(manual_reviews)} —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
            if auto_reviews:
                await self._process_auto_reviews(auto_reviews)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –æ—Ç–∑—ã–≤–∞—Ö –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if manual_reviews and self.bot and self.admin_chat_id:
                await self._notify_manual_reviews(manual_reviews)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")

    async def _process_auto_reviews(self, auto_reviews: List[WBReview]):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ 4-5 –∑–≤–µ–∑–¥"""
        processed_count = 0
        failed_count = 0

        for review in auto_reviews:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤
                result = await reviews_manager.process_review(review)

                if result['auto_respond']:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    success = await reviews_manager.send_review_response(
                        review.id,
                        result['generated_response']
                    )

                    if success:
                        processed_count += 1
                        logger.info(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ—Ç–∑—ã–≤ {review.id} ({review.rating}‚≠ê)")
                        logger.info(f"–û—Ç–≤–µ—Ç: {result['generated_response'][:100]}...")
                    else:
                        failed_count += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ {review.id}")

                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

            except Exception as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ {review.id}: {e}")

        if processed_count > 0 or failed_count > 0:
            logger.info(f"–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ‚úÖ{processed_count} —É—Å–ø–µ—à–Ω–æ, ‚ùå{failed_count} –æ—à–∏–±–æ–∫")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if self.bot and self.admin_chat_id:
                try:
                    stats_text = f"ü§ñ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:\n‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ: {processed_count}\n‚ùå –û—à–∏–±–æ–∫: {failed_count}"
                    await self.bot.send_message(self.admin_chat_id, stats_text)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _notify_manual_reviews(self, manual_reviews: List[WBReview]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–∑—ã–≤–∞—Ö, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            negative_count = len([r for r in manual_reviews if r.rating <= 2])
            neutral_count = len([r for r in manual_reviews if r.rating == 3])

            notification_text = f"‚ö†Ô∏è –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
            notification_text += f"üî¥ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ (1-2‚≠ê): {negative_count}\n"
            notification_text += f"üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ (3‚≠ê): {neutral_count}\n\n"
            notification_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reviews –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"

            await self.bot.send_message(self.admin_chat_id, notification_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä—É—á–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö: {e}")

    async def force_check_reviews(self) -> dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            reviews = await reviews_manager.get_new_reviews(limit=50)

            auto_reviews = [r for r in reviews if reviews_manager.should_auto_respond(r)]
            manual_reviews = [r for r in reviews if reviews_manager.needs_user_approval(r)]

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
            auto_processed = 0
            if auto_reviews:
                for review in auto_reviews:
                    result = await reviews_manager.process_review(review)
                    if result['auto_respond']:
                        success = await reviews_manager.send_review_response(
                            review.id, result['generated_response']
                        )
                        if success:
                            auto_processed += 1

            return {
                'total_reviews': len(reviews),
                'auto_processed': auto_processed,
                'manual_needed': len(manual_reviews),
                'manual_reviews': manual_reviews
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return {'error': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
auto_processor = AutoReviewsProcessor()