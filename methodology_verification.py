#!/usr/bin/env python3
"""–î–µ—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –º–µ—Ç–æ–¥–∏–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–∞—Å—á–µ—Ç–∞
"""

import asyncio
import json
import logging
from datetime import datetime

from real_data_reports import RealDataFinancialReports

import api_clients_main as api_clients
from api_chunking import ChunkedAPIManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class MethodologyVerifier:
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ç–æ–¥–∏–∫–∏ –ø–æ–¥—Å—á–µ—Ç–∞"""

    def __init__(self):
        self.real_reports = RealDataFinancialReports()

    async def verify_wb_data_sources(self, date_from: str, date_to: str):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö WB"""
        logger.info("üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–û–í –î–ê–ù–ù–´–• WB")
        logger.info("=" * 50)

        try:
            # 1. –ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Sales –¥–∞–Ω–Ω—ã—Ö
            logger.info("1Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï SALES –î–ê–ù–ù–´–•:")
            chunked_manager = ChunkedAPIManager(api_clients)
            sales_data = await chunked_manager.get_wb_sales_chunked(date_from, date_to)

            sales_count = len(sales_data) if sales_data else 0
            logger.info(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ Sales –∑–∞–ø–∏—Å–µ–π: {sales_count}")

            if sales_data and len(sales_data) > 0:
                # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
                sample_sales = sales_data[:3]
                for i, sale in enumerate(sample_sales):
                    logger.info(f"   –ü—Ä–æ–¥–∞–∂–∞ {i+1}:")
                    logger.info(f"      saleID: {sale.get('saleID', '–Ω/–¥')}")
                    logger.info(f"      forPay: {sale.get('forPay', 0):.2f} ‚ÇΩ")
                    logger.info(f"      priceWithDisc: {sale.get('priceWithDisc', 0):.2f} ‚ÇΩ")
                    logger.info(f"      totalPrice: {sale.get('totalPrice', 0):.2f} ‚ÇΩ")
                    logger.info(f"      isRealization: {sale.get('isRealization', False)}")
                    logger.info(f"      isSupply: {sale.get('isSupply', False)}")

            # 2. –ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Orders –¥–∞–Ω–Ω—ã—Ö
            logger.info("\n2Ô∏è‚É£ –ü–û–õ–£–ß–ï–ù–ò–ï ORDERS –î–ê–ù–ù–´–•:")
            orders_data = await chunked_manager.get_wb_orders_chunked(date_from, date_to)

            orders_count = len(orders_data) if orders_data else 0
            logger.info(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ Orders –∑–∞–ø–∏—Å–µ–π: {orders_count}")

            if orders_data and len(orders_data) > 0:
                # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
                sample_orders = orders_data[:3]
                for i, order in enumerate(sample_orders):
                    logger.info(f"   –ó–∞–∫–∞–∑ {i+1}:")
                    logger.info(f"      odid: {order.get('odid', '–Ω/–¥')}")
                    logger.info(f"      priceWithDisc: {order.get('priceWithDisc', 0):.2f} ‚ÇΩ")
                    logger.info(f"      totalPrice: {order.get('totalPrice', 0):.2f} ‚ÇΩ")

            # 3. –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
            logger.info("\n3Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–ò–ö–ò –†–ê–°–ß–ï–¢–ê:")

            # –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏ –ø–æ Sales (—Ä–µ–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏—Å—Ç–µ–º—ã)
            sales_realizations = (
                [s for s in sales_data if s.get("isRealization")] if sales_data else []
            )
            sales_revenue_priceWithDisc = sum(s.get("priceWithDisc", 0) for s in sales_realizations)
            sales_revenue_forPay = sum(s.get("forPay", 0) for s in sales_realizations)
            sales_revenue_totalPrice = sum(s.get("totalPrice", 0) for s in sales_realizations)

            logger.info("   üìä –ú–ï–¢–û–î –°–ò–°–¢–ï–ú–´ (Sales API, isRealization=true):")
            logger.info(f"      –ó–∞–ø–∏—Å–µ–π: {len(sales_realizations)}")
            logger.info(f"      priceWithDisc (–æ—Å–Ω–æ–≤–∞): {sales_revenue_priceWithDisc:,.0f} ‚ÇΩ")
            logger.info(f"      forPay (–∫ –ø–æ–ª—É—á–µ–Ω–∏—é): {sales_revenue_forPay:,.0f} ‚ÇΩ")
            logger.info(f"      totalPrice (–ø–æ–ª–Ω–∞—è): {sales_revenue_totalPrice:,.0f} ‚ÇΩ")

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ Orders
            orders_revenue_priceWithDisc = (
                sum(o.get("priceWithDisc", 0) for o in orders_data) if orders_data else 0
            )
            orders_revenue_totalPrice = (
                sum(o.get("totalPrice", 0) for o in orders_data) if orders_data else 0
            )

            logger.info("\n   üìä –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î (Orders API):")
            logger.info(f"      –ó–∞–ø–∏—Å–µ–π: {orders_count}")
            logger.info(f"      priceWithDisc: {orders_revenue_priceWithDisc:,.0f} ‚ÇΩ")
            logger.info(f"      totalPrice: {orders_revenue_totalPrice:,.0f} ‚ÇΩ")

            # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫
            logger.info("\n4Ô∏è‚É£ –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–ò–ö:")

            methodologies = {
                "system_current": {
                    "name": "–¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ —Å–∏—Å—Ç–µ–º—ã",
                    "description": "Sales API, isRealization=true, priceWithDisc",
                    "value": sales_revenue_priceWithDisc,
                    "records": len(sales_realizations),
                },
                "sales_forpay": {
                    "name": "Sales API –∫ –ø–æ–ª—É—á–µ–Ω–∏—é",
                    "description": "Sales API, isRealization=true, forPay",
                    "value": sales_revenue_forPay,
                    "records": len(sales_realizations),
                },
                "sales_total": {
                    "name": "Sales API –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞",
                    "description": "Sales API, isRealization=true, totalPrice",
                    "value": sales_revenue_totalPrice,
                    "records": len(sales_realizations),
                },
                "orders_disc": {
                    "name": "Orders API —Å–æ —Å–∫–∏–¥–∫–æ–π",
                    "description": "Orders API, priceWithDisc",
                    "value": orders_revenue_priceWithDisc,
                    "records": orders_count,
                },
                "orders_total": {
                    "name": "Orders API –ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞",
                    "description": "Orders API, totalPrice",
                    "value": orders_revenue_totalPrice,
                    "records": orders_count,
                },
            }

            for key, method in methodologies.items():
                percentage_of_expected = (
                    (method["value"] / 530000) * 100 if method["value"] > 0 else 0
                )
                logger.info(
                    f"   {method['name']:25} | {method['value']:>10,.0f} ‚ÇΩ | {method['records']:>4} –∑–∞–ø–∏—Å–µ–π | {percentage_of_expected:>5.1f}% –æ—Ç –æ–∂–∏–¥–∞–Ω–∏–π"
                )

            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            logger.info("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò:")

            if sales_data:
                total_sales_records = len(sales_data)
                realization_records = len([s for s in sales_data if s.get("isRealization")])
                supply_records = len([s for s in sales_data if s.get("isSupply")])
                other_records = total_sales_records - realization_records - supply_records

                logger.info("   üìä Sales –∑–∞–ø–∏—Å–∏:")
                logger.info(f"      –í—Å–µ–≥–æ: {total_sales_records}")
                logger.info(
                    f"      isRealization=true: {realization_records} ({(realization_records/total_sales_records)*100:.1f}%)"
                )
                logger.info(
                    f"      isSupply=true: {supply_records} ({(supply_records/total_sales_records)*100:.1f}%)"
                )
                logger.info(
                    f"      –ü—Ä–æ—á–∏–µ: {other_records} ({(other_records/total_sales_records)*100:.1f}%)"
                )

            return {
                "sales_data_count": sales_count,
                "orders_data_count": orders_count,
                "methodologies": methodologies,
                "recommended_method": "system_current",  # –¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ —Å–∏—Å—Ç–µ–º—ã
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return None

    async def check_data_consistency(self, date_from: str, date_to: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        logger.info("=" * 40)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:")

            # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ get_real_wb_data
            logger.info("   1. –ß–µ—Ä–µ–∑ get_real_wb_data...")
            wb_data_direct = await self.real_reports.get_real_wb_data(date_from, date_to)

            # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ chunked API –Ω–∞–ø—Ä—è–º—É—é
            logger.info("   2. –ß–µ—Ä–µ–∑ chunked API...")
            chunked_manager = ChunkedAPIManager(api_clients)
            sales_direct = await chunked_manager.get_wb_sales_chunked(date_from, date_to)
            orders_direct = await chunked_manager.get_wb_orders_chunked(date_from, date_to)

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            logger.info("\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")

            direct_revenue = wb_data_direct.get("revenue", 0)
            direct_units = wb_data_direct.get("units", 0)

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ sales –¥–∞–Ω–Ω—ã–º
            sales_realizations = (
                [s for s in sales_direct if s.get("isRealization")] if sales_direct else []
            )
            calculated_revenue = sum(s.get("priceWithDisc", 0) for s in sales_realizations)
            calculated_units = len(sales_realizations)

            logger.info(f"   get_real_wb_data:     {direct_revenue:,.0f} ‚ÇΩ, {direct_units} –µ–¥.")
            logger.info(
                f"   –ü—Ä—è–º–æ–π —Ä–∞—Å—á–µ—Ç Sales:  {calculated_revenue:,.0f} ‚ÇΩ, {calculated_units} –µ–¥."
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            revenue_diff = abs(direct_revenue - calculated_revenue)
            units_diff = abs(direct_units - calculated_units)

            logger.info(f"   –†–∞–∑–Ω–∏—Ü–∞ –≤—ã—Ä—É—á–∫–∏:      {revenue_diff:,.0f} ‚ÇΩ")
            logger.info(f"   –†–∞–∑–Ω–∏—Ü–∞ –µ–¥–∏–Ω–∏—Ü:       {units_diff} –µ–¥.")

            if revenue_diff < 1 and units_diff == 0:
                logger.info("   ‚úÖ –î–∞–Ω–Ω—ã–µ –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–´")
                consistency_status = "consistent"
            else:
                logger.info("   ‚ö†Ô∏è –ï—Å—Ç—å –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø")
                consistency_status = "inconsistent"

            return {
                "consistency_status": consistency_status,
                "direct_revenue": direct_revenue,
                "calculated_revenue": calculated_revenue,
                "revenue_difference": revenue_diff,
                "direct_units": direct_units,
                "calculated_units": calculated_units,
                "units_difference": units_diff,
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            return None

    def create_methodology_report(self, verification_result, consistency_result):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–µ—Ç–æ–¥–∏–∫–µ"""
        logger.info("\nüìã –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê –û –ú–ï–¢–û–î–ò–ö–ï")
        logger.info("=" * 40)

        current_time = datetime.now().isoformat()

        report = {
            "report_date": current_time,
            "methodology_verification": {
                "data_sources": {
                    "sales_api": {
                        "description": "WB Sales API - —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏/–≤—ã–∫—É–ø—ã",
                        "records_count": verification_result.get("sales_data_count", 0),
                        "filtering": "isRealization = true",
                        "price_field": "priceWithDisc",
                    },
                    "orders_api": {
                        "description": "WB Orders API - –≤—Å–µ –∑–∞–∫–∞–∑—ã",
                        "records_count": verification_result.get("orders_data_count", 0),
                        "filtering": "–í—Å–µ –∑–∞–ø–∏—Å–∏",
                        "price_field": "priceWithDisc / totalPrice",
                    },
                },
                "current_system_method": {
                    "name": "Sales API + isRealization + priceWithDisc",
                    "justification": [
                        "–¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∫—É–ø—ã (–Ω–µ –≤—Å–µ –∑–∞–∫–∞–∑—ã)",
                        "–¶–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ (—Ä–µ–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞)",
                        "–ò—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–≤—ã–∫—É–ø–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
                        "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º",
                    ],
                },
                "alternative_methods": verification_result.get("methodologies", {}),
                "consistency_check": consistency_result,
            },
            "discrepancy_analysis": {
                "system_shows": verification_result["methodologies"]["system_current"]["value"],
                "user_expected": 530000,
                "ratio": verification_result["methodologies"]["system_current"]["value"] / 530000,
                "possible_causes": [
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª –≤–∫–ª—é—á–µ–Ω–∏—è Ozon",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–ª –¥—Ä—É–≥—É—é –º–µ—Ç–æ–¥–∏–∫—É (totalPrice, forPay)",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–ª —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã",
                    '–†–∞–∑–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–≤—ã—Ä—É—á–∫–∏"',
                ],
            },
            "recommendations": [
                "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ–π –º–µ—Ç–æ–¥–∏–∫–µ",
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–∂–∏–¥–∞–µ–º—É—é –º–µ—Ç–æ–¥–∏–∫—É",
                "–ú–æ–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã",
                "–í–∞–∂–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–µ—Ç–æ–¥–∏–∫—É",
            ],
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        filename = f"methodology_verification_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = f"/root/sovani_bot/reports/{filename}"

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –û—Ç—á–µ—Ç –æ –º–µ—Ç–æ–¥–∏–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

        return report


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    verifier = MethodologyVerifier()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —è–Ω–≤–∞—Ä–µ 2025
    date_from = "2025-01-01"
    date_to = "2025-01-31"

    logger.info(f"üéØ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ú–ï–¢–û–î–ò–ö–ò –î–õ–Ø –ü–ï–†–ò–û–î–ê {date_from} - {date_to}")

    # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    verification_result = await verifier.verify_wb_data_sources(date_from, date_to)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    consistency_result = await verifier.check_data_consistency(date_from, date_to)

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    if verification_result and consistency_result:
        methodology_report = verifier.create_methodology_report(
            verification_result, consistency_result
        )

        logger.info("\nüéØ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        logger.info("üìä –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è: —Ä–∞–∑–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ")

        return methodology_report
    else:
        logger.error("‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
        return None


if __name__ == "__main__":
    report = asyncio.run(main())
