#!/usr/bin/env python3
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Excel —Ñ–∞–π–ª–æ–≤ WB
–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤ WB
"""

import logging
import os
from typing import Any

import pandas as pd

logger = logging.getLogger(__name__)


class WBExcelProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Excel —Ñ–∞–π–ª–æ–≤ Wildberries"""

    def __init__(self):
        self.upload_dir = "uploads/wb_reports"
        os.makedirs(self.upload_dir, exist_ok=True)

    async def process_sales_report(self, file_path: str) -> dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö WB

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞

        """
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path)

            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –ø—Ä–æ–¥–∞–∂ WB: {len(df)} –∑–∞–ø–∏—Å–µ–π")

            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            total_rows = len(df)

            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            revenue_columns = ["–í—ã—Ä—É—á–∫–∞", "–ö –¥–æ–ø–ª–∞—Ç–µ", "forPay", "–°—É–º–º–∞"]
            revenue_column = None
            for col in revenue_columns:
                if col in df.columns:
                    revenue_column = col
                    break

            total_revenue = 0
            if revenue_column:
                total_revenue = df[revenue_column].sum()

            # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
            date_columns = ["–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏", "–î–∞—Ç–∞", "date", "Date"]
            date_column = None
            for col in date_columns:
                if col in df.columns:
                    date_column = col
                    break

            date_range = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            if date_column:
                try:
                    dates = pd.to_datetime(df[date_column])
                    min_date = dates.min().strftime("%d.%m.%Y")
                    max_date = dates.max().strftime("%d.%m.%Y")
                    date_range = f"{min_date} - {max_date}"
                except:
                    pass

            return {
                "success": True,
                "file_type": "sales",
                "total_rows": total_rows,
                "total_revenue": total_revenue,
                "revenue_column": revenue_column,
                "date_range": date_range,
                "columns": list(df.columns),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–¥–∞–∂: {e}")
            return {"success": False, "error": str(e)}

    async def process_orders_report(self, file_path: str) -> dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫–∞–∑–∞—Ö WB

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞

        """
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path)

            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ WB: {len(df)} –∑–∞–ø–∏—Å–µ–π")

            total_rows = len(df)

            # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
            status_columns = ["–°—Ç–∞—Ç—É—Å", "status", "–°–æ—Å—Ç–æ—è–Ω–∏–µ"]
            status_column = None
            for col in status_columns:
                if col in df.columns:
                    status_column = col
                    break

            status_analysis = {}
            if status_column:
                status_analysis = df[status_column].value_counts().to_dict()

            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—É–º–º–∞–º
            sum_columns = ["–¶–µ–Ω–∞", "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞", "priceWithDisc", "–ò—Ç–æ–≥–æ"]
            sum_column = None
            for col in sum_columns:
                if col in df.columns:
                    sum_column = col
                    break

            total_sum = 0
            if sum_column:
                total_sum = df[sum_column].sum()

            return {
                "success": True,
                "file_type": "orders",
                "total_rows": total_rows,
                "total_sum": total_sum,
                "sum_column": sum_column,
                "status_analysis": status_analysis,
                "columns": list(df.columns),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")
            return {"success": False, "error": str(e)}

    async def process_finance_report(self, file_path: str) -> dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ WB

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞

        """
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path)

            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ñ–∞–π–ª WB: {len(df)} –∑–∞–ø–∏—Å–µ–π")

            total_rows = len(df)

            # –ü–æ–∏—Å–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            finance_columns = ["–°—É–º–º–∞", "–ö –¥–æ–ø–ª–∞—Ç–µ", "–í—ã—Ä—É—á–∫–∞", "–ö –¥–æ–ø–ª–∞—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü—É"]
            finance_data = {}

            for col in finance_columns:
                if col in df.columns:
                    finance_data[col] = df[col].sum()

            # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
            operation_columns = ["–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏", "–û–ø–µ—Ä–∞—Ü–∏—è", "operation_type"]
            operation_column = None
            for col in operation_columns:
                if col in df.columns:
                    operation_column = col
                    break

            operation_analysis = {}
            if operation_column:
                operation_analysis = df[operation_column].value_counts().to_dict()

            return {
                "success": True,
                "file_type": "finance",
                "total_rows": total_rows,
                "finance_data": finance_data,
                "operation_analysis": operation_analysis,
                "columns": list(df.columns),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return {"success": False, "error": str(e)}

    def format_analysis_report(self, analysis: dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞

        Returns:
            –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞

        """
        if not analysis["success"]:
            return f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞</b>\n\n{analysis['error']}"

        file_type = analysis["file_type"]

        if file_type == "sales":
            return self._format_sales_report(analysis)
        elif file_type == "orders":
            return self._format_orders_report(analysis)
        elif file_type == "finance":
            return self._format_finance_report(analysis)
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"

    def _format_sales_report(self, analysis: dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
        text = "‚úÖ <b>–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö WB –æ–±—Ä–∞–±–æ—Ç–∞–Ω</b>\n\n"
        text += "üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        text += f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {analysis['total_rows']:,}\n"

        if analysis["revenue_column"]:
            text += f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {analysis['total_revenue']:,.2f} ‚ÇΩ\n"
            text += f"‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ –≤—ã—Ä—É—á–∫–∏: {analysis['revenue_column']}\n"

        text += f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {analysis['date_range']}\n\n"

        text += "üìã <b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞:</b>\n"
        text += f"‚Ä¢ –ö–æ–ª–æ–Ω–æ–∫: {len(analysis['columns'])}\n"
        text += f"‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è: {', '.join(analysis['columns'][:5])}"

        if len(analysis["columns"]) > 5:
            text += f" –∏ –µ—â–µ {len(analysis['columns']) - 5}"

        return text

    def _format_orders_report(self, analysis: dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–∫–∞–∑–∞—Ö"""
        text = "‚úÖ <b>–û—Ç—á–µ—Ç –æ –∑–∞–∫–∞–∑–∞—Ö WB –æ–±—Ä–∞–±–æ—Ç–∞–Ω</b>\n\n"
        text += "üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        text += f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {analysis['total_rows']:,}\n"

        if analysis["sum_column"]:
            text += f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {analysis['total_sum']:,.2f} ‚ÇΩ\n"

        if analysis["status_analysis"]:
            text += "\nüìà <b>–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤:</b>\n"
            for status, count in list(analysis["status_analysis"].items())[:5]:
                text += f"‚Ä¢ {status}: {count:,}\n"

        return text

    def _format_finance_report(self, analysis: dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        text = "‚úÖ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç WB –æ–±—Ä–∞–±–æ—Ç–∞–Ω</b>\n\n"
        text += "üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        text += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π: {analysis['total_rows']:,}\n\n"

        if analysis["finance_data"]:
            text += "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            for field, amount in analysis["finance_data"].items():
                text += f"‚Ä¢ {field}: {amount:,.2f} ‚ÇΩ\n"

        if analysis["operation_analysis"]:
            text += "\nüìà <b>–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n"
            for op_type, count in list(analysis["operation_analysis"].items())[:5]:
                text += f"‚Ä¢ {op_type}: {count:,}\n"

        return text


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
wb_excel_processor = WBExcelProcessor()
