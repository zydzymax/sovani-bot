#!/usr/bin/env python3
"""–ß–ï–°–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–†–ù–ï–í–´–• –ü–†–ò–ß–ò–ù
–ü–æ–∏—Å–∫ –†–ï–ê–õ–¨–ù–´–• –ø—Ä–∏—á–∏–Ω –∑–∞–≤—ã—à–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–æ–¥–≥–æ–Ω–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging

import api_clients_main as api_clients
from api_chunking import ChunkedAPIManager

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class RealRootCauseAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø—Ä–∏—á–∏–Ω –±–µ–∑ –ø–æ–¥–≥–æ–Ω–∫–∏"""

    def __init__(self):
        self.chunked_manager = ChunkedAPIManager(api_clients)

    async def investigate_single_api_call(self):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–´–†–û–ì–û API –û–¢–í–ï–¢–ê")
        logger.info("=" * 50)

        # –ë–µ—Ä–µ–º –æ–¥–∏–Ω –¥–µ–Ω—å –∏–∑ —è–Ω–≤–∞—Ä—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        date_from = "2025-01-15"
        date_to = "2025-01-15"

        logger.info(f"üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {date_from}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ Sales –¥–∞–Ω–Ω—ã–µ
            logger.info("\nüìä –°–´–†–´–ï SALES –î–ê–ù–ù–´–ï:")
            sales_data = await self.chunked_manager.get_wb_sales_chunked(date_from, date_to)

            if sales_data:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(sales_data)}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –¥–µ—Ç–∞–ª—å–Ω–æ
                for i, sale in enumerate(sales_data[:3]):
                    logger.info(f"\nüî∏ –ó–∞–ø–∏—Å—å {i+1}:")
                    logger.info(f"  saleID: {sale.get('saleID', '–ù–ï–¢')}")
                    logger.info(f"  date: {sale.get('date', '–ù–ï–¢')}")
                    logger.info(f"  nmId: {sale.get('nmId', '–ù–ï–¢')}")
                    logger.info(f"  subject: {sale.get('subject', '–ù–ï–¢')}")
                    logger.info(f"  brand: {sale.get('brand', '–ù–ï–¢')}")
                    logger.info(f"  supplierArticle: {sale.get('supplierArticle', '–ù–ï–¢')}")
                    logger.info(f"  priceWithDisc: {sale.get('priceWithDisc', 0)}")
                    logger.info(f"  forPay: {sale.get('forPay', 0)}")
                    logger.info(f"  totalPrice: {sale.get('totalPrice', 0)}")
                    logger.info(f"  isRealization: {sale.get('isRealization', '–ù–ï–¢')}")

                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
                products = {}
                for sale in sales_data:
                    nm_id = sale.get("nmId")
                    if nm_id:
                        if nm_id not in products:
                            products[nm_id] = []
                        products[nm_id].append(sale)

                logger.info("\nüì¶ –ê–ù–ê–õ–ò–ó –ü–û –¢–û–í–ê–†–ê–ú:")
                logger.info(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")

                for nm_id, sales in list(products.items())[:3]:
                    logger.info(f"\nüè∑Ô∏è –¢–æ–≤–∞—Ä {nm_id}:")
                    logger.info(f"  –ü—Ä–æ–¥–∞–∂: {len(sales)}")
                    total_price = sum(s.get("priceWithDisc", 0) for s in sales)
                    logger.info(f"  –û–±—â–∞—è —Å—É–º–º–∞: {total_price:,.0f} ‚ÇΩ")
                    avg_price = total_price / len(sales) if sales else 0
                    logger.info(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} ‚ÇΩ")

            else:
                logger.warning("–ù–µ—Ç Sales –¥–∞–Ω–Ω—ã—Ö")

            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ Orders –¥–∞–Ω–Ω—ã–µ
            logger.info("\nüìä –°–´–†–´–ï ORDERS –î–ê–ù–ù–´–ï:")
            orders_data = await self.chunked_manager.get_wb_orders_chunked(date_from, date_to)

            if orders_data:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(orders_data)}")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                for i, order in enumerate(orders_data[:3]):
                    logger.info(f"\nüî∏ –ó–∞–∫–∞–∑ {i+1}:")
                    logger.info(f"  date: {order.get('date', '–ù–ï–¢')}")
                    logger.info(f"  nmId: {order.get('nmId', '–ù–ï–¢')}")
                    logger.info(f"  subject: {order.get('subject', '–ù–ï–¢')}")
                    logger.info(f"  brand: {order.get('brand', '–ù–ï–¢')}")
                    logger.info(f"  supplierArticle: {order.get('supplierArticle', '–ù–ï–¢')}")
                    logger.info(f"  priceWithDisc: {order.get('priceWithDisc', 0)}")
                    logger.info(f"  totalPrice: {order.get('totalPrice', 0)}")

            return {
                "sales_count": len(sales_data) if sales_data else 0,
                "orders_count": len(orders_data) if orders_data else 0,
                "sales_sample": sales_data[:3] if sales_data else [],
                "orders_sample": orders_data[:3] if orders_data else [],
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    def analyze_real_business_logic(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –†–ï–ê–õ–¨–ù–û –æ–∑–Ω–∞—á–∞—é—Ç API –¥–∞–Ω–Ω—ã–µ"""
        logger.info("\nü§î –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ô –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò")
        logger.info("=" * 50)

        logger.info("‚ùì –í–û–ü–†–û–°–´ –î–õ–Ø –ü–û–ù–ò–ú–ê–ù–ò–Ø:")
        logger.info("1. –í –∫–∞–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ü–µ–Ω—ã –≤ API? (—Ä—É–±–ª–∏/–∫–æ–ø–µ–π–∫–∏)")
        logger.info("2. –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç priceWithDisc? (—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π)")
        logger.info("3. –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç forPay? (–∫ –¥–æ–ø–ª–∞—Ç–µ/–∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é)")
        logger.info("4. –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç totalPrice? (–ø–æ–ª–Ω–∞—è —Ü–µ–Ω–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏)")
        logger.info("5. –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∑–∞–ø–∏—Å–∏ –≤ Sales API?")
        logger.info("6. –ú–æ–∂–µ—Ç –ª–∏ –æ–¥–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –≥–µ–Ω–µ—Ä–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π?")

        logger.info("\nüí° –ì–ò–ü–û–¢–ï–ó–´ –û –ó–ê–í–´–®–ï–ù–ò–ò:")
        logger.info("üî∏ –ì–∏–ø–æ—Ç–µ–∑–∞ 1: –¶–µ–Ω—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö, –∞ –º—ã —Å—á–∏—Ç–∞–µ–º –≤ —Ä—É–±–ª—è—Ö")
        logger.info("üî∏ –ì–∏–ø–æ—Ç–µ–∑–∞ 2: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã")
        logger.info("üî∏ –ì–∏–ø–æ—Ç–µ–∑–∞ 3: –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π (–ø—Ä–æ–¥–∞–∂–∏ + –≤–æ–∑–≤—Ä–∞—Ç—ã)")
        logger.info("üî∏ –ì–∏–ø–æ—Ç–µ–∑–∞ 4: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ–ª–µ–π API")
        logger.info("üî∏ –ì–∏–ø–æ—Ç–µ–∑–∞ 5: –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—é")

    async def compare_with_wb_cabinet_data(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ WB"""
        logger.info("\nüì± –°–†–ê–í–ù–ï–ù–ò–ï –° –õ–ò–ß–ù–´–ú –ö–ê–ë–ò–ù–ï–¢–û–ú WB")
        logger.info("=" * 50)

        logger.info("üìã –ß–¢–û –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –í –ö–ê–ë–ò–ù–ï–¢–ï WB:")
        logger.info("1. –ó–∞–π—Ç–∏ –≤ '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' ‚Üí '–ü—Ä–æ–¥–∞–∂–∏'")
        logger.info("2. –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ 15 —è–Ω–≤–∞—Ä—è 2025")
        logger.info("3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
        logger.info("   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        logger.info("   - –í—ã—Ä—É—á–∫–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–æ–∫")
        logger.info("   - –ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é")
        logger.info("   - –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä–∞–º")

        logger.info("\n‚ùó –í–ê–ñ–ù–û –°–†–ê–í–ù–ò–¢–¨:")
        logger.info("- API priceWithDisc vs –ö–∞–±–∏–Ω–µ—Ç '–í—ã—Ä—É—á–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π'")
        logger.info("- API forPay vs –ö–∞–±–∏–Ω–µ—Ç '–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é'")
        logger.info("- API –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ vs –ö–∞–±–∏–Ω–µ—Ç '–ü—Ä–æ–¥–∞–Ω–æ —à—Ç—É–∫'")

        logger.info("\nüéØ –¶–ï–õ–¨:")
        logger.info("–ù–∞–π—Ç–∏ –¢–û–ß–ù–û–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É API –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–º")
        logger.info("–ü–æ–Ω—è—Ç—å –æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ—Ç—Å—è –∑–∞–≤—ã—à–µ–Ω–∏–µ –≤ 10 —Ä–∞–∑")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–µ—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = RealRootCauseAnalyzer()

    logger.info("üö® –ß–ï–°–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–†–ù–ï–í–´–• –ü–†–ò–ß–ò–ù")
    logger.info("–ë–ï–ó –ü–û–î–ì–û–ù–ö–ò –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í!")

    # –ò—Å—Å–ª–µ–¥—É–µ–º —Å—ã—Ä—ã–µ API –¥–∞–Ω–Ω—ã–µ
    api_data = await analyzer.investigate_single_api_call()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
    analyzer.analyze_real_business_logic()

    # –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º
    await analyzer.compare_with_wb_cabinet_data()

    logger.info("\nüéØ –í–´–í–û–î–´:")
    logger.info("1. –ù—É–∂–Ω–æ –°–†–ê–í–ù–ò–¢–¨ API –¥–∞–Ω–Ω—ã–µ —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º WB")
    logger.info("2. –ù–∞–π—Ç–∏ –¢–û–ß–ù–£–Æ –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤—ã—à–µ–Ω–∏—è")
    logger.info("3. –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ–Ω–æ—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
    logger.info("4. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ö–û–†–ù–ï–í–£–Æ –ü–†–ò–ß–ò–ù–£")

    return api_data


if __name__ == "__main__":
    result = asyncio.run(main())
