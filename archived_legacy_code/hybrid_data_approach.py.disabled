#!/usr/bin/env python3
"""
–ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î: Orders –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö + Sales –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö
–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ª–∞–≥–∞ Sales API
"""

import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any
from api_chunking import ChunkedAPIManager
import api_clients_main as api_clients
from emergency_data_correction import CorrectedWBDataProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class HybridWBDataProcessor:
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö WB: Orders –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö + Sales –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö"""

    def __init__(self):
        self.chunked_manager = ChunkedAPIManager(api_clients)
        self.corrected_processor = CorrectedWBDataProcessor()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
        self.SALES_LAG_DAYS = 3  # Sales API –∏–º–µ–µ—Ç –ª–∞–≥ –≤ 3 –¥–Ω—è
        self.USE_ORDERS_FOR_RECENT = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Orders –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.BUYOUT_RATE = 0.59  # 59% –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∫—É–ø–∞ (360 –ø—Ä–æ–¥–∞–∂ / 607 –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —è–Ω–≤–∞—Ä—è)

    async def get_hybrid_wb_data(self, date_from: str, date_to: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""

        logger.info("üîÑ –ì–ò–ë–†–ò–î–ù–´–ô –ü–û–î–•–û–î –ö –ü–û–õ–£–ß–ï–ù–ò–Æ –î–ê–ù–ù–´–• WB")
        logger.info("=" * 60)
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}")

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –º–µ–∂–¥—É —Å–≤–µ–∂–∏–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            today = datetime.now()
            sales_cutoff_date = (today - timedelta(days=self.SALES_LAG_DAYS)).strftime('%Y-%m-%d')

            start_date = datetime.strptime(date_from, '%Y-%m-%d')
            end_date = datetime.strptime(date_to, '%Y-%m-%d')
            cutoff_date = datetime.strptime(sales_cutoff_date, '%Y-%m-%d')

            logger.info(f"üìä Sales API –ª–∞–≥: {self.SALES_LAG_DAYS} –¥–Ω–µ–π")
            logger.info(f"‚è∞ –ì—Ä–∞–Ω–∏—Ü–∞ Sales/Orders: {sales_cutoff_date}")

            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∏ —Å–≤–µ–∂–∏–π
            historical_data = None
            recent_data = None

            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Sales API)
            if start_date <= cutoff_date:
                historical_end = min(end_date, cutoff_date).strftime('%Y-%m-%d')

                logger.info(f"\nüìö –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï (Sales API): {date_from} - {historical_end}")
                historical_data = await self.get_historical_data_sales(date_from, historical_end)

            # –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Orders API)
            if end_date > cutoff_date:
                recent_start = max(start_date, cutoff_date + timedelta(days=1)).strftime('%Y-%m-%d')

                logger.info(f"\nüî• –°–í–ï–ñ–ò–ï –î–ê–ù–ù–´–ï (Orders API): {recent_start} - {date_to}")
                recent_data = await self.get_recent_data_orders(recent_start, date_to)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_data = self.combine_historical_and_recent(historical_data, recent_data)

            logger.info(f"\nüìä –ò–¢–û–ì–û–í–´–ï –ì–ò–ë–†–ò–î–ù–´–ï –î–ê–ù–ù–´–ï:")
            logger.info(f"   üí∞ –í—ã—Ä—É—á–∫–∞: {combined_data.get('revenue', 0):,.0f} ‚ÇΩ")
            logger.info(f"   üì¶ –ï–¥–∏–Ω–∏—Ü: {combined_data.get('units', 0):,.0f}")

            return combined_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞: {e}")
            return None

    async def get_historical_data_sales(self, date_from: str, date_to: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Sales API"""

        logger.info("üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Sales API...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ Sales –¥–∞–Ω–Ω—ã–µ
            raw_sales = await self.chunked_manager.get_wb_sales_chunked(date_from, date_to)

            if not raw_sales:
                logger.warning("   ‚ö†Ô∏è –ù–µ—Ç Sales –¥–∞–Ω–Ω—ã—Ö")
                return {'count': 0, 'revenue': 0}

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            sales_data = self.corrected_processor.process_sales_data(raw_sales)

            result = {
                'source': 'sales_api',
                'count': sales_data.get('count', 0),
                'revenue': sales_data.get('corrected_priceWithDisc', 0),
                'original_revenue': sales_data.get('original_priceWithDisc', 0),
                'period': f"{date_from} - {date_to}"
            }

            logger.info(f"   ‚úÖ Sales: {result['count']} –∑–∞–ø–∏—Å–µ–π, {result['revenue']:,.0f} ‚ÇΩ")

            return result

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Sales –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {'count': 0, 'revenue': 0}

    async def get_recent_data_orders(self, date_from: str, date_to: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Orders API —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ –≤—ã–∫—É–ø—ã"""

        logger.info("üî• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Orders API...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ Orders –¥–∞–Ω–Ω—ã–µ
            raw_orders = await self.chunked_manager.get_wb_orders_chunked(date_from, date_to)

            if not raw_orders:
                logger.warning("   ‚ö†Ô∏è –ù–µ—Ç Orders –¥–∞–Ω–Ω—ã—Ö")
                return {'count': 0, 'revenue': 0}

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            orders_data = self.corrected_processor.process_orders_data(raw_orders)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –≤—ã–∫—É–ø—ã
            orders_revenue = orders_data.get('corrected_priceWithDisc', 0)
            predicted_sales_revenue = orders_revenue * self.BUYOUT_RATE

            # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–æ–≤
            predicted_sales_count = int(orders_data.get('count', 0) * self.BUYOUT_RATE)

            result = {
                'source': 'orders_api_converted',
                'count': predicted_sales_count,
                'revenue': predicted_sales_revenue,
                'orders_count': orders_data.get('count', 0),
                'orders_revenue': orders_revenue,
                'buyout_rate': self.BUYOUT_RATE,
                'period': f"{date_from} - {date_to}"
            }

            logger.info(f"   ‚úÖ Orders: {result['orders_count']} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {orders_revenue:,.0f} ‚ÇΩ")
            logger.info(f"   üéØ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–∫—É–ø–æ–≤: {predicted_sales_count} –Ω–∞ {predicted_sales_revenue:,.0f} ‚ÇΩ")

            return result

        except Exception as e:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Orders –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {'count': 0, 'revenue': 0}

    def combine_historical_and_recent(self, historical_data: Dict, recent_data: Dict) -> Dict:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""

        logger.info("\nüîó –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –ò –°–í–ï–ñ–ò–• –î–ê–ù–ù–´–•:")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        combined = {
            'revenue': 0,
            'units': 0,
            'historical_component': historical_data or {'count': 0, 'revenue': 0},
            'recent_component': recent_data or {'count': 0, 'revenue': 0},
            'data_sources': [],
            'hybrid_approach': True
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        if historical_data and historical_data.get('revenue', 0) > 0:
            combined['revenue'] += historical_data.get('revenue', 0)
            combined['units'] += historical_data.get('count', 0)
            combined['data_sources'].append(f"Sales API: {historical_data.get('period', 'unknown')}")
            logger.info(f"   üìö –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ: +{historical_data.get('revenue', 0):,.0f} ‚ÇΩ")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        if recent_data and recent_data.get('revenue', 0) > 0:
            combined['revenue'] += recent_data.get('revenue', 0)
            combined['units'] += recent_data.get('count', 0)
            combined['data_sources'].append(f"Orders API (–∫–æ–Ω–≤–µ—Ä—Ç.): {recent_data.get('period', 'unknown')}")
            logger.info(f"   üî• –°–≤–µ–∂–∏–µ: +{recent_data.get('revenue', 0):,.0f} ‚ÇΩ")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        combined['commission'] = combined['revenue'] * 0.24  # 24% –∫–æ–º–∏—Å—Å–∏—è WB
        combined['cogs'] = combined['revenue'] * 0.30  # 30% —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        combined['profit'] = combined['revenue'] - combined['commission'] - combined['cogs']

        logger.info(f"   üéØ –ò–¢–û–ì–û: {combined['revenue']:,.0f} ‚ÇΩ –æ—Ç {len(combined['data_sources'])} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

        return combined

class HybridFinancialReports:
    """–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""

    def __init__(self):
        self.hybrid_processor = HybridWBDataProcessor()

    async def get_wb_data_hybrid(self, date_from: str, date_to: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö WB —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"""

        return await self.hybrid_processor.get_hybrid_wb_data(date_from, date_to)

async def test_hybrid_approach():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""

    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–î–•–û–î–ê")
    logger.info("=" * 50)

    hybrid_reports = HybridFinancialReports()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    test_periods = [
        ("7_days", "2025-09-21", "2025-09-28", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"),
        ("14_days", "2025-09-14", "2025-09-28", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π"),
        ("30_days", "2025-08-29", "2025-09-28", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"),
    ]

    results = {}

    for name, date_from, date_to, description in test_periods:
        logger.info(f"\n{'='*20} {description.upper()} {'='*20}")

        result = await hybrid_reports.get_wb_data_hybrid(date_from, date_to)

        if result:
            results[name] = result

            logger.info(f"‚úÖ {description}: {result.get('revenue', 0):,.0f} ‚ÇΩ")
            logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(result.get('data_sources', []))}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {description}")

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    filename = f"hybrid_approach_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    filepath = f"/root/sovani_bot/reports/{filename}"

    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        logger.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    return results

if __name__ == "__main__":
    results = asyncio.run(test_hybrid_approach())
