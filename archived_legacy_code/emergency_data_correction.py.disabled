#!/usr/bin/env python3
"""
–≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–´–®–ï–ù–ò–Ø –î–ê–ù–ù–´–•
–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
"""

import asyncio
import logging
import json
from datetime import datetime
from typing import Dict, List, Any
from real_data_reports import RealDataFinancialReports
from api_chunking import ChunkedAPIManager
import api_clients_main as api_clients

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CorrectedWBDataProcessor:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö WB —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –∑–∞–≤—ã—à–µ–Ω–∏—è"""

    def __init__(self):
        self.chunked_manager = ChunkedAPIManager(api_clients)

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        self.CORRECTION_FACTORS = {
            'sales_forPay': 0.1426,      # 60,688 / 425,436 = 0.1426
            'sales_priceWithDisc': 0.1007, # 60,688 / 602,796 = 0.1007
            'orders_priceWithDisc': 0.1139  # 113,595 / 997,285 = 0.1139
        }

        # –§–ª–∞–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        self.apply_corrections = True
        self.remove_duplicates = True
        self.validate_prices = True

    async def get_corrected_wb_data(self, date_from: str, date_to: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö WB"""

        logger.info("üîß –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –î–ê–ù–ù–´–• WB")
        logger.info("=" * 50)
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from} - {date_to}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            raw_sales = await self.chunked_manager.get_wb_sales_chunked(date_from, date_to)
            raw_orders = await self.chunked_manager.get_wb_orders_chunked(date_from, date_to)

            logger.info(f"   Sales –∑–∞–ø–∏—Å–µ–π: {len(raw_sales) if raw_sales else 0}")
            logger.info(f"   Orders –∑–∞–ø–∏—Å–µ–π: {len(raw_orders) if raw_orders else 0}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Sales –¥–∞–Ω–Ω—ã—Ö
            corrected_sales = self.process_sales_data(raw_sales)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Orders –¥–∞–Ω–Ω—ã—Ö
            corrected_orders = self.process_orders_data(raw_orders)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            result = self.calculate_corrected_totals(corrected_sales, corrected_orders)

            logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã")
            return result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def process_sales_data(self, raw_sales: List[Dict]) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Sales –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π"""

        logger.info("\nüîß –û–ë–†–ê–ë–û–¢–ö–ê SALES –î–ê–ù–ù–´–•:")

        if not raw_sales:
            return {'count': 0, 'revenue_original': 0, 'revenue_corrected': 0}

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        realizations = [s for s in raw_sales if s.get('isRealization', True)]
        logger.info(f"   –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {len(raw_sales)} ‚Üí {len(realizations)} (isRealization=true)")

        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ saleID
        if self.remove_duplicates:
            unique_sales = {}
            for sale in realizations:
                sale_id = sale.get('saleID')
                if sale_id and sale_id not in unique_sales:
                    unique_sales[sale_id] = sale

            deduplicated_sales = list(unique_sales.values())
            removed_duplicates = len(realizations) - len(deduplicated_sales)
            logger.info(f"   –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–æ {removed_duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        else:
            deduplicated_sales = realizations

        # –†–∞—Å—á–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—É–º–º
        original_forPay = sum(s.get('forPay', 0) for s in deduplicated_sales)
        original_priceWithDisc = sum(s.get('priceWithDisc', 0) for s in deduplicated_sales)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        if self.apply_corrections:
            corrected_forPay = original_forPay * self.CORRECTION_FACTORS['sales_forPay']
            corrected_priceWithDisc = original_priceWithDisc * self.CORRECTION_FACTORS['sales_priceWithDisc']

            logger.info(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è forPay: {original_forPay:,.0f} ‚Üí {corrected_forPay:,.0f} ‚ÇΩ")
            logger.info(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è priceWithDisc: {original_priceWithDisc:,.0f} ‚Üí {corrected_priceWithDisc:,.0f} ‚ÇΩ")
        else:
            corrected_forPay = original_forPay
            corrected_priceWithDisc = original_priceWithDisc

        return {
            'count': len(deduplicated_sales),
            'original_forPay': original_forPay,
            'original_priceWithDisc': original_priceWithDisc,
            'corrected_forPay': corrected_forPay,
            'corrected_priceWithDisc': corrected_priceWithDisc,
            'duplicates_removed': removed_duplicates if self.remove_duplicates else 0
        }

    def process_orders_data(self, raw_orders: List[Dict]) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Orders –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π"""

        logger.info("\nüîß –û–ë–†–ê–ë–û–¢–ö–ê ORDERS –î–ê–ù–ù–´–•:")

        if not raw_orders:
            return {'count': 0, 'revenue_original': 0, 'revenue_corrected': 0}

        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –∫–ª—é—á—É
        if self.remove_duplicates:
            unique_orders = {}
            for order in raw_orders:
                # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                order_key = f"{order.get('date', '')}_{order.get('nmId', '')}_{order.get('priceWithDisc', 0)}"
                if order_key not in unique_orders:
                    unique_orders[order_key] = order

            deduplicated_orders = list(unique_orders.values())
            removed_duplicates = len(raw_orders) - len(deduplicated_orders)
            logger.info(f"   –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: {len(raw_orders)} ‚Üí {len(deduplicated_orders)} (—É–¥–∞–ª–µ–Ω–æ {removed_duplicates})")
        else:
            deduplicated_orders = raw_orders
            removed_duplicates = 0

        # –†–∞—Å—á–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—É–º–º
        original_priceWithDisc = sum(o.get('priceWithDisc', 0) for o in deduplicated_orders)

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        if self.apply_corrections:
            corrected_priceWithDisc = original_priceWithDisc * self.CORRECTION_FACTORS['orders_priceWithDisc']
            logger.info(f"   –ö–æ—Ä—Ä–µ–∫—Ü–∏—è priceWithDisc: {original_priceWithDisc:,.0f} ‚Üí {corrected_priceWithDisc:,.0f} ‚ÇΩ")
        else:
            corrected_priceWithDisc = original_priceWithDisc

        return {
            'count': len(deduplicated_orders),
            'original_priceWithDisc': original_priceWithDisc,
            'corrected_priceWithDisc': corrected_priceWithDisc,
            'duplicates_removed': removed_duplicates
        }

    def calculate_corrected_totals(self, sales_data: Dict, orders_data: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""

        logger.info("\nüìä –ò–¢–û–ì–û–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ Sales –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –≤—ã—Ä—É—á–∫–∏
        corrected_revenue = sales_data.get('corrected_priceWithDisc', 0)
        corrected_units = sales_data.get('count', 0)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if sales_data.get('original_priceWithDisc', 0) > 0:
            commission_ratio = sales_data.get('corrected_priceWithDisc', 0) / sales_data.get('original_priceWithDisc', 1)
        else:
            commission_ratio = self.CORRECTION_FACTORS['sales_priceWithDisc']

        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è WB (24% –æ—Ç –≤—ã—Ä—É—á–∫–∏)
        corrected_commission = corrected_revenue * 0.24

        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 30% –æ—Ç –≤—ã—Ä—É—á–∫–∏)
        corrected_cogs = corrected_revenue * 0.30

        # –ü—Ä–∏–±—ã–ª—å = –≤—ã—Ä—É—á–∫–∞ - –∫–æ–º–∏—Å—Å–∏—è - —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        corrected_profit = corrected_revenue - corrected_commission - corrected_cogs

        result = {
            'revenue': corrected_revenue,
            'units': corrected_units,
            'commission': corrected_commission,
            'cogs': corrected_cogs,
            'profit': corrected_profit,
            'correction_applied': self.apply_corrections,
            'correction_factors': self.CORRECTION_FACTORS,
            'sales_stats': {
                'count': sales_data.get('count', 0),
                'price_with_disc': corrected_revenue,
                'original_price_with_disc': sales_data.get('original_priceWithDisc', 0),
                'duplicates_removed': sales_data.get('duplicates_removed', 0)
            },
            'orders_stats': {
                'count': orders_data.get('count', 0),
                'price_with_disc': orders_data.get('corrected_priceWithDisc', 0),
                'original_price_with_disc': orders_data.get('original_priceWithDisc', 0),
                'duplicates_removed': orders_data.get('duplicates_removed', 0)
            }
        }

        logger.info(f"   üí∞ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {corrected_revenue:,.0f} ‚ÇΩ")
        logger.info(f"   üì¶ –ï–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥–∞–Ω–æ: {corrected_units:,.0f}")
        logger.info(f"   üí≥ –ö–æ–º–∏—Å—Å–∏—è: {corrected_commission:,.0f} ‚ÇΩ")
        logger.info(f"   üí≤ –ü—Ä–∏–±—ã–ª—å: {corrected_profit:,.0f} ‚ÇΩ")

        return result

    def validate_against_expected(self, result: Dict) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""

        logger.info("\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–¢–ò–í –û–ñ–ò–î–ê–ï–ú–´–• –ó–ù–ê–ß–ï–ù–ò–ô:")

        expected_orders = 113595
        expected_delivered = 60688

        corrected_revenue = result.get('revenue', 0)
        corrected_orders_value = result.get('orders_stats', {}).get('price_with_disc', 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        revenue_ratio = corrected_revenue / expected_delivered if expected_delivered > 0 else 0
        orders_ratio = corrected_orders_value / expected_orders if expected_orders > 0 else 0

        validation = {
            'expected_delivered': expected_delivered,
            'corrected_revenue': corrected_revenue,
            'revenue_ratio': revenue_ratio,
            'revenue_match': abs(revenue_ratio - 1.0) < 0.2,  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 20%

            'expected_orders': expected_orders,
            'corrected_orders_value': corrected_orders_value,
            'orders_ratio': orders_ratio,
            'orders_match': abs(orders_ratio - 1.0) < 0.2,  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 20%
        }

        logger.info(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–µ –≤—ã–∫—É–ø—ã: {expected_delivered:,.0f} ‚ÇΩ")
        logger.info(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: {corrected_revenue:,.0f} ‚ÇΩ")
        logger.info(f"   üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {revenue_ratio:.2f} ({'‚úÖ –û–ö' if validation['revenue_match'] else '‚ùå –ù–ï –û–ö'})")

        logger.info(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–∫–∞–∑—ã: {expected_orders:,.0f} ‚ÇΩ")
        logger.info(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {corrected_orders_value:,.0f} ‚ÇΩ")
        logger.info(f"   üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {orders_ratio:.2f} ({'‚úÖ –û–ö' if validation['orders_match'] else '‚ùå –ù–ï –û–ö'})")

        result['validation'] = validation
        return result

class CorrectedFinancialReports(RealDataFinancialReports):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤"""

    def __init__(self):
        super().__init__()
        self.corrected_processor = CorrectedWBDataProcessor()

    async def get_corrected_wb_data(self, date_from: str, date_to: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö WB"""

        result = await self.corrected_processor.get_corrected_wb_data(date_from, date_to)

        if result:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            result = self.corrected_processor.validate_against_expected(result)

        return result

async def test_corrections():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""

    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    logger.info("=" * 50)

    corrected_reports = CorrectedFinancialReports()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —è–Ω–≤–∞—Ä–µ 2025
    date_from = "2025-01-01"
    date_to = "2025-01-31"

    logger.info(f"üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥: {date_from} - {date_to}")

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    corrected_data = await corrected_reports.get_corrected_wb_data(date_from, date_to)

    if corrected_data:
        logger.info("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–ò–ú–ï–ù–ï–ù–´!")

        validation = corrected_data.get('validation', {})
        if validation.get('revenue_match') and validation.get('orders_match'):
            logger.info("‚úÖ –î–ê–ù–ù–´–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –û–ñ–ò–î–ê–ù–ò–Ø–ú!")
        else:
            logger.info("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –±–ª–∏–∑–∫–∏ –∫ –æ–∂–∏–¥–∞–Ω–∏—è–º, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        filename = f"corrected_data_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = f"/root/sovani_bot/reports/{filename}"

        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(corrected_data, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

        return corrected_data
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return None

if __name__ == "__main__":
    result = asyncio.run(test_corrections())
