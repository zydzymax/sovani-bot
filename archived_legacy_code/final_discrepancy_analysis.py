#!/usr/bin/env python3
"""–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –∑–∞–≤—ã—à–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ 10 —Ä–∞–∑
"""

import asyncio
import json
import logging
from datetime import datetime

from real_data_reports import RealDataFinancialReports

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class FinalDiscrepancyAnalyzer:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self):
        self.real_reports = RealDataFinancialReports()

    async def analyze_system_vs_reality(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: –°–ò–°–¢–ï–ú–ê vs –†–ï–ê–õ–¨–ù–û–°–¢–¨")
        logger.info("=" * 60)

        # –î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —è–Ω–≤–∞—Ä—è 2025
        date_from = "2025-01-01"
        date_to = "2025-01-31"

        logger.info(f"üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥: {date_from} - {date_to}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("\nüîç –ü–û–õ–£–ß–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –î–ê–ù–ù–´–•:")
            wb_data = await self.real_reports.get_real_wb_data(date_from, date_to)

            system_revenue = wb_data.get("revenue", 0)
            system_units = wb_data.get("units", 0)
            system_commission = wb_data.get("commission", 0)
            system_profit = wb_data.get("profit", 0)

            orders_stats = wb_data.get("orders_stats", {})
            sales_stats = wb_data.get("sales_stats", {})

            logger.info("   üíª –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:")
            logger.info(f"      üí∞ –í—ã—Ä—É—á–∫–∞: {system_revenue:,.0f} ‚ÇΩ")
            logger.info(f"      üì¶ –ï–¥–∏–Ω–∏—Ü: {system_units:,.0f} —à—Ç")
            logger.info(f"      üõí –ó–∞–∫–∞–∑–æ–≤: {orders_stats.get('count', 0):,.0f}")
            logger.info(f"      ‚úÖ –ü—Ä–æ–¥–∞–∂: {sales_stats.get('count', 0):,.0f}")
            logger.info(f"      üí≥ –ö–æ–º–∏—Å—Å–∏—è: {system_commission:,.0f} ‚ÇΩ")
            logger.info(f"      üí≤ –ü—Ä–∏–±—ã–ª—å: {system_profit:,.0f} ‚ÇΩ")

            # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info("\nüë§ –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
            real_orders_amount = 113595  # –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞
            real_delivered_amount = 60688  # –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞

            logger.info(f"   üìã –ó–∞–∫–∞–∑–∞–Ω–æ –Ω–∞: {real_orders_amount:,.0f} ‚ÇΩ")
            logger.info(f"   ‚úÖ –í—ã–∫—É–ø–ª–µ–Ω–æ –Ω–∞: {real_delivered_amount:,.0f} ‚ÇΩ")

            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
            logger.info("\nüìä –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏
            orders_system = orders_stats.get("price_with_disc", 0)
            orders_ratio = orders_system / real_orders_amount if real_orders_amount > 0 else 0
            orders_diff = orders_system - real_orders_amount

            logger.info("   üõí –ó–ê–ö–ê–ó–´:")
            logger.info(f"      –°–∏—Å—Ç–µ–º–∞: {orders_system:,.0f} ‚ÇΩ")
            logger.info(f"      –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: {real_orders_amount:,.0f} ‚ÇΩ")
            logger.info(f"      –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {orders_ratio:.1f}x")
            logger.info(f"      –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {orders_diff:,.0f} ‚ÇΩ")

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏
            sales_system = sales_stats.get("price_with_disc", 0)
            sales_ratio = sales_system / real_delivered_amount if real_delivered_amount > 0 else 0
            sales_diff = sales_system - real_delivered_amount

            logger.info("   ‚úÖ –ü–†–û–î–ê–ñ–ò/–í–´–ö–£–ü–´:")
            logger.info(f"      –°–∏—Å—Ç–µ–º–∞: {sales_system:,.0f} ‚ÇΩ")
            logger.info(f"      –†–µ–∞–ª—å–Ω–æ—Å—Ç—å: {real_delivered_amount:,.0f} ‚ÇΩ")
            logger.info(f"      –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {sales_ratio:.1f}x")
            logger.info(f"      –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {sales_diff:,.0f} ‚ÇΩ")

            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
            logger.info("\nü§î –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–ô:")

            logger.info("1Ô∏è‚É£ –ü–†–û–ë–õ–ï–ú–´ –° API –î–ê–ù–ù–´–ú–ò:")
            logger.info("   ‚Ä¢ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ API –æ—Ç–≤–µ—Ç–∞—Ö")
            logger.info("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")
            logger.info("   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö/–≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            logger.info("   ‚Ä¢ –û—à–∏–±–∫–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ isRealization")

            logger.info("\n2Ô∏è‚É£ –í–ê–õ–Æ–¢–ù–´–ï/–¶–ï–ù–û–í–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            logger.info("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ (–∫–æ–ø–µ–π–∫–∏ –≤–º–µ—Å—Ç–æ —Ä—É–±–ª–µ–π)")
            logger.info("   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ –ù–î–°/–Ω–∞–ª–æ–≥–æ–≤")
            logger.info("   ‚Ä¢ –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ü–µ–Ω (–æ–ø—Ç–æ–≤—ã–µ vs —Ä–æ–∑–Ω–∏—á–Ω—ã–µ)")

            logger.info("\n3Ô∏è‚É£ –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            logger.info("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã")
            logger.info("   ‚Ä¢ –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤")
            logger.info("   ‚Ä¢ –£—á–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –¥–∞—Ç")

            logger.info("\n4Ô∏è‚É£ –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê:")
            logger.info("   ‚Ä¢ –†–∞–∑–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è '–≤—ã—Ä—É—á–∫–∏'")
            logger.info("   ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–¥–∞–∂")
            logger.info("   ‚Ä¢ –£—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏ –æ—Ç–º–µ–Ω")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")

            logger.info("1Ô∏è‚É£ –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            logger.info("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
            logger.info("   ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—ã—Ä—ã—Ö API –¥–∞–Ω–Ω—ã—Ö")
            logger.info("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª—é—Ç—É –≤ API –æ—Ç–≤–µ—Ç–∞—Ö")
            logger.info("   ‚úÖ –°—Ä–∞–≤–Ω–∏—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ WB")

            logger.info("\n2Ô∏è‚É£ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
            logger.info("   üîß –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∑–∞–ø–∏—Å–µ–π")
            logger.info("   üîß –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
            logger.info("   üîß –£–ª—É—á—à–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
            logger.info("   üîß –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

            logger.info("\n3Ô∏è‚É£ –ö–û–ù–¢–†–û–õ–¨ –ö–ê–ß–ï–°–¢–í–ê:")
            logger.info("   üìã –°–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
            logger.info("   üìã –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
            logger.info("   üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            logger.info("   üìã –†—É—á–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–∫")

            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            correction_factor_orders = (
                real_orders_amount / orders_system if orders_system > 0 else 0
            )
            correction_factor_sales = (
                real_delivered_amount / sales_system if sales_system > 0 else 0
            )

            logger.info("\n‚öôÔ∏è –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò:")
            logger.info(f"   üõí –î–ª—è –∑–∞–∫–∞–∑–æ–≤: {correction_factor_orders:.4f}")
            logger.info(f"   ‚úÖ –î–ª—è –ø—Ä–æ–¥–∞–∂: {correction_factor_sales:.4f}")

            # –ü–µ—Ä–µ—Å—á–µ—Ç –≥–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("\nüìà –ü–ï–†–ï–°–ß–ï–¢ –ì–û–î–û–í–´–• –ü–†–û–ì–ù–û–ó–û–í:")

            corrected_annual_orders = real_orders_amount * 9  # 9 –º–µ—Å—è—Ü–µ–≤
            corrected_annual_sales = real_delivered_amount * 9

            logger.info(
                f"   üõí –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–∫–∞–∑–æ–≤: {corrected_annual_orders:,.0f} ‚ÇΩ"
            )
            logger.info(f"   ‚úÖ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂: {corrected_annual_sales:,.0f} ‚ÇΩ")
            logger.info("   üéØ –û–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 530,000 ‚ÇΩ")
            logger.info(f"   üìä –ù–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: {corrected_annual_sales/530000:.1f}x")

            return {
                "system_data": {
                    "revenue": system_revenue,
                    "units": system_units,
                    "orders_amount": orders_system,
                    "sales_amount": sales_system,
                },
                "real_data": {
                    "orders_amount": real_orders_amount,
                    "delivered_amount": real_delivered_amount,
                },
                "discrepancies": {
                    "orders_ratio": orders_ratio,
                    "sales_ratio": sales_ratio,
                    "orders_diff": orders_diff,
                    "sales_diff": sales_diff,
                },
                "correction_factors": {
                    "orders": correction_factor_orders,
                    "sales": correction_factor_sales,
                },
                "corrected_projections": {
                    "annual_orders": corrected_annual_orders,
                    "annual_sales": corrected_annual_sales,
                    "vs_expectations": corrected_annual_sales / 530000,
                },
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None

    def create_configuration_recommendations(self, analysis_result):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("\n‚öôÔ∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –°–ò–°–¢–ï–ú–´:")
        logger.info("=" * 50)

        config_recommendations = {
            "immediate_fixes": {
                "data_validation": [
                    "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ —Å—É–º–º (–º–∞–∫—Å. –ª–∏–º–∏—Ç—ã)",
                    "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã –≤ API –æ—Ç–≤–µ—Ç–∞—Ö",
                    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π",
                    "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏",
                ],
                "api_improvements": [
                    "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—ã—Ä—ã—Ö API –æ—Ç–≤–µ—Ç–æ–≤",
                    "–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID",
                    "–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API",
                    "Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–±–æ–µ–≤",
                ],
            },
            "methodology_changes": {
                "calculation_method": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∫—É–ø—ã (Sales API + isRealization)",
                "price_field": "priceWithDisc (—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏)",
                "aggregation": "–°—É–º–º–∞ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
                "validation": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
            },
            "monitoring": {
                "alerts": [
                    "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å—É–º–º –±–æ–ª–µ–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞",
                    "–ù—É–ª–µ–≤—ã–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
                    "–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏",
                ],
                "reports": [
                    "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö",
                    "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞",
                    "–¢—Ä–µ–Ω–¥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
                ],
            },
        }

        for category, items in config_recommendations.items():
            logger.info(f"\nüîß {category.upper().replace('_', ' ')}:")
            if isinstance(items, dict):
                for key, value in items.items():
                    if isinstance(value, list):
                        logger.info(f"   {key}:")
                        for item in value:
                            logger.info(f"      ‚Ä¢ {item}")
                    else:
                        logger.info(f"   {key}: {value}")
            else:
                for item in items:
                    logger.info(f"   ‚Ä¢ {item}")

        return config_recommendations

    def save_final_report(self, analysis_result, config_recommendations):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        final_report = {
            "report_date": datetime.now().isoformat(),
            "analysis_type": "final_discrepancy_analysis",
            "period_analyzed": "2025-01-01 to 2025-01-31",
            "key_findings": {
                "system_overcounting": "–°–∏—Å—Ç–µ–º–∞ –∑–∞–≤—ã—à–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ 9-10 —Ä–∞–∑",
                "primary_issue": "–ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ API –¥–∞–Ω–Ω—ã—Ö",
                "correction_needed": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏",
            },
            "analysis_result": analysis_result,
            "configuration_recommendations": config_recommendations,
            "next_steps": [
                "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å—ã—Ä—ã–µ API –æ—Ç–≤–µ—Ç—ã –æ—Ç WB",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö",
                "–°—Ä–∞–≤–Ω–∏—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞",
                "–í–Ω–µ–¥—Ä–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏",
                "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö",
            ],
        }

        filename = f"final_discrepancy_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        filepath = f"/root/sovani_bot/reports/{filename}"

        try:
            with open(filepath, "w", encoding="utf-8") as f:
                json.dump(final_report, f, ensure_ascii=False, indent=2)

            logger.info(f"\nüíæ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–û–•–†–ê–ù–ï–ù: {filepath}")
            return filepath

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = FinalDiscrepancyAnalyzer()

    logger.info("üéØ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –†–ê–°–•–û–ñ–î–ï–ù–ò–ô")

    # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ç–∏–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
    analysis_result = await analyzer.analyze_system_vs_reality()

    if analysis_result:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        config_recommendations = analyzer.create_configuration_recommendations(analysis_result)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_path = analyzer.save_final_report(analysis_result, config_recommendations)

        logger.info("\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        logger.info("üìã –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤—ã—à–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ 9-10 —Ä–∞–∑")
        logger.info("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        logger.info(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_path}")

        return analysis_result, config_recommendations
    else:
        logger.error("‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
        return None, None


if __name__ == "__main__":
    result, config = asyncio.run(main())
