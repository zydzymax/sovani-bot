"""
üîç –ú–û–î–£–õ–¨ –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–• - –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–æ–≤.
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã.
"""

import logging
from typing import Dict, List, Any, Tuple, Optional
from datetime import datetime, date
import re

logger = logging.getLogger(__name__)

class DataValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤"""

    def __init__(self):
        self.errors = []
        self.warnings = []

    def validate_financial_data(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö WB –∏ Ozon

        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

        Returns:
            Tuple[bool, List[str]]: (is_valid, error_messages)
        """
        self.errors = []

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        required_keys = ['wb_data', 'ozon_data']
        for key in required_keys:
            if key not in data:
                self.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {key}")

        if self.errors:
            return False, self.errors

        # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö WB
        wb_valid, wb_errors = self._validate_wb_data(data['wb_data'])
        if not wb_valid:
            self.errors.extend([f"WB: {err}" for err in wb_errors])

        # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Ozon
        ozon_valid, ozon_errors = self._validate_ozon_data(data['ozon_data'])
        if not ozon_valid:
            self.errors.extend([f"Ozon: {err}" for err in ozon_errors])

        # 4. –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        cross_valid, cross_errors = self._cross_validate_data(data)
        if not cross_valid:
            self.errors.extend(cross_errors)

        return len(self.errors) == 0, self.errors

    def _validate_wb_data(self, wb_data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö WB"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã WB –¥–∞–Ω–Ω—ã—Ö
        expected_keys = ['sales', 'orders', 'supplies', 'stocks', 'advertising']

        for key in expected_keys:
            if key not in wb_data:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è {key}")
                continue

            if not isinstance(wb_data[key], list):
                errors.append(f"–°–µ–∫—Ü–∏—è {key} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è sales
        if 'sales' in wb_data:
            sales_valid, sales_errors = self._validate_wb_sales(wb_data['sales'])
            errors.extend(sales_errors)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è orders
        if 'orders' in wb_data:
            orders_valid, orders_errors = self._validate_wb_orders(wb_data['orders'])
            errors.extend(orders_errors)

        return len(errors) == 0, errors

    def _validate_wb_sales(self, sales: List[Dict[str, Any]]) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂ WB"""
        errors = []

        for i, sale in enumerate(sales):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['date', 'saleID', 'forPay']
            for field in required_fields:
                if field not in sale:
                    errors.append(f"Sale {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if 'forPay' in sale:
                if not isinstance(sale['forPay'], (int, float)):
                    errors.append(f"Sale {i}: forPay –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ {type(sale['forPay'])}")
                elif sale['forPay'] < 0:
                    errors.append(f"Sale {i}: forPay –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º: {sale['forPay']}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
            if 'date' in sale:
                date_valid, date_error = self._validate_date_format(sale['date'])
                if not date_valid:
                    errors.append(f"Sale {i}: {date_error}")

        return len(errors) == 0, errors

    def _validate_wb_orders(self, orders: List[Dict[str, Any]]) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ WB"""
        errors = []

        for i, order in enumerate(orders):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['date', 'odid', 'totalPrice']
            for field in required_fields:
                if field not in order:
                    errors.append(f"Order {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
            if 'totalPrice' in order:
                if not isinstance(order['totalPrice'], (int, float)):
                    errors.append(f"Order {i}: totalPrice –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                elif order['totalPrice'] < 0:
                    errors.append(f"Order {i}: totalPrice –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")

        return len(errors) == 0, errors

    def _validate_ozon_data(self, ozon_data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Ozon"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Ozon –¥–∞–Ω–Ω—ã—Ö
        expected_keys = ['fbo', 'fbs']

        for key in expected_keys:
            if key not in ozon_data:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è {key}")
                continue

            if not isinstance(ozon_data[key], list):
                errors.append(f"–°–µ–∫—Ü–∏—è {key} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è FBO –¥–∞–Ω–Ω—ã—Ö
        if 'fbo' in ozon_data:
            fbo_valid, fbo_errors = self._validate_ozon_orders(ozon_data['fbo'], 'FBO')
            errors.extend(fbo_errors)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è FBS –¥–∞–Ω–Ω—ã—Ö
        if 'fbs' in ozon_data:
            fbs_valid, fbs_errors = self._validate_ozon_orders(ozon_data['fbs'], 'FBS')
            errors.extend(fbs_errors)

        return len(errors) == 0, errors

    def _validate_ozon_orders(self, orders: List[Dict[str, Any]], order_type: str) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ Ozon (FBO/FBS)"""
        errors = []

        for i, order in enumerate(orders):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–∫–∞–∑–∞
            if not isinstance(order, dict):
                errors.append(f"{order_type} {i}: –∑–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['posting_number', 'status', 'in_process_at']
            for field in required_fields:
                if field not in order:
                    errors.append(f"{order_type} {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
            if 'products' in order:
                if not isinstance(order['products'], list):
                    errors.append(f"{order_type} {i}: products –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                else:
                    for j, product in enumerate(order['products']):
                        if 'price' in product:
                            if not isinstance(product['price'], (str, int, float)):
                                errors.append(f"{order_type} {i} product {j}: price –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π")

        return len(errors) == 0, errors

    def _cross_validate_data(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏"""
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç
        wb_dates = self._extract_dates_from_wb(data.get('wb_data', {}))
        ozon_dates = self._extract_dates_from_ozon(data.get('ozon_data', {}))

        if wb_dates and ozon_dates:
            wb_min, wb_max = min(wb_dates), max(wb_dates)
            ozon_min, ozon_max = min(ozon_dates), max(ozon_dates)

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö –≤ –¥–∞—Ç–∞—Ö
            from datetime import timedelta
            if abs(wb_min - ozon_min) > timedelta(days=7):
                errors.append(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Ö: WB {wb_min}, Ozon {ozon_min}")

        return len(errors) == 0, errors

    def _validate_date_format(self, date_str: str) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"""
        if not isinstance(date_str, str):
            return False, f"–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ {type(date_str)}"

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        date_patterns = [
            r'^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}',  # ISO with time
            r'^\d{4}-\d{2}-\d{2}$',  # ISO date only
            r'^\d{2}\.\d{2}\.\d{4}$',  # DD.MM.YYYY
        ]

        for pattern in date_patterns:
            if re.match(pattern, date_str):
                return True, ""

        return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}"

    def _extract_dates_from_wb(self, wb_data: Dict[str, Any]) -> List[date]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö WB"""
        dates = []

        for section in ['sales', 'orders']:
            if section in wb_data:
                for item in wb_data[section]:
                    if 'date' in item:
                        try:
                            # –ü–∞—Ä—Å–∏–Ω–≥ ISO –¥–∞—Ç—ã
                            date_str = item['date']
                            if 'T' in date_str:
                                parsed_date = datetime.fromisoformat(date_str.split('T')[0]).date()
                            else:
                                parsed_date = datetime.fromisoformat(date_str).date()
                            dates.append(parsed_date)
                        except:
                            continue

        return dates

    def _extract_dates_from_ozon(self, ozon_data: Dict[str, Any]) -> List[date]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö Ozon"""
        dates = []

        for section in ['fbo', 'fbs']:
            if section in ozon_data:
                for item in ozon_data[section]:
                    if 'in_process_at' in item:
                        try:
                            # –ü–∞—Ä—Å–∏–Ω–≥ ISO –¥–∞—Ç—ã
                            date_str = item['in_process_at']
                            if 'T' in date_str:
                                parsed_date = datetime.fromisoformat(date_str.split('T')[0]).date()
                            else:
                                parsed_date = datetime.fromisoformat(date_str).date()
                            dates.append(parsed_date)
                        except:
                            continue

        return dates

    def get_validation_summary(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        is_valid, errors = self.validate_financial_data(data)

        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        wb_stats = self._get_wb_stats(data.get('wb_data', {}))
        ozon_stats = self._get_ozon_stats(data.get('ozon_data', {}))

        return {
            'is_valid': is_valid,
            'errors_count': len(errors),
            'errors': errors,
            'wb_stats': wb_stats,
            'ozon_stats': ozon_stats,
            'total_revenue': wb_stats.get('total_revenue', 0) + ozon_stats.get('total_revenue', 0),
            'validation_timestamp': datetime.now().isoformat()
        }

    def _get_wb_stats(self, wb_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö WB"""
        stats = {
            'sales_count': len(wb_data.get('sales', [])),
            'orders_count': len(wb_data.get('orders', [])),
            'total_revenue': sum(sale.get('forPay', 0) for sale in wb_data.get('sales', []) if isinstance(sale.get('forPay'), (int, float)))
        }
        return stats

    def _get_ozon_stats(self, ozon_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö Ozon"""
        total_revenue = 0
        total_orders = 0

        for section in ['fbo', 'fbs']:
            if section in ozon_data:
                orders = ozon_data[section]
                total_orders += len(orders)

                # –ü–æ–¥—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
                for order in orders:
                    if isinstance(order, dict) and 'products' in order:
                        for product in order['products']:
                            if isinstance(product, dict) and 'price' in product:
                                try:
                                    price = float(product['price'])
                                    total_revenue += price
                                except:
                                    continue

        stats = {
            'fbo_count': len(ozon_data.get('fbo', [])),
            'fbs_count': len(ozon_data.get('fbs', [])),
            'total_orders': total_orders,
            'total_revenue': total_revenue
        }
        return stats

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
validator = DataValidator()

def validate_data_before_aggregation(data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π

    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    logger.info("üîç –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    try:
        summary = validator.get_validation_summary(data)

        if summary['is_valid']:
            logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! WB: {summary['wb_stats']['sales_count']} –ø—Ä–æ–¥–∞–∂, Ozon: {summary['ozon_stats']['total_orders']} –∑–∞–∫–∞–∑–æ–≤")
            logger.info(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {summary['total_revenue']:.2f} ‚ÇΩ")
        else:
            logger.error(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {summary['errors_count']} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in summary['errors']:
                logger.error(f"   ‚Ä¢ {error}")

        return summary

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return {
            'is_valid': False,
            'errors_count': 1,
            'errors': [f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"],
            'validation_timestamp': datetime.now().isoformat()
        }