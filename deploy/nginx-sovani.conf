# Nginx configuration for SoVAni TMA + API
# Install to: /etc/nginx/sites-available/sovani
# Symlink: ln -s /etc/nginx/sites-available/sovani /etc/nginx/sites-enabled/sovani

# API backend upstream
upstream sovani_api {
    server 127.0.0.1:8080;
}

server {
    listen 80;
    server_name your-domain.com;  # Replace with your actual domain

    # Logging
    access_log /var/log/nginx/sovani-access.log;
    error_log /var/log/nginx/sovani-error.log;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # API endpoints - reverse proxy to FastAPI backend
    location /api/ {
        proxy_pass http://sovani_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS headers (if needed for TMA)
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Telegram-Init-Data" always;

        # Handle preflight requests
        if ($request_method = OPTIONS) {
            return 204;
        }

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check endpoint
    location /health {
        proxy_pass http://sovani_api;
        access_log off;
    }

    # TMA static files (built React app)
    location / {
        root /root/sovani_bot/tma/dist;
        index index.html;
        try_files $uri $uri/ /index.html;

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
    }
}

# Optional: SSL/HTTPS configuration (using Let's Encrypt)
# Uncomment and configure after obtaining SSL certificate
#
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#
#     ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#
#     # ... (rest of the config same as above)
# }
#
# server {
#     listen 80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }
