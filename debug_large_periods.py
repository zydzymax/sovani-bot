"""üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ë–û–õ–¨–®–ò–ú–ò –ü–ï–†–ò–û–î–ê–ú–ò

–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (01.01.2025 - —Å–µ–≥–æ–¥–Ω—è)
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("/root/sovani_bot/debug_large_periods.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger(__name__)


class LargePeriodDebugger:
    """–û—Ç–ª–∞–¥—á–∏–∫ –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å –±–æ–ª—å—à–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.debug_data = {
            "api_calls": [],
            "chunk_results": [],
            "aggregation_steps": [],
            "final_results": {},
        }

    async def diagnose_large_period_issue(
        self, date_from: str = "2025-01-01", date_to: str = "2025-09-24"
    ):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ–ª—å—à–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏"""
        logger.critical("üö® –ù–ê–ß–ê–õ–û –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        logger.critical(f"üîç –ü–µ—Ä–∏–æ–¥: {date_from} -> {date_to}")

        # 1. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
        logger.critical("=" * 80)
        logger.critical("1Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
        logger.critical("=" * 80)

        api_status = await self._diagnose_api_connections()
        self.debug_data["api_status"] = api_status

        # 2. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CHUNKING –õ–û–ì–ò–ö–ò
        logger.critical("=" * 80)
        logger.critical("2Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CHUNKING –õ–û–ì–ò–ö–ò")
        logger.critical("=" * 80)

        chunking_analysis = await self._diagnose_chunking_logic(date_from, date_to)
        self.debug_data["chunking_analysis"] = chunking_analysis

        # 3. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–Ø–ú–´–• API –ó–ê–ü–†–û–°–û–í
        logger.critical("=" * 80)
        logger.critical("3Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–Ø–ú–´–• API –ó–ê–ü–†–û–°–û–í")
        logger.critical("=" * 80)

        direct_api_results = await self._diagnose_direct_api_calls(date_from, date_to)
        self.debug_data["direct_api_results"] = direct_api_results

        # 4. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê STAGED PROCESSOR
        logger.critical("=" * 80)
        logger.critical("4Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê STAGED PROCESSOR")
        logger.critical("=" * 80)

        staged_results = await self._diagnose_staged_processor(date_from, date_to)
        self.debug_data["staged_results"] = staged_results

        # 5. –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
        logger.critical("=" * 80)
        logger.critical("5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´")
        logger.critical("=" * 80)

        analysis = self._analyze_root_cause()

        return analysis

    async def _diagnose_api_connections(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        results = {}

        try:
            from config import Config

            logger.debug(f"WB_FEEDBACKS_TOKEN length: {len(Config.WB_FEEDBACKS_TOKEN)}")
            logger.debug(f"WB_ADS_TOKEN length: {len(Config.WB_ADS_TOKEN)}")
            logger.debug(f"WB_STATS_TOKEN length: {len(Config.WB_STATS_TOKEN)}")
            logger.debug(f"OZON_CLIENT_ID: {Config.OZON_CLIENT_ID}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ WB API
            from api_clients_main import WBBusinessAPI

            wb_client = WBBusinessAPI()

            logger.debug("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º WB API...")
            wb_campaigns = await wb_client.get_advertising_campaigns()
            results["wb_campaigns_count"] = len(wb_campaigns.get("campaigns", []))
            logger.debug(f"WB –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {results['wb_campaigns_count']}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ozon API
            from api_clients_main import OzonAPI

            ozon_client = OzonAPI()
            logger.debug("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º Ozon API...")

            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            results["ozon_client_id"] = ozon_client.CLIENT_ID
            logger.debug(f"Ozon Client ID: {results['ozon_client_id']}")

            results["api_connections_ok"] = True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
            results["api_connections_ok"] = False
            results["error"] = str(e)

        return results

    async def _diagnose_chunking_logic(self, date_from: str, date_to: str):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏"""
        results = {}

        try:
            from api_chunking import APIChunker

            chunker = APIChunker()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º chunking –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
            for api_type in ["wb_sales", "wb_orders", "wb_advertising", "ozon_fbo", "ozon_fbs"]:
                logger.debug(f"üìä –ê–Ω–∞–ª–∏–∑ chunking –¥–ª—è {api_type}")

                chunks = chunker.split_date_range(date_from, date_to, api_type)
                logger.debug(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")

                results[api_type] = {"chunk_count": len(chunks), "chunks": chunks}

                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
                for i, (chunk_from, chunk_to) in enumerate(chunks):
                    days_in_chunk = (
                        datetime.strptime(chunk_to, "%Y-%m-%d")
                        - datetime.strptime(chunk_from, "%Y-%m-%d")
                    ).days
                    logger.debug(
                        f"   –ß–∞–Ω–∫ {i+1}: {chunk_from} -> {chunk_to} ({days_in_chunk} –¥–Ω–µ–π)"
                    )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ chunking –∞–Ω–∞–ª–∏–∑–∞: {e}")
            results["error"] = str(e)

        return results

    async def _diagnose_direct_api_calls(self, date_from: str, date_to: str):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ API"""
        results = {}

        try:
            logger.debug("üîç –ü–†–Ø–ú–´–ï –ó–ê–ü–†–û–°–´ –ö API")

            # 1. –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å WB Sales
            logger.debug("üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º WB Sales API...")
            wb_sales_result = await self._test_wb_sales_direct(date_from, date_to)
            results["wb_sales"] = wb_sales_result

            # 2. –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å WB Orders
            logger.debug("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º WB Orders API...")
            wb_orders_result = await self._test_wb_orders_direct(date_from, date_to)
            results["wb_orders"] = wb_orders_result

            # 3. –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å Ozon FBO
            logger.debug("üè™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Ozon FBO API...")
            ozon_fbo_result = await self._test_ozon_fbo_direct(date_from, date_to)
            results["ozon_fbo"] = ozon_fbo_result

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            results["error"] = str(e)

        return results

    async def _test_wb_sales_direct(self, date_from: str, date_to: str):
        """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç WB Sales API"""
        try:
            from api_clients.wb.sales_client import WBSalesAPI
            from config import Config

            client = WBSalesAPI(Config.WB_STATS_TOKEN)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω –Ω–µ–±–æ–ª—å—à–æ–π —á–∞–Ω–∫
            test_chunk_to = (
                datetime.strptime(date_from, "%Y-%m-%d") + timedelta(days=30)
            ).strftime("%Y-%m-%d")

            logger.debug(f"   –ó–∞–ø—Ä–æ—Å WB Sales: {date_from} -> {test_chunk_to}")

            sales_data = await client.get_sales_data(date_from, test_chunk_to)

            result = {
                "success": True,
                "sales_count": len(sales_data) if sales_data else 0,
                "sample_data": sales_data[:3] if sales_data else [],
                "total_revenue": (
                    sum(sale.get("forPay", 0) for sale in sales_data) if sales_data else 0
                ),
            }

            logger.debug(
                f"   ‚úÖ WB Sales —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['sales_count']} –ø—Ä–æ–¥–∞–∂, {result['total_revenue']} ‚ÇΩ"
            )

            return result

        except Exception as e:
            logger.error(f"   ‚ùå WB Sales –æ—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}

    async def _test_wb_orders_direct(self, date_from: str, date_to: str):
        """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç WB Orders API"""
        try:
            from api_clients.wb.orders_client import WBOrdersAPI
            from config import Config

            client = WBOrdersAPI(Config.WB_STATS_TOKEN)

            test_chunk_to = (
                datetime.strptime(date_from, "%Y-%m-%d") + timedelta(days=30)
            ).strftime("%Y-%m-%d")

            logger.debug(f"   –ó–∞–ø—Ä–æ—Å WB Orders: {date_from} -> {test_chunk_to}")

            orders_data = await client.get_orders_data(date_from, test_chunk_to)

            result = {
                "success": True,
                "orders_count": len(orders_data) if orders_data else 0,
                "sample_data": orders_data[:3] if orders_data else [],
            }

            logger.debug(f"   ‚úÖ WB Orders —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['orders_count']} –∑–∞–∫–∞–∑–æ–≤")

            return result

        except Exception as e:
            logger.error(f"   ‚ùå WB Orders –æ—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}

    async def _test_ozon_fbo_direct(self, date_from: str, date_to: str):
        """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Ozon FBO API"""
        try:
            from api_clients.ozon.sales_client import OzonSalesAPI

            client = OzonSalesAPI()

            test_chunk_to = (
                datetime.strptime(date_from, "%Y-%m-%d") + timedelta(days=30)
            ).strftime("%Y-%m-%d")

            logger.debug(f"   –ó–∞–ø—Ä–æ—Å Ozon FBO: {date_from} -> {test_chunk_to}")

            fbo_data = await client.get_fbo_orders(date_from, test_chunk_to)

            result = {
                "success": True,
                "orders_count": len(fbo_data) if fbo_data else 0,
                "sample_data": fbo_data[:3] if fbo_data else [],
            }

            logger.debug(f"   ‚úÖ Ozon FBO —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['orders_count']} –∑–∞–∫–∞–∑–æ–≤")

            return result

        except Exception as e:
            logger.error(f"   ‚ùå Ozon FBO –æ—à–∏–±–∫–∞: {e}")
            return {"success": False, "error": str(e)}

    async def _diagnose_staged_processor(self, date_from: str, date_to: str):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Staged Processor"""
        results = {}

        try:
            from staged_processor import StagedDataProcessor

            logger.debug("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Staged Processor...")

            processor = StagedDataProcessor()

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            job_id = f"debug_{datetime.now().strftime('%H%M%S')}"

            logger.debug(f"   –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {job_id}")
            logger.debug(f"   –ü–µ—Ä–∏–æ–¥: {date_from} -> {date_to}")

            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            results = {
                "processor_available": True,
                "job_id": job_id,
                "period": f"{date_from} -> {date_to}",
                "note": "–ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è",
            }

            logger.debug("   ‚úÖ Staged Processor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        except Exception as e:
            logger.error(f"   ‚ùå Staged Processor –æ—à–∏–±–∫–∞: {e}")
            results = {"success": False, "error": str(e)}

        return results

    def _analyze_root_cause(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã"""
        logger.critical("üîç –ê–ù–ê–õ–ò–ó –ö–û–†–ù–ï–í–û–ô –ü–†–ò–ß–ò–ù–´")

        issues_found = []
        recommendations = []

        # –ê–Ω–∞–ª–∏–∑ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if not self.debug_data.get("api_status", {}).get("api_connections_ok", False):
            issues_found.append("‚ùå API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API")

        # –ê–Ω–∞–ª–∏–∑ chunking
        chunking_data = self.debug_data.get("chunking_analysis", {})
        for api_type, data in chunking_data.items():
            if isinstance(data, dict) and data.get("chunk_count", 0) > 20:
                issues_found.append(
                    f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è {api_type}: {data.get('chunk_count')}"
                )
                recommendations.append(f"–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –¥–ª—è {api_type}")

        # –ê–Ω–∞–ª–∏–∑ API —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        api_results = self.debug_data.get("direct_api_results", {})
        for api_name, result in api_results.items():
            if isinstance(result, dict):
                if not result.get("success", False):
                    issues_found.append(f"‚ùå {api_name} API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")
                    recommendations.append(f"–ò—Å–ø—Ä–∞–≤–∏—Ç—å {api_name} API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
                elif result.get("sales_count", 0) == 0 and result.get("orders_count", 0) == 0:
                    issues_found.append(f"‚ö†Ô∏è {api_name} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    recommendations.append(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è {api_name}")

        logger.critical(f"üö® –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: {len(issues_found)}")
        for issue in issues_found:
            logger.critical(f"   {issue}")

        logger.critical(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: {len(recommendations)}")
        for rec in recommendations:
            logger.critical(f"   {rec}")

        return {
            "issues_found": issues_found,
            "recommendations": recommendations,
            "debug_data": self.debug_data,
            "root_cause_identified": len(issues_found) > 0,
        }

    def save_debug_report(self, analysis_result):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        report_path = "/root/sovani_bot/debug_report.json"

        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(analysis_result, f, ensure_ascii=False, indent=2, default=str)

        logger.critical(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    debugger = LargePeriodDebugger()

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ —Å 01.01.2025 –ø–æ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime("%Y-%m-%d")

    analysis = await debugger.diagnose_large_period_issue("2025-01-01", today)

    debugger.save_debug_report(analysis)

    return analysis


if __name__ == "__main__":
    results = asyncio.run(main())
    print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
