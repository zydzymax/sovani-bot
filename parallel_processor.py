#!/usr/bin/env python3
"""–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å—á–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import logging
import time
from datetime import datetime
from typing import Any

logger = logging.getLogger(__name__)


class ParallelDataProcessor:
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö WB –∏ Ozon"""

    def __init__(self, real_data_reports):
        self.real_data_reports = real_data_reports

    async def get_parallel_financial_data(
        self, date_from: str, date_to: str, platform_filter: str = "both"
    ) -> dict[str, Any]:
        """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å

        Args:
            date_from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ YYYY-MM-DD
            date_to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ YYYY-MM-DD
            platform_filter: "wb", "ozon", –∏–ª–∏ "both" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)

        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ WB, Ozon –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏

        """
        start_time = time.time()
        logger.info(
            f"üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –∑–∞ {date_from} - {date_to}, –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform_filter}"
        )

        try:
            # –°–û–ó–î–ê–ï–ú –ó–ê–î–ê–ß–ò –ù–ê –û–°–ù–û–í–ï –§–ò–õ–¨–¢–†–ê –ü–õ–ê–¢–§–û–†–ú
            tasks = []
            task_names = []

            if platform_filter in ["wb", "both"]:
                wb_task = asyncio.create_task(
                    self.real_data_reports.get_real_wb_data(date_from, date_to)
                )
                tasks.append(wb_task)
                task_names.append("wb")

            if platform_filter in ["ozon", "both"]:
                ozon_task = asyncio.create_task(
                    self.real_data_reports.get_real_ozon_sales(date_from, date_to)
                )
                tasks.append(ozon_task)
                task_names.append("ozon")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            expenses_task = asyncio.create_task(self._prepare_expenses_data())
            tasks.append(expenses_task)
            task_names.append("expenses")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á: {', '.join(task_names)}")

            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            wb_data = {"revenue": 0, "units": 0, "cogs": 0, "commission": 0, "profit": 0}
            ozon_data = {"revenue": 0, "units": 0, "cogs": 0, "commission": 0, "profit": 0}
            expenses_data = {"opex": 0, "expenses_count": 0, "expenses_detail": []}

            result_index = 0
            if platform_filter in ["wb", "both"]:
                wb_data = (
                    results[result_index]
                    if not isinstance(results[result_index], Exception)
                    else wb_data
                )
                if isinstance(results[result_index], Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ WB –¥–∞–Ω–Ω—ã—Ö: {results[result_index]}")
                result_index += 1

            if platform_filter in ["ozon", "both"]:
                ozon_data = (
                    results[result_index]
                    if not isinstance(results[result_index], Exception)
                    else ozon_data
                )
                if isinstance(results[result_index], Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ Ozon –¥–∞–Ω–Ω—ã—Ö: {results[result_index]}")
                result_index += 1

            expenses_data = (
                results[result_index]
                if not isinstance(results[result_index], Exception)
                else expenses_data
            )
            if isinstance(results[result_index], Exception):
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {results[result_index]}")

            # –î–∞–Ω–Ω—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ

            elapsed = time.time() - start_time
            logger.info(f"‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ {elapsed:.1f}—Å")

            return {
                "wb": wb_data,
                "ozon": ozon_data,
                "expenses": expenses_data,
                "processing_time": elapsed,
                "parallelized": True,
                "platform_filter": platform_filter,
            }

        except Exception as e:
            elapsed = time.time() - start_time
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

            # Fallback –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            return await self._fallback_sequential_processing(
                date_from, date_to, elapsed, platform_filter
            )

    async def _prepare_expenses_data(self) -> dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö (–±—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            revenue_data = {"wb": 0, "ozon": 0, "total": 0}  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
            units_sold = {"wb": 0, "ozon": 0, "total": 0}
            orders_count = {"wb": 0, "ozon": 0, "total": 0}

            expenses_result = await self.real_data_reports.get_real_expenses(
                revenue_data, units_sold, orders_count
            )

            return expenses_result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            return {"opex": 0, "expenses_count": 0, "expenses_detail": []}

    async def _fallback_sequential_processing(
        self, date_from: str, date_to: str, failed_time: float, platform_filter: str = "both"
    ) -> dict[str, Any]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        start_time = time.time()

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            wb_data = {"revenue": 0, "units": 0, "cogs": 0, "commission": 0, "profit": 0}
            ozon_data = {"revenue": 0, "units": 0, "cogs": 0, "commission": 0, "profit": 0}

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            if platform_filter in ["wb", "both"]:
                wb_data = await self.real_data_reports.get_real_wb_data(date_from, date_to)

            if platform_filter in ["ozon", "both"]:
                ozon_data = await self.real_data_reports.get_real_ozon_sales(date_from, date_to)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            revenue_data = {
                "wb": wb_data.get("revenue", 0),
                "ozon": ozon_data.get("revenue", 0),
                "total": wb_data.get("revenue", 0) + ozon_data.get("revenue", 0),
            }
            units_sold = {
                "wb": wb_data.get("units", 0),
                "ozon": ozon_data.get("units", 0),
                "total": wb_data.get("units", 0) + ozon_data.get("units", 0),
            }
            orders_count = {"wb": 0, "ozon": 0, "total": 0}

            expenses_data = await self.real_data_reports.get_real_expenses(
                revenue_data, units_sold, orders_count
            )

            elapsed = time.time() - start_time
            total_time = failed_time + elapsed

            logger.info(
                f"‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed:.1f}—Å (–æ–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}—Å)"
            )

            return {
                "wb": wb_data,
                "ozon": ozon_data,
                "expenses": expenses_data,
                "processing_time": total_time,
                "parallelized": False,
                "platform_filter": platform_filter,
            }

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return {
                "wb": {"revenue": 0, "units": 0, "cogs": 0, "commission": 0, "profit": 0},
                "ozon": {"revenue": 0, "units": 0, "cogs": 0, "commission": 0, "profit": 0},
                "expenses": {"opex": 0, "expenses_count": 0, "expenses_detail": []},
                "processing_time": time.time() - start_time + failed_time,
                "parallelized": False,
                "platform_filter": platform_filter,
                "error": str(e),
            }

    async def get_optimized_chunked_data(
        self, date_from: str, date_to: str, platform_filter: str = "both"
    ) -> dict[str, Any]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å chunking –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å

        –û—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        """
        start_time = time.time()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        start_date = datetime.strptime(date_from, "%Y-%m-%d")
        end_date = datetime.strptime(date_to, "%Y-%m-%d")
        period_days = (end_date - start_date).days

        logger.info(f"üî• –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê {period_days} –¥–Ω–µ–π...")

        if period_days <= 7:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—é
            return await self.get_parallel_financial_data(date_from, date_to, platform_filter)

        else:
            # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º chunked API –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å
            return await self._parallel_chunked_processing(
                date_from, date_to, period_days, platform_filter
            )

    async def _parallel_chunked_processing(
        self, date_from: str, date_to: str, period_days: int, platform_filter: str = "both"
    ) -> dict[str, Any]:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å chunking –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
        start_time = time.time()

        logger.info(f"‚ö° CHUNKED –ü–ê–†–ê–õ–õ–ï–õ–ò–ó–ê–¶–ò–Ø –¥–ª—è {period_days} –¥–Ω–µ–π")

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            tasks = []
            task_names = []

            if platform_filter in ["wb", "both"]:
                wb_chunked_task = asyncio.create_task(
                    self._get_wb_chunked_parallel(date_from, date_to)
                )
                tasks.append(wb_chunked_task)
                task_names.append("wb_chunked")

            if platform_filter in ["ozon", "both"]:
                ozon_chunked_task = asyncio.create_task(
                    self._get_ozon_chunked_parallel(date_from, date_to)
                )
                tasks.append(ozon_chunked_task)
                task_names.append("ozon_chunked")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è chunked –æ–±—Ä–∞–±–æ—Ç–∫–∏
            results = await asyncio.gather(*tasks, return_exceptions=True)

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            wb_chunked_data = []
            ozon_chunked_data = {"revenue": 0, "units": 0, "commission": 0, "profit": 0}

            result_index = 0
            if platform_filter in ["wb", "both"]:
                wb_chunked_data = (
                    results[result_index]
                    if not isinstance(results[result_index], Exception)
                    else []
                )
                if isinstance(results[result_index], Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ WB chunked: {results[result_index]}")
                result_index += 1

            if platform_filter in ["ozon", "both"]:
                ozon_chunked_data = (
                    results[result_index]
                    if not isinstance(results[result_index], Exception)
                    else {"revenue": 0, "units": 0, "commission": 0, "profit": 0}
                )
                if isinstance(results[result_index], Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ Ozon chunked: {results[result_index]}")

            # –î–∞–Ω–Ω—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ

            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            wb_data = await self._aggregate_wb_chunked_data(wb_chunked_data, date_from, date_to)
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: ozon_chunked_data —É–∂–µ –≥–æ—Ç–æ–≤—ã–π dict, –∞–≥—Ä–µ–≥–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
            ozon_data = ozon_chunked_data

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
            revenue_data = {
                "wb": wb_data.get("revenue", 0),
                "ozon": ozon_data.get("revenue", 0),
                "total": wb_data.get("revenue", 0) + ozon_data.get("revenue", 0),
            }
            units_sold = {
                "wb": wb_data.get("units", 0),
                "ozon": ozon_data.get("units", 0),
                "total": wb_data.get("units", 0) + ozon_data.get("units", 0),
            }
            orders_count = {"wb": 0, "ozon": 0, "total": 0}

            expenses_data = await self.real_data_reports.get_real_expenses(
                revenue_data, units_sold, orders_count
            )

            elapsed = time.time() - start_time
            logger.info(f"üéØ CHUNKED –ü–ê–†–ê–õ–õ–ï–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ {elapsed:.1f}—Å")

            return {
                "wb": wb_data,
                "ozon": ozon_data,
                "expenses": expenses_data,
                "processing_time": elapsed,
                "parallelized": True,
                "chunked": True,
                "period_days": period_days,
                "platform_filter": platform_filter,
            }

        except Exception as e:
            elapsed = time.time() - start_time
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ chunked –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return await self._fallback_sequential_processing(
                date_from, date_to, elapsed, platform_filter
            )

    async def _get_wb_chunked_parallel(self, date_from: str, date_to: str) -> list[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ WB –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ chunked API"""
        try:
            chunked_manager = self.real_data_reports.chunked_api

            # –ó–∞–ø—É—Å–∫–∞–µ–º sales –∏ orders –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            sales_task = asyncio.create_task(
                chunked_manager.get_wb_sales_chunked(date_from, date_to)
            )
            orders_task = asyncio.create_task(
                chunked_manager.get_wb_orders_chunked(date_from, date_to)
            )

            sales_data, orders_data = await asyncio.gather(
                sales_task, orders_task, return_exceptions=True
            )

            return {
                "sales": sales_data if not isinstance(sales_data, Exception) else [],
                "orders": orders_data if not isinstance(orders_data, Exception) else [],
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WB chunked –ø–∞—Ä–∞–ª–ª–µ–ª—å: {e}")
            return {"sales": [], "orders": []}

    async def _get_ozon_chunked_parallel(self, date_from: str, date_to: str) -> dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Ozon –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º get_real_ozon_sales –≤–º–µ—Å—Ç–æ get_ozon_fbs_chunked
            return await self.real_data_reports.get_real_ozon_sales(date_from, date_to)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Ozon –ø–æ–ª—É—á–µ–Ω–∏—è: {e}")
            return {"revenue": 0, "units": 0, "commission": 0, "profit": 0}

    async def _aggregate_wb_chunked_data(
        self, chunked_data: dict, date_from: str, date_to: str
    ) -> dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è WB chunked –¥–∞–Ω–Ω—ã—Ö"""
        try:
            sales_data = chunked_data.get("sales", [])
            orders_data = chunked_data.get("orders", [])

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ real_data_reports –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
            total_revenue = sum(
                sale.get("forPay", 0) for sale in sales_data if sale.get("isRealization")
            )
            total_units = len([sale for sale in sales_data if sale.get("isRealization")])
            total_commission = sum(
                sale.get("totalPrice", 0) - sale.get("forPay", 0)
                for sale in sales_data
                if sale.get("isRealization")
            )

            return {
                "revenue": total_revenue,
                "units": total_units,
                "commission": total_commission,
                "cogs": 0,  # –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                "profit": total_revenue - total_commission,
                "sales_data": sales_data,
                "orders_data": orders_data,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ WB: {e}")
            return {"revenue": 0, "units": 0, "commission": 0, "cogs": 0, "profit": 0}

    async def _aggregate_ozon_chunked_data(
        self, chunked_data: list[dict], date_from: str, date_to: str
    ) -> dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è Ozon chunked –¥–∞–Ω–Ω—ã—Ö"""
        try:
            total_revenue = 0
            total_units = 0
            total_commission = 0

            for transaction in chunked_data:
                if transaction.get("operation_type") == "OperationMarketplace":
                    accruals = transaction.get("accruals_for_sale", 0)
                    total_revenue += accruals
                    total_units += 1

                elif (
                    transaction.get("operation_type")
                    == "OperationMarketplaceServicePremiumCashback"
                ):
                    commission_fee = abs(transaction.get("accruals_for_sale", 0))
                    total_commission += commission_fee

            return {
                "revenue": total_revenue,
                "units": total_units,
                "commission": total_commission,
                "cogs": 0,
                "profit": total_revenue - total_commission,
                "transactions": chunked_data,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ Ozon: {e}")
            return {"revenue": 0, "units": 0, "commission": 0, "cogs": 0, "profit": 0}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_parallel_processor = None


def get_parallel_processor(real_data_reports):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    global _parallel_processor
    if _parallel_processor is None:
        _parallel_processor = ParallelDataProcessor(real_data_reports)
    return _parallel_processor
