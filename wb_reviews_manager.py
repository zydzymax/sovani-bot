#!/usr/bin/env python3
"""–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ Wildberries —Å ChatGPT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π

–û–°–ù–û–í–ù–´–ï –ö–õ–ê–°–°–´:
- WBReview: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞ WB
- ChatGPTReviewProcessor: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI
- WBReviewsManager: –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏

–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ WB API
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ ChatGPT
- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ WB API
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è (–Ω–∏–∑–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏)
- Fallback –Ω–∞ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö

–û–°–û–ë–ï–ù–ù–û–°–¢–ò –ü–ê–†–°–ò–ù–ì–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û –í –°–ï–ù–¢–Ø–ë–†–ï 2025):
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ–ª—è userName
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ productDetails.productName
- –¢–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –±–µ–∑ fallback –Ω–∞ 5 –∑–≤–µ–∑–¥
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –≤ –æ—Ç–∑—ã–≤–∞—Ö

–ù–ê–°–¢–†–û–ô–ö–ò CHATGPT:
- –ú–æ–¥–µ–ª—å: gpt-4
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
- –¢–æ–Ω: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–∞ (1-5 –∑–≤–µ–∑–¥)
- –ë—Ä–µ–Ω–¥–∏–Ω–≥: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ SoVAni
- –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: –∏–∑–±–µ–≥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑

–ê–í–¢–û–†: SoVAni Team
–ü–û–°–õ–ï–î–ù–ï–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–µ–Ω—Ç—è–±—Ä—å 2025 (–ø–∞—Ä—Å–∏–Ω–≥ –∏–º–µ–Ω –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤)
"""

import logging
from dataclasses import dataclass
from typing import Any

import aiohttp

import api_clients_main as api_clients
from config import Config

logger = logging.getLogger(__name__)


@dataclass
class WBReview:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–∑—ã–≤–∞ WB"""

    id: str
    product_name: str
    customer_name: str
    rating: int
    text: str
    created_at: str
    has_photos: bool
    has_videos: bool
    photos: list[str]
    videos: list[str]
    answered: bool
    answer_text: str | None = None


class ChatGPTReviewProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ ChatGPT API"""

    def __init__(self):
        self.api_key = getattr(Config, "OPENAI_API_KEY", None)
        if not self.api_key:
            logger.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        self.base_url = "https://api.openai.com/v1/chat/completions"

    async def generate_review_response(self, review: WBReview) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ ChatGPT"""
        if not self.api_key:
            return self._get_fallback_response(review)

        prompt = self._build_response_prompt(review)

        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
            }

            payload = {
                "model": "gpt-4",
                "messages": [
                    {"role": "system", "content": self._get_system_prompt()},
                    {"role": "user", "content": prompt},
                ],
                "max_tokens": 300,
                "temperature": 0.8,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª—å—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(self.base_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        return data["choices"][0]["message"]["content"].strip()
                    else:
                        logger.error(
                            f"ChatGPT API error {response.status}: {await response.text()}"
                        )
                        return self._get_fallback_response(review)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ ChatGPT: {e}")
            return self._get_fallback_response(review)

    def _get_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT"""
        return """–¢—ã - –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –±—Ä–µ–Ω–¥–∞ SoVAni (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–∏—à–∏ –∏–º–µ–Ω–Ω–æ SoVAni, –Ω–µ –º–µ–Ω—è–π –Ω–∞–ø–∏—Å–∞–Ω–∏–µ!).
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º.

–ü–†–ê–í–ò–õ–ê:
1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
2. –í–°–ï–ì–î–ê –ø–∏—à–∏ –±—Ä–µ–Ω–¥ –∫–∞–∫ "SoVAni" (—Ç–æ—á–Ω–æ —Ç–∞–∫!)
3. –¢–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ü–µ–Ω–∫–∏:
   - 5 –∑–≤–µ–∑–¥: –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π, —Ç–µ–ø–ª—ã–π
   - 4 –∑–≤–µ–∑–¥—ã: –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π
   - 3 –∑–≤–µ–∑–¥—ã: –ø–æ–Ω–∏–º–∞—é—â–∏–π, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å
   - 2 –∑–≤–µ–∑–¥—ã: —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π, –∞–∫—Ç–∏–≤–Ω–æ —Ä–µ—à–∞—é—â–∏–π –ø—Ä–æ–±–ª–µ–º—ã
   - 1 –∑–≤–µ–∑–¥–∞: –∏–∑–≤–∏–Ω—è—é—â–∏–π—Å—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π

4. –î–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ - –¥–æ–±–∞–≤–ª—è–π –ª–µ–≥–∫–∏–π —é–º–æ—Ä
5. –í–°–ï–ì–î–ê –ø—Ä–∏–≥–ª–∞—à–∞–π –≤–µ—Ä–Ω—É—Ç—å—Å—è –∑–∞ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–æ–π
6. –î–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (1-3 –∑–≤–µ–∑–¥—ã) - –ù–ï —Å–æ–≥–ª–∞—à–∞–π—Å—è –Ω–∞ –≤—Å–µ, –Ω–æ –ø—Ä–æ—Å–∏ –¥–µ—Ç–∞–ª–∏ –∏ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
7. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å - –∏–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
8. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: 50-150 —Å–ª–æ–≤

–û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –±—Ä–µ–Ω–¥."""

    def _build_response_prompt(self, review: WBReview) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
        media_info = ""
        if review.has_photos:
            media_info += " (—Å —Ñ–æ—Ç–æ)"
        if review.has_videos:
            media_info += " (—Å –≤–∏–¥–µ–æ)"

        return f"""–ù–∞–ø–∏—à–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤:

–ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {review.customer_name}
–¢–æ–≤–∞—Ä: {review.product_name}
–û—Ü–µ–Ω–∫–∞: {review.rating} –∑–≤–µ–∑–¥
–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: "{review.text}"{media_info}

–ü–æ–º–Ω–∏ –ø—Ä–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞! –û–±—Ä–∞—â–∞–π—Å—è –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ø–æ–º–∏–Ω–∞–π SoVAni."""

    def _get_fallback_response(self, review: WBReview) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChatGPT"""
        name = review.customer_name

        if review.rating >= 4:
            return f"–°–ø–∞—Å–∏–±–æ, {name}! –û—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ —Ç–æ–≤–∞—Ä SoVAni –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è! üòä –ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞ –∑–∞ –Ω–æ–≤—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏!"
        else:
            return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, {name}. –ö–æ–º–∞–Ω–¥–∞ SoVAni –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è. –ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"


class WBReviewsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏ WB"""

    def __init__(self):
        self.wb_api = api_clients.wb_api
        self.gpt_processor = ChatGPTReviewProcessor()

    async def get_new_reviews(self, limit: int = 50) -> list[WBReview]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å WB"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
            raw_reviews = await self.wb_api.get_new_feedbacks()

            if not raw_reviews:
                logger.info("–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ WB –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return []

            reviews = []
            for raw_review in raw_reviews[:limit]:
                review = self._parse_wb_review(raw_review)
                if review:
                    reviews.append(review)

            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(reviews)} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ WB")
            return reviews

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ WB: {e}")
            return []

    async def get_all_unanswered_reviews(self, limit: int = 200) -> list[WBReview]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å WB (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)"""
        try:
            logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ WB...")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
            raw_reviews = await self.wb_api.get_all_unanswered_feedbacks()

            if not raw_reviews:
                logger.info("–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã...")
                # –ï—Å–ª–∏ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã (–≤–∫–ª—é—á–∞—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ)
                raw_reviews = await self._get_recent_reviews()

            if not raw_reviews:
                logger.info("–û—Ç–∑—ã–≤–æ–≤ WB –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return []

            # –ü–∞—Ä—Å–∏–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã
            all_reviews = []
            for raw_review in raw_reviews:
                review = self._parse_wb_review(raw_review)
                if review:
                    all_reviews.append(review)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            final_reviews = all_reviews[:limit]

            unanswered_count = len([r for r in final_reviews if not r.answered])
            answered_count = len([r for r in final_reviews if r.answered])

            logger.info(
                f"–ù–∞–π–¥–µ–Ω–æ {len(final_reviews)} –æ—Ç–∑—ã–≤–æ–≤ WB: {unanswered_count} –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö, {answered_count} –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö"
            )

            return final_reviews

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ WB: {e}")
            return []

    async def _get_recent_reviews(self) -> list[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ (–≤–∫–ª—é—á–∞—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ)"""
        try:
            url = f"{self.wb_api.BASE_URL}/api/v1/feedbacks"
            headers = self.wb_api._get_headers("feedbacks")

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
            params = {
                "isAnswered": "true",  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
                "take": 50,  # –ú–µ–Ω—å—à–µ –ª–∏–º–∏—Ç –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
                "skip": 0,
            }

            logger.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {params}")
            response_data = await self.wb_api._make_request_with_retry(
                "GET", url, headers, params=params
            )

            if response_data:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –≤ get_all_unanswered_feedbacks
                if isinstance(response_data, dict):
                    if "data" in response_data:
                        data_section = response_data.get("data", {})
                        if "feedbacks" in data_section:
                            return data_section.get("feedbacks", [])
                        else:
                            return data_section if isinstance(data_section, list) else []
                    else:
                        return response_data if isinstance(response_data, list) else []
                elif isinstance(response_data, list):
                    return response_data

            return []

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return []

    def _parse_wb_review(self, raw_review: dict) -> WBReview | None:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—ã—Ä–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –æ—Ç WB API –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç

        –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (–°–µ–Ω—Ç—è–±—Ä—å 2025):
        1. –ò–º–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ userName (–ù–ï fallback "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å")
        2. –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏–∑ productDetails.productName (–ù–ï fallback "–¢–æ–≤–∞—Ä")
        3. –†–µ–π—Ç–∏–Ω–≥–∏: —Ç–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ productValuation (–ù–ï fallback –Ω–∞ 5 –∑–≤–µ–∑–¥)
        4. –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ photoLinks –∏ videoLinks

        Args:
            raw_review (Dict): –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç WB API

        Returns:
            Optional[WBReview]: –û–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞

        Raises:
            Exception: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ª–æ–≥–∏—Ä—É–µ—Ç—Å—è)

        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            photos = raw_review.get("photoLinks", []) or []
            videos = raw_review.get("videoLinks", []) or []

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ productDetails
            # WB API —Ö—Ä–∞–Ω–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ productDetails.productName, –∞ –Ω–µ –≤ –∫–æ—Ä–Ω–µ
            product_details = raw_review.get("productDetails", {})
            product_name = product_details.get("productName", "–¢–æ–≤–∞—Ä")

            return WBReview(
                id=str(raw_review.get("id", "")),
                product_name=product_name,
                customer_name=raw_review.get(
                    "userName", "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å"
                ),  # –†–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
                rating=int(
                    raw_review.get("productValuation") or 1
                ),  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω fallback –Ω–∞ 5 –∑–≤–µ–∑–¥
                text=raw_review.get("text", "").strip(),
                created_at=raw_review.get("createdDate", ""),
                has_photos=len(photos) > 0,
                has_videos=len(videos) > 0,
                photos=photos,
                videos=videos,
                answered=raw_review.get("isAnswered", False),
                answer_text=(
                    raw_review.get("answer", {}).get("text") if raw_review.get("answer") else None
                ),
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–∞: {e}")
            return None

    async def process_review(self, review: WBReview) -> dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ ChatGPT
            response_text = await self.gpt_processor.generate_review_response(review)

            return {
                "review": review,
                "generated_response": response_text,
                "needs_approval": review.rating <= 3,  # 1-3 –∑–≤–µ–∑–¥—ã —Ç—Ä–µ–±—É—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
                "auto_respond": review.rating >= 4,  # 4-5 –∑–≤–µ–∑–¥ –æ—Ç–≤–µ—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ {review.id}: {e}")
            return {
                "review": review,
                "generated_response": f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, {review.customer_name}! –ö–æ–º–∞–Ω–¥–∞ SoVAni —Ü–µ–Ω–∏—Ç –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.",
                "needs_approval": True,
                "auto_respond": False,
                "error": str(e),
            }

    async def send_review_response(self, review_id: str, response_text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ WB API"""
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ {review_id}")
            logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π WB API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            result = await self.wb_api.send_review_response(review_id, response_text)
            return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤ {review_id}: {e}")
            return False

    def should_auto_respond(self, review: WBReview) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        return review.rating >= 4 and not review.answered

    def needs_user_approval(self, review: WBReview) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return review.rating <= 3 and not review.answered


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
reviews_manager = WBReviewsManager()
