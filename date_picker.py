"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ Telegram –±–æ—Ç–µ
"""

import calendar
from datetime import datetime, timedelta, date
from typing import Tuple, Optional, Dict, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
WB_MAX_DAYS = 176  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è WB API
OZON_MAX_DAYS = 180  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è Ozon API (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π)
DEFAULT_MAX_DAYS = 365  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤


class DatePicker:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç"""

    @staticmethod
    def get_predefined_periods_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏"""
        kb = InlineKeyboardMarkup(row_width=2)

        # –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        kb.add(
            InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="period:today"),
            InlineKeyboardButton("üìÖ –í—á–µ—Ä–∞", callback_data="period:yesterday")
        )
        kb.add(
            InlineKeyboardButton("üìÖ 7 –¥–Ω–µ–π", callback_data="period:7d"),
            InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data="period:30d")
        )
        kb.add(
            InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="period:current_week"),
            InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="period:current_month")
        )
        kb.add(
            InlineKeyboardButton("üìÖ –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", callback_data="period:last_week"),
            InlineKeyboardButton("üìÖ –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="period:last_month")
        )

        # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        kb.add(
            InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã", callback_data="period:custom")
        )

        return kb

    @staticmethod
    def get_calendar_keyboard(year: int, month: int, selection_type: str = "from") -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã

        Args:
            year: –ì–æ–¥
            month: –ú–µ—Å—è—Ü (1-12)
            selection_type: 'from' –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã, 'to' –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π
        """
        kb = InlineKeyboardMarkup()

        # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
        month_name = calendar.month_name[month]
        kb.add(InlineKeyboardButton(
            f"üìÖ {month_name} {year}",
            callback_data="calendar:ignore"
        ))

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1
        next_month = month + 1 if month < 12 else 1
        next_year = year if month < 12 else year + 1

        kb.add(
            InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"calendar:{selection_type}:{prev_year}:{prev_month}"),
            InlineKeyboardButton("üìÜ", callback_data="calendar:ignore"),
            InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"calendar:{selection_type}:{next_year}:{next_month}")
        )

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        weekdays = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
        kb.add(*[InlineKeyboardButton(day, callback_data="calendar:ignore") for day in weekdays])

        # –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—è —Å–µ—Ç–∫–∞
        cal = calendar.monthcalendar(year, month)
        today = datetime.now().date()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if context and 'wb' in context.lower():
            max_days = WB_MAX_DAYS
        elif context and 'ozon' in context.lower():
            max_days = OZON_MAX_DAYS
        else:
            max_days = DEFAULT_MAX_DAYS

        min_allowed_date = today - timedelta(days=max_days)

        for week in cal:
            week_buttons = []
            for day in week:
                if day == 0:
                    week_buttons.append(InlineKeyboardButton(" ", callback_data="calendar:ignore"))
                else:
                    current_date = date(year, month, day)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                    is_too_old = current_date < min_allowed_date
                    is_future = current_date > today

                    if is_too_old or is_future:
                        # –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞ - —Å–µ—Ä–∞—è –∏ –±–µ–∑ callback
                        text = f"üö´{day}"
                        callback_data = "calendar:ignore"
                    elif current_date == today:
                        # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
                        text = f"üîµ{day}"
                        callback_data = f"calendar:select:{selection_type}:{year}:{month}:{day}"
                    else:
                        # –î–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞
                        text = str(day)
                        callback_data = f"calendar:select:{selection_type}:{year}:{month}:{day}"

                    week_buttons.append(InlineKeyboardButton(text, callback_data=callback_data))
            kb.add(*week_buttons)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        kb.add(
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="calendar:cancel"),
            InlineKeyboardButton("üìÖ –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–∏–æ–¥—ã", callback_data="calendar:quick")
        )

        return kb

    @staticmethod
    def parse_predefined_period(period_code: str) -> Tuple[str, str]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ –¥–∞—Ç—ã

        Args:
            period_code: –ö–æ–¥ –ø–µ—Ä–∏–æ–¥–∞ (today, yesterday, 7d, etc.)

        Returns:
            Tuple[date_from, date_to] –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        """
        today = datetime.now().date()

        if period_code == "today":
            return today.strftime("%Y-%m-%d"), today.strftime("%Y-%m-%d")

        elif period_code == "yesterday":
            yesterday = today - timedelta(days=1)
            return yesterday.strftime("%Y-%m-%d"), yesterday.strftime("%Y-%m-%d")

        elif period_code.endswith("d"):
            # –ü–µ—Ä–∏–æ–¥—ã –≤ –¥–Ω—è—Ö (7d, 30d, etc.)
            days = int(period_code[:-1])
            start_date = today - timedelta(days=days-1)
            return start_date.strftime("%Y-%m-%d"), today.strftime("%Y-%m-%d")

        elif period_code == "current_week":
            # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            start_week = today - timedelta(days=today.weekday())
            end_week = start_week + timedelta(days=6)
            return start_week.strftime("%Y-%m-%d"), end_week.strftime("%Y-%m-%d")

        elif period_code == "last_week":
            # –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è
            last_monday = today - timedelta(days=today.weekday() + 7)
            last_sunday = last_monday + timedelta(days=6)
            return last_monday.strftime("%Y-%m-%d"), last_sunday.strftime("%Y-%m-%d")

        elif period_code == "current_month":
            # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è)
            start_month = today.replace(day=1)
            end_month = today  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±—É–¥—É—â–∏—Ö –¥–∞—Ç
            return start_month.strftime("%Y-%m-%d"), end_month.strftime("%Y-%m-%d")

        elif period_code == "last_month":
            # –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
            if today.month == 1:
                start_month = today.replace(year=today.year - 1, month=12, day=1)
                end_month = today.replace(day=1) - timedelta(days=1)
            else:
                start_month = today.replace(month=today.month - 1, day=1)
                end_month = today.replace(day=1) - timedelta(days=1)
            return start_month.strftime("%Y-%m-%d"), end_month.strftime("%Y-%m-%d")

        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            start_date = today - timedelta(days=6)
            return start_date.strftime("%Y-%m-%d"), today.strftime("%Y-%m-%d")

    @staticmethod
    def format_period_description(date_from: str, date_to: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

        Args:
            date_from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            date_to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)

        Returns:
            –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
        """
        try:
            from_date = datetime.strptime(date_from, "%Y-%m-%d").date()
            to_date = datetime.strptime(date_to, "%Y-%m-%d").date()

            # –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            from_formatted = from_date.strftime("%d.%m.%Y")
            to_formatted = to_date.strftime("%d.%m.%Y")

            # –°–µ–≥–æ–¥–Ω—è/–≤—á–µ—Ä–∞
            today = datetime.now().date()
            yesterday = today - timedelta(days=1)

            if from_date == to_date == today:
                return "–°–µ–≥–æ–¥–Ω—è"
            elif from_date == to_date == yesterday:
                return "–í—á–µ—Ä–∞"
            elif from_date == to_date:
                return f"{from_formatted}"

            # –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö
            delta = (to_date - from_date).days + 1

            if delta <= 7:
                return f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {delta} –¥–Ω. ({from_formatted} - {to_formatted})"
            elif delta <= 31:
                return f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {delta} –¥–Ω. ({from_formatted} - {to_formatted})"
            else:
                return f"{from_formatted} - {to_formatted}"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞: {e}")
            return f"{date_from} - {date_to}"

    @staticmethod
    def validate_date_range(date_from: str, date_to: str, context: str = None) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç

        Args:
            date_from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            date_to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ (wb_financial, ozon_financial, etc.)

        Returns:
            Tuple[is_valid, error_message]
        """
        try:
            from_date = datetime.strptime(date_from, "%Y-%m-%d").date()
            to_date = datetime.strptime(date_to, "%Y-%m-%d").date()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if context and 'wb' in context.lower():
                max_days = WB_MAX_DAYS
                marketplace = "WB"
            elif context and 'ozon' in context.lower():
                max_days = OZON_MAX_DAYS
                marketplace = "Ozon"
            else:
                max_days = DEFAULT_MAX_DAYS
                marketplace = "–æ–±—â–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –¥–∞—Ç
            if from_date > to_date:
                return False, "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            period_days = (to_date - from_date).days
            if period_days > max_days:
                return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è {marketplace}: {max_days} –¥–Ω–µ–π"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
            today = datetime.now().date()
            if from_date > today or to_date > today:
                return False, "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
            min_date = today - timedelta(days=max_days)
            if from_date < min_date:
                return False, f"–°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞ –¥–ª—è {marketplace} (–º–∞–∫—Å–∏–º—É–º {max_days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)"

            return True, ""

        except ValueError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"


class DateRangeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞"""

    def __init__(self):
        self.user_selections: Dict[int, Dict[str, Any]] = {}

    def start_date_selection(self, user_id: int, context: str = "report"):
        """–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
        self.user_selections[user_id] = {
            'context': context,
            'date_from': None,
            'date_to': None,
            'step': 'from'  # 'from', 'to', 'complete'
        }

    def set_date_from(self, user_id: int, date_from: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã"""
        if user_id in self.user_selections:
            self.user_selections[user_id]['date_from'] = date_from
            self.user_selections[user_id]['step'] = 'to'

    def set_date_to(self, user_id: int, date_to: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã"""
        if user_id in self.user_selections:
            self.user_selections[user_id]['date_to'] = date_to
            self.user_selections[user_id]['step'] = 'complete'

    def get_selection(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç"""
        return self.user_selections.get(user_id)

    def clear_selection(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞"""
        if user_id in self.user_selections:
            del self.user_selections[user_id]

    def is_complete(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞"""
        selection = self.user_selections.get(user_id)
        return selection and selection.get('step') == 'complete'


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—Ç
date_range_manager = DateRangeManager()


def get_enhanced_period_menu() -> InlineKeyboardMarkup:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–æ–≤"""
    return DatePicker.get_predefined_periods_menu()


def get_calendar_for_date_selection(year: int = None, month: int = None, selection_type: str = "from", context: str = None) -> InlineKeyboardMarkup:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    if year is None or month is None:
        now = datetime.now()
        year, month = now.year, now.month

    return DatePicker.get_calendar_keyboard(year, month, selection_type)