#!/usr/bin/env python3
"""–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö"""

import asyncio
import logging
from datetime import datetime, timedelta

import api_clients_main as api_clients
from api_chunking import ChunkedAPIManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class ZeroSalesAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏"""

    def __init__(self):
        self.chunked_manager = ChunkedAPIManager(api_clients)

    async def analyze_sales_timeline(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂"""
        logger.info("üîç –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–û–ô –õ–ò–ù–ò–ò –ü–†–û–î–ê–ñ")
        logger.info("=" * 50)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –æ—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–∞–∑–∞–¥
        today = datetime(2025, 9, 28)

        periods_to_test = [
            ("today", today.strftime("%Y-%m-%d"), today.strftime("%Y-%m-%d")),
            (
                "yesterday",
                (today - timedelta(days=1)).strftime("%Y-%m-%d"),
                (today - timedelta(days=1)).strftime("%Y-%m-%d"),
            ),
            (
                "2_days_ago",
                (today - timedelta(days=2)).strftime("%Y-%m-%d"),
                (today - timedelta(days=2)).strftime("%Y-%m-%d"),
            ),
            (
                "3_days_ago",
                (today - timedelta(days=3)).strftime("%Y-%m-%d"),
                (today - timedelta(days=3)).strftime("%Y-%m-%d"),
            ),
            (
                "last_week",
                (today - timedelta(days=7)).strftime("%Y-%m-%d"),
                (today - timedelta(days=7)).strftime("%Y-%m-%d"),
            ),
            ("september_start", "2025-09-01", "2025-09-07"),
            ("january_known_good", "2025-01-01", "2025-01-07"),
        ]

        results = {}

        for name, date_from, date_to in periods_to_test:
            logger.info(f"\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º {name}: {date_from} - {date_to}")

            try:
                # –ü–æ–ª—É—á–∞–µ–º Sales –¥–∞–Ω–Ω—ã–µ
                sales_data = await self.chunked_manager.get_wb_sales_chunked(date_from, date_to)
                sales_count = len(sales_data) if sales_data else 0

                # –ü–æ–ª—É—á–∞–µ–º Orders –¥–∞–Ω–Ω—ã–µ
                orders_data = await self.chunked_manager.get_wb_orders_chunked(date_from, date_to)
                orders_count = len(orders_data) if orders_data else 0

                results[name] = {
                    "date_from": date_from,
                    "date_to": date_to,
                    "sales_count": sales_count,
                    "orders_count": orders_count,
                    "has_sales": sales_count > 0,
                    "has_orders": orders_count > 0,
                }

                status_sales = "‚úÖ" if sales_count > 0 else "‚ùå"
                status_orders = "‚úÖ" if orders_count > 0 else "‚ùå"

                logger.info(f"   {status_sales} Sales: {sales_count}")
                logger.info(f"   {status_orders} Orders: {orders_count}")

                # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                if sales_data and len(sales_data) > 0:
                    first_sale = sales_data[0]
                    logger.info(
                        f"   üìä –ü–µ—Ä–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞: {first_sale.get('date', 'N/A')} - {first_sale.get('priceWithDisc', 0)}‚ÇΩ"
                    )

                if orders_data and len(orders_data) > 0:
                    first_order = orders_data[0]
                    logger.info(
                        f"   üìä –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑: {first_order.get('date', 'N/A')} - {first_order.get('priceWithDisc', 0)}‚ÇΩ"
                    )

            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                results[name] = {"date_from": date_from, "date_to": date_to, "error": str(e)}

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(2)

        return results

    def analyze_sales_lag_hypothesis(self, results):
        """–ê–Ω–∞–ª–∏–∑ –≥–∏–ø–æ—Ç–µ–∑—ã –æ –ª–∞–≥–µ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
        logger.info("\nüîç –ê–ù–ê–õ–ò–ó –ì–ò–ü–û–¢–ï–ó–´ –û –õ–ê–ì–ï –í –ü–†–û–î–ê–ñ–ê–•")
        logger.info("=" * 50)

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö
        has_recent_sales = any(
            r.get("has_sales", False)
            for name, r in results.items()
            if "today" in name or "yesterday" in name
        )
        has_older_sales = any(
            r.get("has_sales", False)
            for name, r in results.items()
            if "ago" in name or "january" in name
        )

        logger.info(f"–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏: {'‚úÖ' if has_recent_sales else '‚ùå'}")
        logger.info(f"–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–∏–æ–¥—ã: {'‚úÖ' if has_older_sales else '‚ùå'}")

        if not has_recent_sales and has_older_sales:
            logger.info("üéØ –ì–ò–ü–û–¢–ï–ó–ê: Sales API –∏–º–µ–µ—Ç –ª–∞–≥ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π")
            logger.info("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Orders –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        elif not has_recent_sales and not has_older_sales:
            logger.info("üéØ –ì–ò–ü–û–¢–ï–ó–ê: –ü—Ä–æ–±–ª–µ–º–∞ —Å Sales API –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–º")
            logger.info("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø—ã –∫ Sales API")
        else:
            logger.info("üéØ –î–ê–ù–ù–´–ï –í–´–ì–õ–Ø–î–Ø–¢ –ù–û–†–ú–ê–õ–¨–ù–û")

    async def get_sales_api_documentation(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Sales API"""
        logger.info("\nüìö –ê–ù–ê–õ–ò–ó –û–°–û–ë–ï–ù–ù–û–°–¢–ï–ô WB SALES API")
        logger.info("=" * 50)

        logger.info("üîç –ò–ó–í–ï–°–¢–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò WB SALES API:")
        logger.info("1. Sales API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¢–û–õ–¨–ö–û —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
        logger.info("2. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ 1-3 –¥–Ω—è –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞")
        logger.info("3. API –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 24 —á–∞—Å–æ–≤")
        logger.info("4. –î–∞–Ω–Ω—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–∫—É–ø–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º")

        logger.info("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ù–£–õ–ï–í–´–• SALES:")
        logger.info("‚Ä¢ –ó–∞–∫–∞–∑—ã –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏")
        logger.info("‚Ä¢ API –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        logger.info("‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–∞–≥ WB")
        logger.info("‚Ä¢ –§–∏–ª—å—Ç—Ä isRealization —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–æ")

        logger.info("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        logger.info("1. –î–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö (1-3 –¥–Ω—è) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Orders API")
        logger.info("2. –î–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (>3 –¥–Ω–µ–π) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Sales API")
        logger.info("3. –î–æ–±–∞–≤–∏—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: Orders + Sales")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = ZeroSalesAnalyzer()

    logger.info("üö® –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ù–£–õ–ï–í–´–ú–ò –ü–†–û–î–ê–ñ–ê–ú–ò")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é
    results = await analyzer.analyze_sales_timeline()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ –ª–∞–≥–µ
    analyzer.analyze_sales_lag_hypothesis(results)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ API
    await analyzer.get_sales_api_documentation()

    logger.info("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")

    return results


if __name__ == "__main__":
    results = asyncio.run(main())
