"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é OpenAI ChatGPT
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å SoVAni: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å —é–º–æ—Ä–æ–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
"""

import logging
from typing import Dict, Any, Optional
import openai
import asyncio
from config import Config
from db import get_template

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = Config.OPENAI_API_KEY


def get_system_prompt(review_data: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞"""

    rating = review_data.get('rating', 3)
    has_media = review_data.get('has_media', False)
    platform = review_data.get('platform', 'WB')

    base_prompt = """–¢—ã - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –±—Ä–µ–Ω–¥–∞ SoVAni, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.

–ë—Ä–µ–Ω–¥ SoVAni:
- –ú–æ–ª–æ–¥–æ–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–µ–≥–∫–∏–π —é–º–æ—Ä, –Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –¶–µ–Ω–∏—Ç –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
- –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –∏ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è."""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    if rating >= 5:
        tone_instruction = """
–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è 5 –∑–≤–µ–∑–¥:
- –ò—Å–∫—Ä–µ–Ω–Ω—è—è —Ä–∞–¥–æ—Å—Ç—å –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
- –í—ã—Ä–∞–∂–∞–π –≤–æ—Å—Ç–æ—Ä–≥, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∏–≥—Ä—ã–≤–∞–π
- –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ (1-2 —à—Ç.)
- –ü–æ–¥—á–µ—Ä–∫–Ω–∏, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ SoVAni —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
"""
    elif rating == 4:
        tone_instruction = """
–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è 4 –∑–≤–µ–∑–¥:
- –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ —Ö–æ—Ä–æ—à—É—é –æ—Ü–µ–Ω–∫—É
- –õ–µ–≥–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
- –ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ü–µ–Ω–∏—à—å —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É
"""
    elif rating == 3:
        tone_instruction = """
–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è 3 –∑–≤–µ–∑–¥:
- –°–ø–æ–∫–æ–π–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —É–ª—É—á—à–∞—Ç—å—Å—è
- –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ
"""
    elif rating == 2:
        tone_instruction = """
–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è 2 –∑–≤–µ–∑–¥:
- –°–æ–∂–∞–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
- –ü–æ–∫–∞–∂–∏, —á—Ç–æ SoVAni —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É
- –ü—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
"""
    else:  # rating == 1
        tone_instruction = """
–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è 1 –∑–≤–µ–∑–¥—ã:
- –ò—Å–∫—Ä–µ–Ω–Ω–∏–µ –∏–∑–≤–∏–Ω–µ–Ω–∏—è
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–º–æ—â–∏
- –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è SoVAni
- –ü—Ä–µ–¥–ª–æ–∂–∏ –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
"""

    media_instruction = ""
    if has_media:
        media_instruction = "\n- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –¥—Ä—É–≥–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º)"

    length_instruction = "\n\n–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º."

    return base_prompt + tone_instruction + media_instruction + length_instruction


async def generate_review_reply(review: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤"""

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    review_text = review.get('text', '').strip()
    rating = review.get('rating', 0)
    has_media = review.get('has_media', False)

    if not review_text:
        # –û—Ç–∑—ã–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω
        template = get_template(rating, False, has_media)
        if template:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ({rating} –∑–≤–µ–∑–¥)")
            return template

    # –û—Ç–∑—ã–≤ —Å —Ç–µ–∫—Å—Ç–æ–º - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ChatGPT
    try:
        system_prompt = get_system_prompt(review)

        user_message = f"""
–û—Ç–∑—ã–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:
–†–µ–π—Ç–∏–Ω–≥: {rating} –∑–≤–µ–∑–¥
–¢–µ–∫—Å—Ç: "{review_text}"
{f'–ö –æ—Ç–∑—ã–≤—É –ø—Ä–∏–ª–æ–∂–µ–Ω–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ' if has_media else ''}
–¢–æ–≤–∞—Ä: {review.get('sku', 'N/A')}

–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—Ü–∞ –±—Ä–µ–Ω–¥–∞ SoVAni.
"""

        response = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: openai.ChatCompletion.create(
                model=Config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=200,
                temperature=0.8,
                timeout=30
            )
        )

        generated_answer = response.choices[0].message.content.strip()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ ChatGPT")
        return generated_answer

    except openai.error.RateLimitError:
        logger.warning("OpenAI: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        return get_fallback_review_response(rating, has_media)

    except openai.error.InvalidRequestError as e:
        logger.error(f"OpenAI: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å - {e}")
        return get_fallback_review_response(rating, has_media)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤: {e}")
        return get_fallback_review_response(rating, has_media)


async def generate_question_reply(question: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""

    try:
        system_prompt = """–¢—ã - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –±—Ä–µ–Ω–¥–∞ SoVAni.

–ë—Ä–µ–Ω–¥ SoVAni:
- –ú–æ–ª–æ–¥–æ–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –æ—Ç–∫—Ä—ã—Ç—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
- –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –∏ –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ —Ç–æ–≤–∞—Ä–µ.

–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å)
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é
- –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–æ–≤–∞—Ä—É
- –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

–ò–∑–±–µ–≥–∞–π:
- –ò–∑–ª–∏—à–Ω–µ –¥–ª–∏–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞
- –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç–æ–Ω–µ"""

        question_text = question.get('text', '')
        sku = question.get('sku', 'N/A')

        user_message = f"""
–í–æ–ø—Ä–æ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ —Ç–æ–≤–∞—Ä–µ {sku}:
"{question_text}"

–ù–∞–ø–∏—à–∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—Ü–∞ –±—Ä–µ–Ω–¥–∞ SoVAni.
"""

        response = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: openai.ChatCompletion.create(
                model=Config.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=150,
                temperature=0.7,
                timeout=30
            )
        )

        generated_answer = response.choices[0].message.content.strip()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ChatGPT")
        return generated_answer

    except openai.error.RateLimitError:
        logger.warning("OpenAI: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        return get_fallback_question_response()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        return get_fallback_question_response()


def get_fallback_review_response(rating: int, has_media: bool = False) -> str:
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ ChatGPT"""

    media_part = " –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ!" if has_media else ""

    if rating >= 5:
        return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É!{media_part} –ö–æ–º–∞–Ω–¥–∞ SoVAni –æ—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è! ‚≠ê"
    elif rating == 4:
        return f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ö–æ—Ä–æ—à—É—é –æ—Ü–µ–Ω–∫—É!{media_part} –°—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –µ—â–µ –ª—É—á—à–µ! üòä"
    elif rating == 3:
        return f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!{media_part} –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!"
    elif rating == 2:
        return f"–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å.{media_part} –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ - —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –∏ –ø–æ–º–æ–∂–µ–º!"
    else:
        return f"–°–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –Ω–µ –æ–ø—Ä–∞–≤–¥–∞–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è.{media_part} –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º! üôè"


def get_fallback_question_response() -> str:
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ ChatGPT"""
    return "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É —Ç–æ–≤–∞—Ä—É! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é - —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º! üòä"


async def test_openai_connection() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API"""
    try:
        response = await asyncio.get_event_loop().run_in_executor(
            None,
            lambda: openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç."}],
                max_tokens=10,
                timeout=15
            )
        )

        if response and response.choices:
            logger.info("OpenAI API: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            return True

    except openai.error.AuthenticationError:
        logger.error("OpenAI API: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
    except openai.error.RateLimitError:
        logger.warning("OpenAI API: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        return True  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ª–∏–º–∏—Ç
    except Exception as e:
        logger.error(f"OpenAI API: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - {e}")

    return False


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
def truncate_text(text: str, max_length: int = 500) -> str:
    """–û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def clean_review_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned = " ".join(text.strip().split())

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    return truncate_text(cleaned, 400)


# –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
_response_cache = {}

async def get_cached_response(key: str, generator_func, *args, **kwargs) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if key in _response_cache:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {key}")
        return _response_cache[key]

    response = await generator_func(*args, **kwargs)
    _response_cache[key] = response

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    if len(_response_cache) > 100:
        # –£–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        _response_cache.pop(next(iter(_response_cache)))

    return response
