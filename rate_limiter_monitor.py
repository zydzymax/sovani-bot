"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏ rate limiter
"""

import asyncio
import logging
from typing import Dict, Any
from rate_limiter import get_rate_limit_stats, rate_limiter

logger = logging.getLogger(__name__)


async def monitor_api_usage() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API"""
    stats = get_rate_limit_stats()

    report = "üìä **Rate Limiter Status Report**\n\n"

    for api_name, stat in stats.items():
        if stat['requests_last_minute'] > 0 or api_name in ['wb_advertising', 'ozon_general']:
            report += f"üîπ **{api_name.upper()}**\n"
            report += f"   ‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã: {stat['requests_last_minute']}/{stat['requests_per_minute_limit']} req/min\n"
            report += f"   ‚Ä¢ Burst —Ç–æ–∫–µ–Ω—ã: {stat['burst_tokens_remaining']}/{stat['burst_limit']}\n"
            report += f"   ‚Ä¢ –ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª: {stat['min_interval_ms']}ms\n"

            # –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage_percent = (stat['requests_last_minute'] / stat['requests_per_minute_limit']) * 100
            if usage_percent > 80:
                report += f"   ‚Ä¢ ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {usage_percent:.1f}%\n"
            elif usage_percent > 50:
                report += f"   ‚Ä¢ üü° –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {usage_percent:.1f}%\n"
            else:
                report += f"   ‚Ä¢ ‚úÖ –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {usage_percent:.1f}%\n"

            # –û—Å—Ç–∞–≤—à–∏–µ—Å—è burst —Ç–æ–∫–µ–Ω—ã
            burst_percent = (stat['burst_tokens_remaining'] / stat['burst_limit']) * 100
            if burst_percent < 20:
                report += f"   ‚Ä¢ üî¥ –ú–∞–ª–æ burst —Ç–æ–∫–µ–Ω–æ–≤: {burst_percent:.0f}%\n"

            report += "\n"

    return report


async def simulate_rate_limiting_test() -> str:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiter —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    test_results = []

    test_results.append("üß™ **Rate Limiter Testing**\n")

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    test_results.append("**–¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã**")
    try:
        from rate_limiter import with_rate_limit

        start_time = asyncio.get_event_loop().time()
        await with_rate_limit('wb_advertising')
        end_time = asyncio.get_event_loop().time()

        wait_time = (end_time - start_time) * 1000
        test_results.append(f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞: {wait_time:.1f}ms")

    except Exception as e:
        test_results.append(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ burst —Ç–æ–∫–µ–Ω–æ–≤
    test_results.append("\n**–¢–µ—Å—Ç 2: Burst —Ç–æ–∫–µ–Ω—ã**")
    try:
        initial_stats = get_rate_limit_stats()['wb_advertising']

        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(3):
            await with_rate_limit('wb_advertising')

        final_stats = get_rate_limit_stats()['wb_advertising']

        burst_used = initial_stats['burst_tokens_remaining'] - final_stats['burst_tokens_remaining']
        test_results.append(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ burst —Ç–æ–∫–µ–Ω–æ–≤: {burst_used}")
        test_results.append(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {final_stats['burst_tokens_remaining']}/{final_stats['burst_limit']}")

    except Exception as e:
        test_results.append(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    return "\n".join(test_results)


async def reset_rate_limiter_stats() -> str:
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limiter"""
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        rate_limiter.request_counts.clear()
        rate_limiter.last_request_times.clear()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º burst —Ç–æ–∫–µ–Ω—ã
        for api_name, config in rate_limiter.CONFIGS.items():
            rate_limiter.burst_tokens[api_name] = config.burst_limit

        logger.info("Rate limiter statistics reset")
        return "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ rate limiter —Å–±—Ä–æ—à–µ–Ω–∞"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ rate limiter: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}"


def get_rate_limiter_recommendations() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ rate limiting"""
    stats = get_rate_limit_stats()
    recommendations = []

    recommendations.append("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ Rate Limiting**\n")

    for api_name, stat in stats.items():
        if stat['requests_last_minute'] > 0:
            usage_percent = (stat['requests_last_minute'] / stat['requests_per_minute_limit']) * 100

            if usage_percent > 90:
                recommendations.append(f"üî¥ **{api_name}**: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞! –°–Ω–∏–∑–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤")
            elif usage_percent > 70:
                recommendations.append(f"üü° **{api_name}**: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
            elif usage_percent > 50:
                recommendations.append(f"üü¢ **{api_name}**: –£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞. –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ burst —Ç–æ–∫–µ–Ω–æ–≤
            burst_percent = (stat['burst_tokens_remaining'] / stat['burst_limit']) * 100
            if burst_percent < 30:
                recommendations.append(f"‚ö†Ô∏è **{api_name}**: –ú–∞–ª–æ burst —Ç–æ–∫–µ–Ω–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")

    if len(recommendations) == 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        recommendations.append("‚úÖ –í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ")

    return "\n".join(recommendations)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    async def main():
        print(await monitor_api_usage())
        print(await simulate_rate_limiting_test())
        print(get_rate_limiter_recommendations())

    asyncio.run(main())